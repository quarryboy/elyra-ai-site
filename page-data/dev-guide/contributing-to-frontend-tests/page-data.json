{"componentChunkName":"component---src-pages-dev-guide-contributing-to-frontend-tests-mdx","path":"/dev-guide/contributing-to-frontend-tests/","result":{"pageContext":{"frontmatter":{"title":"Contributing to frontend tests","description":"Contributing to frontend tests"},"relativePagePath":"/dev-guide/contributing-to-frontend-tests.mdx","titleType":"page","MdxNode":{"id":"882c782b-ab07-599a-8fff-4bfd6567af7b","children":[],"parent":"654306e4-431f-5952-a7ab-ffd55ccfc82e","internal":{"content":"---\ntitle: Contributing to frontend tests\ndescription: Contributing to frontend tests\n---\n\nexport const Title = () => (\n  <span>\n    Contributing to frontend tests\n  </span>\n);\n\n<PageDescription>\n\n\nElyra uses two types of frontend tests: integration tests (which use [cypress](https://docs.cypress.io/)) and unit tests (which use [jest](https://jestjs.io/docs/en/getting-started)). \n\n</PageDescription>\n\n## Integration tests\nBefore running integration tests, docker needs to be installed and running on your machine. There are two ways to run the integration tests: to only see the output logs from all of the integration tests, run `make test-integration` from the root directory. To debug tests that are going wrong or develop new tests, run `make test-integration-debug` - this will open an interactive tool for writing and debugging tests.\n\nElyra's integration tests automatically start JupyterLab and visit / interact with pages through cypress API calls. The tests use the cypress API to check for the existence of various buttons and visual elements. Refer to the [cypress API](https://docs.cypress.io/api/api/table-of-contents.html) for more details.\n\nNew integration tests can be added to `tests/integration`. \n\n## Unit tests\nTo run all of the unit tests, use `make test-ui-unit` from the root directory. To run the unit tests for a specific Elyra package, simply run `jest` from that package's directory (under `packages/`). For writing tests, `jest` has a watch mode option: just run `jest --watch`. \n\nElyra's unit tests test the various classes and objects used by Elyra extensions. Refer to the [jest API](https://jestjs.io/docs/en/getting-started) for more details. \n\nTo add unit tests for a package that doesn't have tests set up, some configuration files are required. In the directory for the package being tested, add a file titled `jest.config.js` that contains the following:\n```\nmodule.exports = require('../../testutils/jest.config');\n```\nThen, in the `package.json`, add the following under `'scripts'`:\n```\n\"test\": \"jest\",\n\"build:test\": \"tsc --build tsconfig.test.json\",\n```\nAnd the following under `'dev_dependencies'`:\n```\n\"@jupyterlab/testutils\": \"^1.0.0\",\n\"@types/enzyme\": \"^3.10.5\",\n\"@types/enzyme-adapter-react-16\": \"^1.0.6\",\n\"@types/jest\": \"^23.3.11\",\n\"enzyme\": \"^3.11.0\",\n\"enzyme-adapter-react-16\": \"^1.15.3\",\n\"install\": \"^0.13.0\",\n\"jest\": \"^24.7.1\",\n\"jest-raw-loader\": \"^1.0.1\",\n\"ts-jest\": \"^24.0.2\",\n```\nCreate a file `tsconfig.test.json` that contains:\n```\n{\n  \"extends\": \"../../tsconfigbase.test\",\n  \"include\": [\"src/*\", \"test/*\"],\n  \"references\": []\n}\n```\n\nFinally, create a folder called `test` in the `src` directory of the package being tested, and add tests using the file extension `.spec.ts`.\n","type":"Mdx","contentDigest":"6d7c2aadbcf037456719ae97b48e6b36","owner":"gatsby-plugin-mdx","counter":362},"frontmatter":{"title":"Contributing to frontend tests","description":"Contributing to frontend tests"},"exports":{},"rawBody":"---\ntitle: Contributing to frontend tests\ndescription: Contributing to frontend tests\n---\n\nexport const Title = () => (\n  <span>\n    Contributing to frontend tests\n  </span>\n);\n\n<PageDescription>\n\n\nElyra uses two types of frontend tests: integration tests (which use [cypress](https://docs.cypress.io/)) and unit tests (which use [jest](https://jestjs.io/docs/en/getting-started)). \n\n</PageDescription>\n\n## Integration tests\nBefore running integration tests, docker needs to be installed and running on your machine. There are two ways to run the integration tests: to only see the output logs from all of the integration tests, run `make test-integration` from the root directory. To debug tests that are going wrong or develop new tests, run `make test-integration-debug` - this will open an interactive tool for writing and debugging tests.\n\nElyra's integration tests automatically start JupyterLab and visit / interact with pages through cypress API calls. The tests use the cypress API to check for the existence of various buttons and visual elements. Refer to the [cypress API](https://docs.cypress.io/api/api/table-of-contents.html) for more details.\n\nNew integration tests can be added to `tests/integration`. \n\n## Unit tests\nTo run all of the unit tests, use `make test-ui-unit` from the root directory. To run the unit tests for a specific Elyra package, simply run `jest` from that package's directory (under `packages/`). For writing tests, `jest` has a watch mode option: just run `jest --watch`. \n\nElyra's unit tests test the various classes and objects used by Elyra extensions. Refer to the [jest API](https://jestjs.io/docs/en/getting-started) for more details. \n\nTo add unit tests for a package that doesn't have tests set up, some configuration files are required. In the directory for the package being tested, add a file titled `jest.config.js` that contains the following:\n```\nmodule.exports = require('../../testutils/jest.config');\n```\nThen, in the `package.json`, add the following under `'scripts'`:\n```\n\"test\": \"jest\",\n\"build:test\": \"tsc --build tsconfig.test.json\",\n```\nAnd the following under `'dev_dependencies'`:\n```\n\"@jupyterlab/testutils\": \"^1.0.0\",\n\"@types/enzyme\": \"^3.10.5\",\n\"@types/enzyme-adapter-react-16\": \"^1.0.6\",\n\"@types/jest\": \"^23.3.11\",\n\"enzyme\": \"^3.11.0\",\n\"enzyme-adapter-react-16\": \"^1.15.3\",\n\"install\": \"^0.13.0\",\n\"jest\": \"^24.7.1\",\n\"jest-raw-loader\": \"^1.0.1\",\n\"ts-jest\": \"^24.0.2\",\n```\nCreate a file `tsconfig.test.json` that contains:\n```\n{\n  \"extends\": \"../../tsconfigbase.test\",\n  \"include\": [\"src/*\", \"test/*\"],\n  \"references\": []\n}\n```\n\nFinally, create a folder called `test` in the `src` directory of the package being tested, and add tests using the file extension `.spec.ts`.\n","fileAbsolutePath":"/Users/dsobryan/Documents/ElyraOS/elyra-ai-site/src/pages/dev-guide/contributing-to-frontend-tests.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}