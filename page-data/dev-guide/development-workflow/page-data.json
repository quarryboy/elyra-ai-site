{"componentChunkName":"component---src-pages-dev-guide-development-workflow-mdx","path":"/dev-guide/development-workflow/","result":{"pageContext":{"frontmatter":{"title":"Development Workflow","description":"Development Workflow"},"relativePagePath":"/dev-guide/development-workflow.mdx","titleType":"page","MdxNode":{"id":"273f9f9e-0274-543d-9005-74ce96c3861b","children":[],"parent":"acd1776a-68ac-5394-816b-ea1b9564fd81","internal":{"content":"---\ntitle: Development Workflow\ndescription: Development Workflow\n---\n\nexport const Title = () => (\n  <span>\n    Development Workflow\n  </span>\n);\n\n<PageDescription>\n\nThis section describes the steps necessary to build Elyra in a development environment.\n\n</PageDescription>\n\n### Requirements\n\n* [Python 3 Miniconda](https://docs.conda.io/en/latest/miniconda.html)\n* [NodeJS 12+](https://nodejs.org/en/)\n* [Yarn](https://yarnpkg.com/lang/en/docs/install)\n\n## Setting up your development environment\n\n* Install Miniconda\nDownload and install a [Python 3 version of Miniconda](https://docs.conda.io/en/latest/miniconda.html) according to your Operating System\n\n* Create a new Python environment\n\n    ```\n    conda create -n <env-name> python\n    ```\n\n    The python version of your environment will match the miniconda version you installed. You can override the default by explicitly setting `python=3.7`, for example.\n\n* Activate the new environment\n\n    ```\n    conda activate <env-name>\n    ```\n\n* Verify your miniconda environment\n\n    ```\n    python --version\n    which python # Displays current python path\n    pip3 --version\n    which pip3\n    ```\n    Python path must be under miniconda envs folder.\n    Confirm pip3 location matches where miniconda is installed.\n\n* Install NodeJS\n\n    ```\n    conda install -y -c conda-forge/label/main nodejs\n    ```\n\n## Setting up your Elyra Github repository\n\n* Fork the [Elyra Github repository](https://github.com/elyra-ai/elyra) (if you haven't already)\n\n* Make a local copy of Elyra fork\n    ```\n    git clone https://github.com/<your-github-id>/elyra.git\n    cd elyra\n    ```\n* Set `upstream` as described in the [GitHub documentation](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/configuring-a-remote-for-a-fork)\n\n## Building\nElyra is divided in two parts, a collection of Jupyter Notebook backend extensions,\nand their respective JupyterLab UI extensions. Our JupyterLab extensions are located in our `packages`\ndirectory. \n\n### Build & Installation\n\nElyra uses `make` to automate some of the development workflow tasks.\n\nIssuing a `make` command with no task specified will provide a list of the currently supported tasks.\n\n```bash\n$ make\n\nclean                          Make a clean source tree and uninstall extensions\ncontainer-images               Build all container images\ndocs                           Build docs\ninstall-server                 Build and install backend only\ninstall                        Build and install\nlint                           Run linters\npublish-container-images       Publish all container images\nrelease                        Build wheel file for release\ntest                           Run all tests (backend, frontend and cypress integration tests)\nwatch                          Watch packages. For use alongside jupyter lab --watch\n```\n\nYou can build and install all Elyra packages with:\n\n```bash\nmake clean install\n```\n\nYou can check that the notebook server extension was successfully installed with:\n```bash\njupyter serverextension list\n```\n\nYou can check that the JupyterLab extension was successfully installed with:\n```bash\njupyter labextension list\n```\n<InlineNotification>\n\n**Note:** When switching between Elyra major versions, it is recommended to clean your JupyterLab environment before a build.\nThe `clean-jupyterlab` removes your JupyterLab packages and completely deletes your Jupyter workspace.\nMake sure to backup any important data in your environment before running the script.\n\n</InlineNotification>\n\nTo clean your environment and install the latest JupyterLab:\n`etc/scripts/clean-jupyterlab.sh`\nTo specify a JupyterLab version to be installed:\n`etc/scripts/clean-jupyterlab.sh --version 2.2.9`\n\n### Parallel Development with @elyra/pipeline-editor\n\nYou can install Elyra using a local build of @elyra/pipeline-editor with:\n```bash\nmake clean dev-link install\n```\n\n## Back-end Development\nAfter making code changes to the back-end, you can re-build Elyra's Python package with:\n\n```bash\nmake install-server\n```\n\nThis command builds and installs the updated  Python package independently, skipping any UI component build.\n\nRestart JupyterLab to pick up the new code changes.\n\n## Front-end Incremental Development\n\nElyra supports incremental development using `--watch`. This allows you to make code changes to\nfront-end packages and see them without running `make install` again.\n\nAfter installation run the following to watch for code changes and rebuild automatically:\n```bash\nmake watch\n```\n\nThen in a separate terminal, using the same Python environment, start JupyterLab in watch mode:\n```bash\njupyter lab --watch\n```\n\nWhen in watch mode JupyterLab will watch for changes in the build of each package and rebuild.\nTo see your changes just refresh JupyterLab in your browser.\n\n<InlineNotification>\n\n**Note:** JupyterLab watch mode will not pick up changes in package dependencies like `services`.\nSo when making changes to services you will need to stop and restart `jupyter lab --watch` and\nnot just refresh your browser.\n\n</InlineNotification>\n\n## Building the Elyra Container Image\n\nElyra's container image can be built using:\n\n```bash\nmake elyra-image\n```\n\nBy default, the command above will build a container image from the tip of the repository master branch.\n\nIn order to build from a particular release, you can pass a `TAG` parameter to the make command as below:\n\n```bash\nmake elyra-image TAG=2.2.1\n```\n\nOfficial container images are published on [Docker Hub](https://hub.docker.com/r/elyra/elyra/tags)\nand [quay.io](https://quay.io/repository/elyra/elyra?tab=tags).\n","type":"Mdx","contentDigest":"dea02f32c2bc0cd7526ae890de559f61","owner":"gatsby-plugin-mdx","counter":364},"frontmatter":{"title":"Development Workflow","description":"Development Workflow"},"exports":{},"rawBody":"---\ntitle: Development Workflow\ndescription: Development Workflow\n---\n\nexport const Title = () => (\n  <span>\n    Development Workflow\n  </span>\n);\n\n<PageDescription>\n\nThis section describes the steps necessary to build Elyra in a development environment.\n\n</PageDescription>\n\n### Requirements\n\n* [Python 3 Miniconda](https://docs.conda.io/en/latest/miniconda.html)\n* [NodeJS 12+](https://nodejs.org/en/)\n* [Yarn](https://yarnpkg.com/lang/en/docs/install)\n\n## Setting up your development environment\n\n* Install Miniconda\nDownload and install a [Python 3 version of Miniconda](https://docs.conda.io/en/latest/miniconda.html) according to your Operating System\n\n* Create a new Python environment\n\n    ```\n    conda create -n <env-name> python\n    ```\n\n    The python version of your environment will match the miniconda version you installed. You can override the default by explicitly setting `python=3.7`, for example.\n\n* Activate the new environment\n\n    ```\n    conda activate <env-name>\n    ```\n\n* Verify your miniconda environment\n\n    ```\n    python --version\n    which python # Displays current python path\n    pip3 --version\n    which pip3\n    ```\n    Python path must be under miniconda envs folder.\n    Confirm pip3 location matches where miniconda is installed.\n\n* Install NodeJS\n\n    ```\n    conda install -y -c conda-forge/label/main nodejs\n    ```\n\n## Setting up your Elyra Github repository\n\n* Fork the [Elyra Github repository](https://github.com/elyra-ai/elyra) (if you haven't already)\n\n* Make a local copy of Elyra fork\n    ```\n    git clone https://github.com/<your-github-id>/elyra.git\n    cd elyra\n    ```\n* Set `upstream` as described in the [GitHub documentation](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/configuring-a-remote-for-a-fork)\n\n## Building\nElyra is divided in two parts, a collection of Jupyter Notebook backend extensions,\nand their respective JupyterLab UI extensions. Our JupyterLab extensions are located in our `packages`\ndirectory. \n\n### Build & Installation\n\nElyra uses `make` to automate some of the development workflow tasks.\n\nIssuing a `make` command with no task specified will provide a list of the currently supported tasks.\n\n```bash\n$ make\n\nclean                          Make a clean source tree and uninstall extensions\ncontainer-images               Build all container images\ndocs                           Build docs\ninstall-server                 Build and install backend only\ninstall                        Build and install\nlint                           Run linters\npublish-container-images       Publish all container images\nrelease                        Build wheel file for release\ntest                           Run all tests (backend, frontend and cypress integration tests)\nwatch                          Watch packages. For use alongside jupyter lab --watch\n```\n\nYou can build and install all Elyra packages with:\n\n```bash\nmake clean install\n```\n\nYou can check that the notebook server extension was successfully installed with:\n```bash\njupyter serverextension list\n```\n\nYou can check that the JupyterLab extension was successfully installed with:\n```bash\njupyter labextension list\n```\n<InlineNotification>\n\n**Note:** When switching between Elyra major versions, it is recommended to clean your JupyterLab environment before a build.\nThe `clean-jupyterlab` removes your JupyterLab packages and completely deletes your Jupyter workspace.\nMake sure to backup any important data in your environment before running the script.\n\n</InlineNotification>\n\nTo clean your environment and install the latest JupyterLab:\n`etc/scripts/clean-jupyterlab.sh`\nTo specify a JupyterLab version to be installed:\n`etc/scripts/clean-jupyterlab.sh --version 2.2.9`\n\n### Parallel Development with @elyra/pipeline-editor\n\nYou can install Elyra using a local build of @elyra/pipeline-editor with:\n```bash\nmake clean dev-link install\n```\n\n## Back-end Development\nAfter making code changes to the back-end, you can re-build Elyra's Python package with:\n\n```bash\nmake install-server\n```\n\nThis command builds and installs the updated  Python package independently, skipping any UI component build.\n\nRestart JupyterLab to pick up the new code changes.\n\n## Front-end Incremental Development\n\nElyra supports incremental development using `--watch`. This allows you to make code changes to\nfront-end packages and see them without running `make install` again.\n\nAfter installation run the following to watch for code changes and rebuild automatically:\n```bash\nmake watch\n```\n\nThen in a separate terminal, using the same Python environment, start JupyterLab in watch mode:\n```bash\njupyter lab --watch\n```\n\nWhen in watch mode JupyterLab will watch for changes in the build of each package and rebuild.\nTo see your changes just refresh JupyterLab in your browser.\n\n<InlineNotification>\n\n**Note:** JupyterLab watch mode will not pick up changes in package dependencies like `services`.\nSo when making changes to services you will need to stop and restart `jupyter lab --watch` and\nnot just refresh your browser.\n\n</InlineNotification>\n\n## Building the Elyra Container Image\n\nElyra's container image can be built using:\n\n```bash\nmake elyra-image\n```\n\nBy default, the command above will build a container image from the tip of the repository master branch.\n\nIn order to build from a particular release, you can pass a `TAG` parameter to the make command as below:\n\n```bash\nmake elyra-image TAG=2.2.1\n```\n\nOfficial container images are published on [Docker Hub](https://hub.docker.com/r/elyra/elyra/tags)\nand [quay.io](https://quay.io/repository/elyra/elyra?tab=tags).\n","fileAbsolutePath":"/Users/dsobryan/Documents/ElyraOS/elyra-ai-site/src/pages/dev-guide/development-workflow.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}