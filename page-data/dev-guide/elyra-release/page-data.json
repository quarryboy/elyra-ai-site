{"componentChunkName":"component---src-pages-dev-guide-elyra-release-mdx","path":"/dev-guide/elyra-release/","result":{"pageContext":{"frontmatter":{"title":"Elyra release","description":"Elyra release"},"relativePagePath":"/dev-guide/elyra-release.mdx","titleType":"page","MdxNode":{"id":"52f6a183-7f8a-59a2-8063-b55272c438fb","children":[],"parent":"ff2d6d3e-28d8-58e3-9ae3-f90f5763f7e4","internal":{"content":"---\ntitle:  Elyra release\ndescription:  Elyra release\n---\n\nexport const Title = () => (\n  <span>\n     Elyra release\n  </span>\n);\n\n\n## Before you begin\n\nElyra depends on a few different packages that are under the control of the Elyra community and used\nmostly to abstract integration with other runtimes and components.\n\nCurrently, these packages are:\n\n- [pipeline-editor](https://github.com/elyra-ai/pipeline-editor)\n- [canvas](https://github.com/elyra-ai/canvas)\n\nBefore you begin creating a new Elyra release, verify if there is a need to release any of these packages, and if\nnecessary, update Elyra to use the new release.\n\n## Elyra release process overview\n\nBuilding an Elyra release consists of the following steps:\n\n- Updating the [changelog.md](../getting_started/changelog.md) with the list of changes added to the release\n- Building the Elyra python package.\n- Building Elyra JupyterLab extensions as npm packages.\n- Generate and build the modified packages to enable single-extension deployment.\n- Build and publish multiple docker images\n\nMost of the steps required to prepare and publish a release have been automated through the `create-release.sh` script,\nwhich exposes three goals:\n\n- The `prepare-changelog` goal traverse the recent commits to update the changelog.md for a given release.\n\n```bash\ncreate release prepare-changelog --version 2.3.0\n```\n\n- The `prepare` goal create the release artifacts and make them available locally for validation.\n\n```bash\ncreate release prepare --version 2.3.0 --dev-version 2.4.0\n```\n\n-- The 'publish' goal get a previous prepared release and publish the artifacts to respective repositories.\n\n```bash\ncreate release publish --version 2.3.0\n```\n\n### Creating minor/patch releases from branches\n\nIn the case of creating minor/patch releases from a branch, one will need to modify the release script so that it\nperform a checkout of the `given branch` after cloning the Elyra repository:\n\nUpdate the `checkout_code` function in the create-release script and add the following at the end of that function:\n```\ncheck_run(['git', 'checkout', '<BRANCH NAME>'], cwd=config.source_dir)\ncheck_run(['git', 'status'], cwd=config.source_dir)\n```\n\n## Preparing Elyra release\n\n### Generate the release changelog\n```bash\ncreate release prepare-changelog --version 2.3.0\n```\n- The updated changelog will then be available at `./build/release/elyra` as a git commit\n  - The release manager should make any necessary adjustments and/or updates before 'pushing the changelog commit'. \n  - Note that the release manage could also push the change log as a new pull request to gather inputs from the community.\n\n## Prepare the release artifacts\n```bash\ncreate-release.py prepare --version 2.0.0 --dev-version 2.1.0 [--rc 0][--beta 0]\n```\n- The artifacts for the new release will then be available at `./build/release/`\n  - The Elyra folder is the main release\n  - The other folders, are the individual extensions packaged as standalone packages\n```bash\nelyra\nelyra-code-snippet-extension\nelyra-pipeline-editor-extension\nelyra-python-editor-extension\nelyra-r-editor-extension\n```\n- Test the release\n  - Run multiple scenarios, to make sure each extension is working ok\n  - Run the covid-notebook scenario\n  - Run the NOAA sample\n\n### Publish the release\n```bash\ncreate-release.py publish --version 2.0.0 [--rc 0] [--beta 0]\n```\n- Build and publish container images based on release tag\n```bash\ngit pull --rebase\ngit checkout tags/v2.0.0\nmake container-images publish-container-images\n```  \n\n- Update dev and latest image tags based on release tag\n```bash\ndocker tag elyra/elyra:2.0.0 elyra/elyra:dev && docker push elyra/elyra:dev\ndocker tag elyra/elyra:2.0.0 elyra/elyra:latest && docker push elyra/elyra:latest\ndocker tag quay.io/elyra/elyra:2.0.0 quay.io/elyra/elyra:dev && docker push quay.io/elyra/elyra:dev\ndocker tag quay.io/elyra/elyra:2.0.0 quay.io/elyra/elyra:latest && docker push quay.io/elyra/elyra:latest\n\ndocker tag elyra/airflow:2.0.0 elyra/airflow:dev && docker push elyra/airflow:dev\ndocker tag elyra/airflow:2.0.0 elyra/airflow:latest && docker push elyra/airflow:latest\ndocker tag quay.io/elyra/airflow:2.0.0 quay.io/elyra/airflow:dev && docker push quay.io/elyra/airflow:dev\ndocker tag quay.io/elyra/airflow:2.0.0 quay.io/elyra/airflow:latest && docker push quay.io/elyra/airflow:latest\n\ndocker tag elyra/kf-notebook:2.0.0 elyra/kf-notebook:dev && docker push elyra/kf-notebook:dev\ndocker tag elyra/kf-notebook:2.0.0 elyra/kf-notebook:latest && docker push elyra/kf-notebook:latest\ndocker tag quay.io/elyra/kf-notebook:2.0.0 quay.io/elyra/kf-notebook:dev && docker push quay.io/elyra/kf-notebook:dev\ndocker tag quay.io/elyra/kf-notebook:2.0.0 quay.io/elyra/kf-notebook:latest && docker push quay.io/elyra/kf-notebook:latest\n```\n\n- Merge changes for conda-forge\n  - https://github.com/conda-forge/elyra-feedstock/pulls\n  - https://github.com/conda-forge/elyra-server-feedstock/pulls\n  - https://github.com/conda-forge/elyra-code-snippet-extension-feedstock/pulls\n  - https://github.com/conda-forge/elyra-pipeline-editor-extension-feedstock/pulls\n  - https://github.com/conda-forge/elyra-python-editor-extension-feedstock/pulls\n  - https://github.com/conda-forge/elyra-r-editor-extension-feedstock/pulls\n","type":"Mdx","contentDigest":"718ca8d57f47fad82baf6815ca4eaddc","owner":"gatsby-plugin-mdx","counter":365},"frontmatter":{"title":"Elyra release","description":"Elyra release"},"exports":{},"rawBody":"---\ntitle:  Elyra release\ndescription:  Elyra release\n---\n\nexport const Title = () => (\n  <span>\n     Elyra release\n  </span>\n);\n\n\n## Before you begin\n\nElyra depends on a few different packages that are under the control of the Elyra community and used\nmostly to abstract integration with other runtimes and components.\n\nCurrently, these packages are:\n\n- [pipeline-editor](https://github.com/elyra-ai/pipeline-editor)\n- [canvas](https://github.com/elyra-ai/canvas)\n\nBefore you begin creating a new Elyra release, verify if there is a need to release any of these packages, and if\nnecessary, update Elyra to use the new release.\n\n## Elyra release process overview\n\nBuilding an Elyra release consists of the following steps:\n\n- Updating the [changelog.md](../getting_started/changelog.md) with the list of changes added to the release\n- Building the Elyra python package.\n- Building Elyra JupyterLab extensions as npm packages.\n- Generate and build the modified packages to enable single-extension deployment.\n- Build and publish multiple docker images\n\nMost of the steps required to prepare and publish a release have been automated through the `create-release.sh` script,\nwhich exposes three goals:\n\n- The `prepare-changelog` goal traverse the recent commits to update the changelog.md for a given release.\n\n```bash\ncreate release prepare-changelog --version 2.3.0\n```\n\n- The `prepare` goal create the release artifacts and make them available locally for validation.\n\n```bash\ncreate release prepare --version 2.3.0 --dev-version 2.4.0\n```\n\n-- The 'publish' goal get a previous prepared release and publish the artifacts to respective repositories.\n\n```bash\ncreate release publish --version 2.3.0\n```\n\n### Creating minor/patch releases from branches\n\nIn the case of creating minor/patch releases from a branch, one will need to modify the release script so that it\nperform a checkout of the `given branch` after cloning the Elyra repository:\n\nUpdate the `checkout_code` function in the create-release script and add the following at the end of that function:\n```\ncheck_run(['git', 'checkout', '<BRANCH NAME>'], cwd=config.source_dir)\ncheck_run(['git', 'status'], cwd=config.source_dir)\n```\n\n## Preparing Elyra release\n\n### Generate the release changelog\n```bash\ncreate release prepare-changelog --version 2.3.0\n```\n- The updated changelog will then be available at `./build/release/elyra` as a git commit\n  - The release manager should make any necessary adjustments and/or updates before 'pushing the changelog commit'. \n  - Note that the release manage could also push the change log as a new pull request to gather inputs from the community.\n\n## Prepare the release artifacts\n```bash\ncreate-release.py prepare --version 2.0.0 --dev-version 2.1.0 [--rc 0][--beta 0]\n```\n- The artifacts for the new release will then be available at `./build/release/`\n  - The Elyra folder is the main release\n  - The other folders, are the individual extensions packaged as standalone packages\n```bash\nelyra\nelyra-code-snippet-extension\nelyra-pipeline-editor-extension\nelyra-python-editor-extension\nelyra-r-editor-extension\n```\n- Test the release\n  - Run multiple scenarios, to make sure each extension is working ok\n  - Run the covid-notebook scenario\n  - Run the NOAA sample\n\n### Publish the release\n```bash\ncreate-release.py publish --version 2.0.0 [--rc 0] [--beta 0]\n```\n- Build and publish container images based on release tag\n```bash\ngit pull --rebase\ngit checkout tags/v2.0.0\nmake container-images publish-container-images\n```  \n\n- Update dev and latest image tags based on release tag\n```bash\ndocker tag elyra/elyra:2.0.0 elyra/elyra:dev && docker push elyra/elyra:dev\ndocker tag elyra/elyra:2.0.0 elyra/elyra:latest && docker push elyra/elyra:latest\ndocker tag quay.io/elyra/elyra:2.0.0 quay.io/elyra/elyra:dev && docker push quay.io/elyra/elyra:dev\ndocker tag quay.io/elyra/elyra:2.0.0 quay.io/elyra/elyra:latest && docker push quay.io/elyra/elyra:latest\n\ndocker tag elyra/airflow:2.0.0 elyra/airflow:dev && docker push elyra/airflow:dev\ndocker tag elyra/airflow:2.0.0 elyra/airflow:latest && docker push elyra/airflow:latest\ndocker tag quay.io/elyra/airflow:2.0.0 quay.io/elyra/airflow:dev && docker push quay.io/elyra/airflow:dev\ndocker tag quay.io/elyra/airflow:2.0.0 quay.io/elyra/airflow:latest && docker push quay.io/elyra/airflow:latest\n\ndocker tag elyra/kf-notebook:2.0.0 elyra/kf-notebook:dev && docker push elyra/kf-notebook:dev\ndocker tag elyra/kf-notebook:2.0.0 elyra/kf-notebook:latest && docker push elyra/kf-notebook:latest\ndocker tag quay.io/elyra/kf-notebook:2.0.0 quay.io/elyra/kf-notebook:dev && docker push quay.io/elyra/kf-notebook:dev\ndocker tag quay.io/elyra/kf-notebook:2.0.0 quay.io/elyra/kf-notebook:latest && docker push quay.io/elyra/kf-notebook:latest\n```\n\n- Merge changes for conda-forge\n  - https://github.com/conda-forge/elyra-feedstock/pulls\n  - https://github.com/conda-forge/elyra-server-feedstock/pulls\n  - https://github.com/conda-forge/elyra-code-snippet-extension-feedstock/pulls\n  - https://github.com/conda-forge/elyra-pipeline-editor-extension-feedstock/pulls\n  - https://github.com/conda-forge/elyra-python-editor-extension-feedstock/pulls\n  - https://github.com/conda-forge/elyra-r-editor-extension-feedstock/pulls\n","fileAbsolutePath":"/Users/dsobryan/Documents/ElyraOS/elyra-ai-site/src/pages/dev-guide/elyra-release.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}