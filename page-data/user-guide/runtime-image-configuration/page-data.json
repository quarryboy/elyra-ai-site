{"componentChunkName":"component---src-pages-user-guide-runtime-image-configuration-mdx","path":"/user-guide/runtime-image-configuration/","result":{"pageContext":{"frontmatter":{"title":"Runtime image configuration","description":"Runtime image configuration"},"relativePagePath":"/user-guide/runtime-image-configuration.mdx","titleType":"page","MdxNode":{"id":"15acc880-3cc8-507b-a64c-31eef78b5570","children":[],"parent":"c1747e6a-4a21-52a4-af49-417d2bd9eeab","internal":{"content":"---\ntitle: Runtime image configuration\ndescription: Runtime image configuration\n---\n\nexport const Title = () => (\n  <span>\n    Runtime image configuration\n  </span>\n);\n\n<PageDescription>\n\nA runtime image configuration identifies a container image that Elyra can utilize to run Jupyter notebooks or scripts on a container platform, such as Kubernetes.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Prerequisites</AnchorLink>\n  <AnchorLink>Managing runtime configurations using the JupyterLab UI</AnchorLink>\n  <AnchorLink>Managing runtime image configurations using the Elyra CLI</AnchorLink>\n  <AnchorLink>Configuration properties</AnchorLink>\n</AnchorLinks>\n\n## Prerequisites\n\nA runtime image configuration is associated with a container image that must meet these prerequisites:\n\n- The image is stored in a container registry in a public or private network that the container platform in which the pipeline is executed can connect to. Examples of such registries are [hub.docker.com](https://hub.docker.com) or a self-managed registry in an intranet environment.\n- The image can be pulled from the registry without the need to authenticate.\n- The image must have a current `Python 3` version pre-installed and in the search path.\n- The image must have `curl` pre-installed and in the search path.\n\nRefer to [Creating a custom runtime container image](/recipes/creating-a-custom-runtime-image.md) for details.\n\nYou can manage runtime image configurations using the [JupyterLab UI](#managing-runtime-configurations-using-the-jupyterlab-ui) or the [Elyra CLI](#managing-runtime-image-configurations-using-the-elyra-cli).\n\n## Managing runtime image configurations using the JupyterLab UI\n\nRuntime image configurations can be added, modified, and removed in the _Runtime Images_ panel.\n\n![Runtime Images UI](../images/ai/runtime-images-ui.png)\n\nTo access the panel in JupyterLab:\n\n- Click the `Open Runtime Images` button in the pipeline editor toolbar.\n\n  ![Open panel from pipeline editor toolbar](../images/ai/toolbar-manage-images-button.png)     \n\n  OR     \n\n- Select the `Runtime Images` panel from the JupyterLab sidebar.\n\n  ![Open panel from sidebar](../images/ai/sidebar-manage-images-button.png)     \n\n  OR\n\n- Open the JupyterLab command palette (`Cmd/Ctrl + Shift + C`) and search for `Manage Runtime Images`.\n\n  ![Open panel from command palette](../images/ai/cmd-palette-manage-images.png)\n\n### Adding a runtime image configuration\n\nTo add a runtime image configuration:\n\n- Click `+` to add a runtime image.\n- Add the runtime image properties as appropriate.\n\n### Modifying a runtime image configuration\n\nTo edit a runtime image configuration:\n\n- Click the `edit` icon next to the runtime image name.\n- Modify the runtime image properties as desired.\n\n### Deleting a runtime image configuration\n\nTo delete a runtime image configuration:\n\n- Click the `delete` icon next to the runtime image name.\n- Confirm deletion.\n\n## Managing runtime image configurations using the Elyra CLI\n\nRuntime image configurations can be added, replaced, and removed with the `elyra-metadata` command line interface.\n\nTo list runtime image configurations:\n\n```bash\n$ elyra-metadata list runtime-images\n\nAvailable metadata instances for runtime-images (includes invalid):\n\nSchema          Instance               Resource                                                                                                       \n------          --------               --------                                                                                                       \nruntime-image   anaconda               /Users/jdoe/.../jupyter/metadata/runtime-images/anaconda.json\n...  \n```\n\n### Adding a runtime configuration\n\nTo add a runtime image configuration for the public `jdoe/my-image:1.0.0` container image:\n\n```bash\n$ elyra-metadata install runtime-images --schema_name=runtime-image \\\n       --name=\"my_image_name\" \\\n       --display_name=\"My runtime image\" \\\n       --description=\"My custom runtime container image\" \\\n       --image_name=\"jdoe/my-image:1.0.0\"\n```\n\n### Modifying a runtime configuration\n\nTo replace a runtime image configuration append the `--replace` option:\n\n```bash\n$ elyra-metadata install runtime-images --schema_name=runtime-image \\\n       --name=\"my_image_name\" \\\n       --display_name=\"My runtime image\" \\\n       --description=\"My other custom runtime container image\" \\\n       --image_name=\"jdoe/my-other-image:1.0.1\" \\\n       --replace\n```\n\n### Deleting a runtime configuration\n\nTo delete a runtime image configuration:\n\n```bash\n$ elyra-metadata remove runtime-images \\\n       --name=\"my_image_name\"\n```\n\n## Configuration properties\n\nThe runtime image configuration properties are defined as follows. The string in the headings below, which is enclosed in parentheses, denotes the CLI option name.\n\n#### Name (display_name)\n\nA user-friendly name for runtime image configuration. This property is required.\n\nExample: `My runtime image`\n\n#### Description (description)\n\nDescription for this runtime image configuration.\n\nExample: `My custom runtime container image`\n\n\n#### Image Name (image_name)\n\nThe name and tag of an existing container image in a public container registry that meets the stated prerequisites. This property is required.\n\nExample:\n\n- `jdoe/my-image:1.0.0`\n\nProviding only `owner/image:tag` uses default registry: Docker Hub registry\n\nIn general for other public container registries, the URL shall contain also `registry`, therefore the complete URL to be used in this case is: `registry/owner/image:tag`\n\nExample:\n\n- `quay.io/jdoe/my-image:1.0.0`\n\n#### Image Pull Policy (pull_policy)\n\nThis field will be the pull policy of the image when the image is selected to be part of the pipeline. This field\nis optional and not required to run a pipeline. If not selected, the behavior will [default](https://kubernetes.io/docs/concepts/containers/images/#updating-images) to that of the kubernetes \ncluster. The three options are : `Always` `IfNotPresent` `Never`\n\nExample:\n\n- `IfNotPresent`\n\nThis example will tell the kubelet to only pull the image if it does not exist. \n\n#### N/A (name)\n\nA unique internal identifier for the runtime image configuration. The property is required when the command line interface is used manage a configuration. An identifier is automatically generated from the user-friendly name when a configuration is added using the UI.\n\nExample: `my_runtime_image`\n","type":"Mdx","contentDigest":"fae6c63a3bd937e116e8bcacd4d584cb","owner":"gatsby-plugin-mdx","counter":334},"frontmatter":{"title":"Runtime image configuration","description":"Runtime image configuration"},"exports":{},"rawBody":"---\ntitle: Runtime image configuration\ndescription: Runtime image configuration\n---\n\nexport const Title = () => (\n  <span>\n    Runtime image configuration\n  </span>\n);\n\n<PageDescription>\n\nA runtime image configuration identifies a container image that Elyra can utilize to run Jupyter notebooks or scripts on a container platform, such as Kubernetes.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Prerequisites</AnchorLink>\n  <AnchorLink>Managing runtime configurations using the JupyterLab UI</AnchorLink>\n  <AnchorLink>Managing runtime image configurations using the Elyra CLI</AnchorLink>\n  <AnchorLink>Configuration properties</AnchorLink>\n</AnchorLinks>\n\n## Prerequisites\n\nA runtime image configuration is associated with a container image that must meet these prerequisites:\n\n- The image is stored in a container registry in a public or private network that the container platform in which the pipeline is executed can connect to. Examples of such registries are [hub.docker.com](https://hub.docker.com) or a self-managed registry in an intranet environment.\n- The image can be pulled from the registry without the need to authenticate.\n- The image must have a current `Python 3` version pre-installed and in the search path.\n- The image must have `curl` pre-installed and in the search path.\n\nRefer to [Creating a custom runtime container image](/recipes/creating-a-custom-runtime-image.md) for details.\n\nYou can manage runtime image configurations using the [JupyterLab UI](#managing-runtime-configurations-using-the-jupyterlab-ui) or the [Elyra CLI](#managing-runtime-image-configurations-using-the-elyra-cli).\n\n## Managing runtime image configurations using the JupyterLab UI\n\nRuntime image configurations can be added, modified, and removed in the _Runtime Images_ panel.\n\n![Runtime Images UI](../images/ai/runtime-images-ui.png)\n\nTo access the panel in JupyterLab:\n\n- Click the `Open Runtime Images` button in the pipeline editor toolbar.\n\n  ![Open panel from pipeline editor toolbar](../images/ai/toolbar-manage-images-button.png)     \n\n  OR     \n\n- Select the `Runtime Images` panel from the JupyterLab sidebar.\n\n  ![Open panel from sidebar](../images/ai/sidebar-manage-images-button.png)     \n\n  OR\n\n- Open the JupyterLab command palette (`Cmd/Ctrl + Shift + C`) and search for `Manage Runtime Images`.\n\n  ![Open panel from command palette](../images/ai/cmd-palette-manage-images.png)\n\n### Adding a runtime image configuration\n\nTo add a runtime image configuration:\n\n- Click `+` to add a runtime image.\n- Add the runtime image properties as appropriate.\n\n### Modifying a runtime image configuration\n\nTo edit a runtime image configuration:\n\n- Click the `edit` icon next to the runtime image name.\n- Modify the runtime image properties as desired.\n\n### Deleting a runtime image configuration\n\nTo delete a runtime image configuration:\n\n- Click the `delete` icon next to the runtime image name.\n- Confirm deletion.\n\n## Managing runtime image configurations using the Elyra CLI\n\nRuntime image configurations can be added, replaced, and removed with the `elyra-metadata` command line interface.\n\nTo list runtime image configurations:\n\n```bash\n$ elyra-metadata list runtime-images\n\nAvailable metadata instances for runtime-images (includes invalid):\n\nSchema          Instance               Resource                                                                                                       \n------          --------               --------                                                                                                       \nruntime-image   anaconda               /Users/jdoe/.../jupyter/metadata/runtime-images/anaconda.json\n...  \n```\n\n### Adding a runtime configuration\n\nTo add a runtime image configuration for the public `jdoe/my-image:1.0.0` container image:\n\n```bash\n$ elyra-metadata install runtime-images --schema_name=runtime-image \\\n       --name=\"my_image_name\" \\\n       --display_name=\"My runtime image\" \\\n       --description=\"My custom runtime container image\" \\\n       --image_name=\"jdoe/my-image:1.0.0\"\n```\n\n### Modifying a runtime configuration\n\nTo replace a runtime image configuration append the `--replace` option:\n\n```bash\n$ elyra-metadata install runtime-images --schema_name=runtime-image \\\n       --name=\"my_image_name\" \\\n       --display_name=\"My runtime image\" \\\n       --description=\"My other custom runtime container image\" \\\n       --image_name=\"jdoe/my-other-image:1.0.1\" \\\n       --replace\n```\n\n### Deleting a runtime configuration\n\nTo delete a runtime image configuration:\n\n```bash\n$ elyra-metadata remove runtime-images \\\n       --name=\"my_image_name\"\n```\n\n## Configuration properties\n\nThe runtime image configuration properties are defined as follows. The string in the headings below, which is enclosed in parentheses, denotes the CLI option name.\n\n#### Name (display_name)\n\nA user-friendly name for runtime image configuration. This property is required.\n\nExample: `My runtime image`\n\n#### Description (description)\n\nDescription for this runtime image configuration.\n\nExample: `My custom runtime container image`\n\n\n#### Image Name (image_name)\n\nThe name and tag of an existing container image in a public container registry that meets the stated prerequisites. This property is required.\n\nExample:\n\n- `jdoe/my-image:1.0.0`\n\nProviding only `owner/image:tag` uses default registry: Docker Hub registry\n\nIn general for other public container registries, the URL shall contain also `registry`, therefore the complete URL to be used in this case is: `registry/owner/image:tag`\n\nExample:\n\n- `quay.io/jdoe/my-image:1.0.0`\n\n#### Image Pull Policy (pull_policy)\n\nThis field will be the pull policy of the image when the image is selected to be part of the pipeline. This field\nis optional and not required to run a pipeline. If not selected, the behavior will [default](https://kubernetes.io/docs/concepts/containers/images/#updating-images) to that of the kubernetes \ncluster. The three options are : `Always` `IfNotPresent` `Never`\n\nExample:\n\n- `IfNotPresent`\n\nThis example will tell the kubelet to only pull the image if it does not exist. \n\n#### N/A (name)\n\nA unique internal identifier for the runtime image configuration. The property is required when the command line interface is used manage a configuration. An identifier is automatically generated from the user-friendly name when a configuration is added using the UI.\n\nExample: `my_runtime_image`\n","fileAbsolutePath":"/Users/dsobryan/Documents/ElyraOS/elyra-ai-site/src/pages/user-guide/runtime-image-configuration.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}