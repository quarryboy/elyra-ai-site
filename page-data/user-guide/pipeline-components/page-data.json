{"componentChunkName":"component---src-pages-user-guide-pipeline-components-mdx","path":"/user-guide/pipeline-components/","result":{"pageContext":{"frontmatter":{"title":"Pipelines components","description":"Pipeline components"},"relativePagePath":"/user-guide/pipeline-components.mdx","titleType":"page","MdxNode":{"id":"b2eea3cb-08d9-5c5b-bdd6-7842ba30adfb","children":[],"parent":"8a2e659f-5b1e-55c0-a5b6-cfd88bab8e2a","internal":{"content":"---\ntitle: Pipelines components\ndescription: Pipeline components\n---\n\nexport const Title = () => (\n  <span>\n    Pipelines components\n  </span>\n);\n\n<PageDescription>\n\n[Pipelines](pipelines.md) comprise of nodes that are implemented using components. A component typically only implements one unit-of-work, such as loading data, transforming data, training a model, or deploying a model to serve. The following depicts a basic pipeline in the Visual Pipeline Editor, which utilizes components to load a data file, split the file, truncates the resulting files, and counts the number of records in each file.\n\n</PageDescription>\n\n![A basic Kubeflow pipeline](../images/ai/kubeflow-pipeline.png)\n\nThe same pipeline could be implemented using a single component that performs all these tasks, but that component might not be as universally re-usable. Consider, for example, that for another project the data resides in a different kind of storage. With fine-granular components you'd only have to replace the load data component with one that supports the other storage type and could retain everything else. \n\nElyra includes three _generic components_ that allow for the processing of: Jupyter notebooks, Python scripts, and R scripts. These components are called generic because they can be used in all runtime environments that Elyra pipelines currently support: local/JupyterLab, Kubeflow Pipelines, and Apache Airflow.\n\n![Generic components in the palette](../images/ai/generic-components-in-palette.png)\n\nNote: Refer to the [_Best practices_ topic in the _User Guide_](best-practices-file-based-nodes.md) to learn more about special considerations for generic components.\n\n_Custom components_ are commonly only implemented for Kubeflow Pipelines or Apache Airflow, but not both.\n\n![Kubeflow components in the palette](../images/ai/custom-kubeflow-components-in-palette.png)\n\nThere are many example custom components available that you can utilize in pipelines, but you can also create your own. Details on how to create a component can be found in the [Kubeflow Pipelines documentation](https://www.kubeflow.org/docs/components/pipelines/sdk/component-development/) and the [Apache Airflow documentation](https://airflow.apache.org/docs/apache-airflow/stable/concepts/operators.html). Do note that in Apache Airflow components are called operators, but for the sake of consistency the Elyra documentation refers to them as components.\n\n#### Example custom components\n\nFor illustrative purposes the Elyra component registry includes a few custom components that you can use to get started. \n\n![Example pipeline for the HTTP component](../images/ai/example-components-pipeline.png)\n\nComponent details and demo pipelines can be found in the `https://github.com/elyra-ai/examples` repository:\n- [Kubeflow Pipeline components](https://github.com/elyra-ai/examples/tree/master/pipelines/kubeflow_pipelines_component_examples)\n- [Apache Airflow components](https://github.com/elyra-ai/examples/tree/master/pipelines/airflow_component_examples)\n\nNote that example components are provided as is. Unless indicated otherwise they are not maintained by the Elyra community.\n\n### Managing custom components\n\nIn this release Elyra utilizes an internal registry to store information about custom components that you can use in the Visual Pipeline Editor to create pipelines.\n\n#### Adding a component to the registry\n\nThis feature is currently not available.\n\n#### Modifying a component\n\nThis feature is currently not available.\n\n#### Deleting a component from the registry\n\nThis feature is currently not available.\n","type":"Mdx","contentDigest":"8b249caa7d106a334f83e7423cc19a0d","owner":"gatsby-plugin-mdx","counter":330},"frontmatter":{"title":"Pipelines components","description":"Pipeline components"},"exports":{},"rawBody":"---\ntitle: Pipelines components\ndescription: Pipeline components\n---\n\nexport const Title = () => (\n  <span>\n    Pipelines components\n  </span>\n);\n\n<PageDescription>\n\n[Pipelines](pipelines.md) comprise of nodes that are implemented using components. A component typically only implements one unit-of-work, such as loading data, transforming data, training a model, or deploying a model to serve. The following depicts a basic pipeline in the Visual Pipeline Editor, which utilizes components to load a data file, split the file, truncates the resulting files, and counts the number of records in each file.\n\n</PageDescription>\n\n![A basic Kubeflow pipeline](../images/ai/kubeflow-pipeline.png)\n\nThe same pipeline could be implemented using a single component that performs all these tasks, but that component might not be as universally re-usable. Consider, for example, that for another project the data resides in a different kind of storage. With fine-granular components you'd only have to replace the load data component with one that supports the other storage type and could retain everything else. \n\nElyra includes three _generic components_ that allow for the processing of: Jupyter notebooks, Python scripts, and R scripts. These components are called generic because they can be used in all runtime environments that Elyra pipelines currently support: local/JupyterLab, Kubeflow Pipelines, and Apache Airflow.\n\n![Generic components in the palette](../images/ai/generic-components-in-palette.png)\n\nNote: Refer to the [_Best practices_ topic in the _User Guide_](best-practices-file-based-nodes.md) to learn more about special considerations for generic components.\n\n_Custom components_ are commonly only implemented for Kubeflow Pipelines or Apache Airflow, but not both.\n\n![Kubeflow components in the palette](../images/ai/custom-kubeflow-components-in-palette.png)\n\nThere are many example custom components available that you can utilize in pipelines, but you can also create your own. Details on how to create a component can be found in the [Kubeflow Pipelines documentation](https://www.kubeflow.org/docs/components/pipelines/sdk/component-development/) and the [Apache Airflow documentation](https://airflow.apache.org/docs/apache-airflow/stable/concepts/operators.html). Do note that in Apache Airflow components are called operators, but for the sake of consistency the Elyra documentation refers to them as components.\n\n#### Example custom components\n\nFor illustrative purposes the Elyra component registry includes a few custom components that you can use to get started. \n\n![Example pipeline for the HTTP component](../images/ai/example-components-pipeline.png)\n\nComponent details and demo pipelines can be found in the `https://github.com/elyra-ai/examples` repository:\n- [Kubeflow Pipeline components](https://github.com/elyra-ai/examples/tree/master/pipelines/kubeflow_pipelines_component_examples)\n- [Apache Airflow components](https://github.com/elyra-ai/examples/tree/master/pipelines/airflow_component_examples)\n\nNote that example components are provided as is. Unless indicated otherwise they are not maintained by the Elyra community.\n\n### Managing custom components\n\nIn this release Elyra utilizes an internal registry to store information about custom components that you can use in the Visual Pipeline Editor to create pipelines.\n\n#### Adding a component to the registry\n\nThis feature is currently not available.\n\n#### Modifying a component\n\nThis feature is currently not available.\n\n#### Deleting a component from the registry\n\nThis feature is currently not available.\n","fileAbsolutePath":"/Users/dsobryan/Documents/ElyraOS/elyra-ai-site/src/pages/user-guide/pipeline-components.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}