{"componentChunkName":"component---src-pages-common-canvas-canvas-controller-canvas-controller-api-mdx","path":"/common-canvas/canvas-controller/canvas-controller-api/","result":{"pageContext":{"frontmatter":{"title":"Canvas controller API","description":"Canvas controller API","tabs":["Canvas controller API","Style spec","Decorator spec","API Object structure","Notification spec"]},"relativePagePath":"/common-canvas/canvas-controller/canvas-controller-api.mdx","titleType":"page","MdxNode":{"id":"9d96a3c5-be0d-5fce-8db6-f48e945547a6","children":[],"parent":"44a6689f-2231-5f7e-994d-2b009ab82e7d","internal":{"content":"---\ntitle: Canvas controller API\ndescription: Canvas controller API\ntabs: ['Canvas controller API', 'Style spec', 'Decorator spec', 'API Object structure', 'Notification spec']\n\n---\n\n<PageDescription>\n\nYour application code can programmatically perform many of the actions that the user can do in the common canvas using the Canvas Controller API.\n\n</PageDescription>\n\n\n<InlineNotification>\n\n**Note:** See <a href=\"api-object-structure\">this section</a> for differences between the structure of objects in the API and the schema.\n</InlineNotification>\n\n\n<AnchorLinks >\n\n  <AnchorLink>Introduction</AnchorLink>\n  <AnchorLink>Pipeline flow methods</AnchorLink>\n    <AnchorLink>Pipeline methods</AnchorLink>\n  <AnchorLink>Palette flow methods</AnchorLink>\n    <AnchorLink>Selections methods</AnchorLink>\n  <AnchorLink>Notification messages methods</AnchorLink>\n    <AnchorLink>Node AND comment methods</AnchorLink>\n  <AnchorLink>Node methods</AnchorLink>\n    <AnchorLink>Comment methods</AnchorLink>\n  <AnchorLink>Link methods</AnchorLink>\n    <AnchorLink>Branch highlight methods</AnchorLink>\n  <AnchorLink>Operational methods</AnchorLink>\n\n</AnchorLinks>\n\n## Introduction\n\nIn most cases within the API, the pipelineId parameter is optional. If pipelineId is omitted, the method will default to the pipeline that is currently displayed in the main canvas viewport.\n\nWarning: Do not alter the IDs of objects that currently exist on the canvas. Changing object IDs can cause internal problems, in particular with the command stack.\n\n## Pipeline flow methods\n\nThe API provides the following:\n\n```\n// Loads the pipelineFlow document provided into common-canvas and displays it.\n// The document must conform to the pipelineFlow schema as documented in the\n// elyra-ai pipeline-schemas repo. Documents conforming to older versions may be\n// provided but they will be upgraded to the most recent version.\nsetPipelineFlow(flow)\n\n// Clears the pipleine flow and displays an empty canvas.\nclearPipelineFlow()\n\n// Returns the current pipelineFlow document in the latest version of the\n// pipelineFlow schema as documented in the elyra-ai pipeline-schemas repo.\ngetPipelineFlow()\n\n// Returns the ID of the primary pipeline from the pipelineFlow.\ngetPrimaryPipelineId()\n\n// Returns the internal format of all canvas data stored in memory by\n// common-canvas. Nodes, comments and links are returned in the internal\n// format.\ngetCanvasInfo()\n\n// Returns the IDs of the ancestor pipleline of the pipeline ID passed in.\ngetAncestorPipelineIds(pipelineId)\n\n// Removes all styles from nodes, comments and links. See the setObjectsStyle\n// and setLinkStyle methods for details on setting styles.\n// temporary - is a boolean that indicates whether temporary or permanent\n// styles should be removed.\nremoveAllStyles(temporary)\n\n// Specifies the new styles for objects that are not highlighted during\n// branch highlighting.\n// newStyle - is a style specification object. See wiki for details.\nsetSubdueStyle(newStyle)\n\n\n\n\n```\n\n## Pipeline methods\n\n```\n// Returns the flow validation messages for the pipeline ID passed in.\ngetFlowMessages(pipelineId)\n\n// Returns a boolean to indicate whether there are any messages of\n// includeMsgsType in the pipeline identified by the pipeline ID passed in.\n// includeMsgsType - can be either \"error\" or \"warning\"\nisFlowValid(includeMsgTypes, pipelineId)\n\n// Rearranges the nodes in the canvas in the direction specified for the\n// pipeline ID passed in.\n// layoutDirection - can be \"horizontal\" or \"vertical\"\nautoLayout(layoutDirection, pipelineId)\n\n```\n\n## Palette methods\n\n```\n// Loads the palette data as described in the palette schema in\n// elyra-ai pipeline-schemas repo. Any version can be loaded and it will be\n// upgraded to the latest version.\nsetPipelineFlowPalette(palette)\n\n// Clears the palette data from common-canvas.\nclearPaletteData()\n\n// Sets the loading text of the category. If set to a non-empty string the\n// category will show an InlineLoading control in the palette category div\n// with this text as the label. If set to falsey the palette category\n// will display as normal.\nsetCategoryLoadingText(categoryId, loadingText)\n\n// Sets the empty text of the category. If set to a non-empty string and the\n// category does not have any nodes, the palette will show a warning icon with\n// this text as a message under the category title when the category is opened.\n// This message will not be displayed if the field is set to falsey or if \n// nodetypes are added to the category.\nsetCategoryEmptyText(categoryId, emptyText)\n\n// Adds a new node into the palette:\n// nodeTypeObj - must conform to the style of node used by the palette as\n// described in the palette schema. See objects in nodeTypes array in the\n// palette schema:\n//  https://github.com/elyra-ai/pipeline-schemas/blob/master/common-canvas/palette/palette-v3-schema.json\n// category - is the name of the palette category where the node will be\n// added. If the category doesn't exist it will be created.\n// categoryLabel - Is an optional param. If a new category is created it will\n// be displayed with this label.\n// categoryDescription - Is an optional param. If a new category is created\n// it will be displayed with this description.\n// categoryImage - Is an optional param. The image displayed for the category provided as a\n// reference to an image or the image itself.\naddNodeTypeToPalette(nodeTypeObj, categoryId, categoryLabel, categoryDescription, categoryImage)\n\n// Adds an array of new node into the palette:\n// nodeTypeObjs - an array of nodetypes that must conform to the style of\n// nodes used by the palette as described in the palette schema. See objects\n// in nodeTypes array in the palette schema:\n//  https://github.com/elyra-ai/pipeline-schemas/blob/master/common-canvas/palette/palette-v3-schema.json\n// category - is the name of the palette category where the node will be\n// added. If the category doesn't exist it will be created.\n// categoryLabel - is an optional param. If a new category is created it will\n// be displayed with this label.\n// categoryImage - the image displayed for the category provided as a\n// reference to an image or the image itself.\n// categoryDescription - Is an optional param. If a new category is created\n// it will be displayed with this description.\n// categoryImage - Is an optional param. The image displayed for the category provided as a\n// reference to an image or the image itself.\naddNodeTypesToPalette(nodeTypeObjs, categoryId, categoryLabel, categoryDescription, categoryImage)\n\n// Removes nodetypes from a palette category\n// selObjectIds - an array of object IDs to identify the nodetypes to be\n// removed\n// categoryId - the ID of teh category from which the nodes will be removed\nremoveNodesFromPalette(selObjectIds, categoryId)\n\n// Returns the palette data document which will conform to the latest version\n// of the palette schema.\ngetPaletteData()\n\n// Returns the palette node identified by the operator ID passed in.\ngetPaletteNode(operatorId)\n\n// Returns the category of the palette node identified by the operator passed in\ngetCategoryForNode(nodeOpIdRef)\n\n// Converts a node template from the format use in the palette (that conforms\n// to the schema) to the internal node format.\nconvertNodeTemplate(nodeTemplate)\n\n```\n\n## Selections methods\n\n```\n\n// Sets the currently selected objects replacing any current selections.\n// newSelection - An array of object IDs for nodes and/or comments\n// pipelineId - Optional. The ID of the pipeline where the objects exist.\n// Selected objects can only be in one pipeline. If this parameter is omitted\n// it is assumed the selections will be for objects in the 'top-level' pipeline\n// being displayed.\nsetSelections(newSelection, pipelineId)\n\n// Clears all the current selections from the canvas.\nclearSelections()\n\n// Selects all the objects on the canvas.\nselectAll()\n\n// Returns an array of the IDs of the currently selected objects.\ngetSelectedObjectIds()\n\n// Returns the currently selected Nodes.\ngetSelectedNodes()\n\n// Returns the currently selected Comments.\ngetSelectedComments()\n\n// Returns the ID of the pipeline in which the currently selected objects\n// exist. Only one pipeline may contain selected objects.\ngetSelectedPipelineId()\n\n// Deletes all currently selected objects.\ndeleteSelectedObjects()\n\n// Returns true if the currently selected objects are all linked together.\n// This is used when deciding to creating a supernode.\nareSelectedNodesContiguous()\n\n\n```\n\n## Notification messages methods\n\nThe notification panel is displayed by the user by clicking the notifications icon in the toolbar. Your application can display whatever messages it wants in the notification panel. See the <a href=\"notification-spec\">Notification Messages Specification</a> documentation for the structure of message objects. The contents of the notification panel can be managed using the methods below:\n\n```\n// Overwrites the array of notification messages shown in the notification\n// panel.\n// newMessage - An array of messages (see getNotificationMessages)\nsetNotificationMessages(newMessages)\n\n// Deletes all notification messages shown in the notification panel.\nclearNotificationMessages()\n\n// Removes the notification messages from the given array of ids\ndeleteNotificationMessages(ids)\n\n// Returns the array of current notification messages. If the messageType is\n// provided only messages of that type will be returned. If messageType is\n// not provided, all messages will be returned. The format of a notification\n// message is an object with these fields:\n// {\n//   \"id\": string (Required),\n//   \"type\" : enum, oneOf [\"info\", \"success\", \"warning\", \"error\"] (Required),\n//   \"callback\": function, the callback function when a message is clicked (Required),\n//   \"title\": string (Optional),\n//   \"content\": string, html, JSX Object (Optional),\n//   \"timestamp\": string (Optional),\n//   \"closeMessage\": string (Optional)\n// }\ngetNotificationMessages(messageType)\n\n// Returns the maximum notification message type present in the current set\n// of notification messages. For this: (\"error\" > \"warning\" > \"success\" > \"info\")\ngetNotificationMessagesMaxType()\n\n\n\n```\n\n## Node AND comment methods\n\n\nIn common-canvas nodes and comments are collectively known as objects. The following methods may be used to manage either collections of comments or nodes or a mixture of both. Note:\n\n  *  See <a href=\"style-spec\">this section</a> if you are working with styles.\n  *  See <a href=\"decorator-spec\">this section</a> if you are working with decorations.\n  *  See <a href=\"api-object-structure#api-differences-with-schema\">this section</a> for differences between the structure of objects in the API and the schema.\n\n```\n// Moves the objects identified in the data object which must be in the\n// pipeline identified by the pipeline ID.\n// data - A javascript object like this:\n// {\n//   nodes: []       // An array of node and comment IDs\n//   offsetX: number // Offset in pixels the objects will move in the X dir\n//   offsetY: number // Offset in pixels the objects will move in the Y dir\n// }\nmoveObjects(data, pipelineId)\n\n// Deletes the objects specified in objectIds array.\n// objectIds - An array of node and comment IDs\ndeleteObjects(objectIds, pipelineId)\n\n// Removes the links to and from the objects specified in the objectIds array.\n// objectIds - An array of node and comment IDs\ndisconnectObjects(objectIds, pipelineId)\n\n// Deletes the object specified by the id in the pipleine specified by\n// pipeline ID.\ndeleteObject(id, pipelineId)\n\n// Sets the style of the objects specified by pipelineObjectIds to be\n// the newStyle which will be either temporary or permanent.\n// pipelineObjectIds: This identified the objects to be styles. It is a\n// javascript object like this:\n//   {\n//     <pipelineID_1>: [\n//       <objectID_1_1>,\n//       <objectID_1_2>\n//     ],\n//     <pipelineID_2>: [\n//         <objectID_2_1>,\n//         <objectID_2_2>\n//     ]\n//   }\n// newStyles - This is a style specification. See the wiki for details.\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\nsetObjectsStyle(pipelineObjectIds, newStyle, temporary)\n\n// Sets the styles of multiple objects at once.\n// pipelineObjStyles - Specified the objects and the styles each should be\n// set to. It is a javascript array like this:\n//   [\n//     { pipelineId: <pipelineId>, objId: <objectId>, style: <style_spec>},\n//     { pipelineId: <pipelineId>, objId: <objectId>, style: <style_spec>},\n//     { pipelineId: <pipelineId>, objId: <objectId>, style: <style_spec>}\n//   ]\n// temporary - A boolean to indicate if the styles are serialized when\n//             getPipelineFlow() method is called or not.\nsetObjectsMultiStyle(pipelineObjStyles, temporary)\n\n```\n\n## Node methods\n\n```\n// Retuns an array of nodes for the pipeline specified by the pipelineId.\ngetNodes(pipelineId)\n\n// Returns a new node created from the object passed in which has the\n// following properties:\n// nodeTemplate - a node template from the palette\n// offsetX - the x coordinate of the new node\n// offsetY - the y coordinate of the new node\n// pipelineId - the ID of the pipeline where the new node will exist\ncreateNode(data, pipelineId)\n\n// Adds a new node into the pipeline specified by the pipelineId.\naddNode(node, pipelineId)\n\n// Deletes the node specified.\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ndeleteNode(nodeId, pipelineId)\n\n// Sets the node properties\n// nodeId - The ID of the node\n// properties - An object containing properties to be overriden in the node\n// pipelineId - The ID of the pipeline\nsetNodeProperties(nodeId, properties, pipelineId)\n\n// Sets the node parameters\n// nodeId - The ID of the node\n// parameters - An array of parameters\n// pipelineId - The ID of the pipeline\nsetNodeParameters(nodeId, parameters, pipelineId)\n\n// Sets the node UI parameters\n// nodeId - The ID of the node\n// parameters - An array of UI parameters\n// pipelineId - The ID of the pipeline\nsetNodeUiParameters(nodeId, uiParameters, pipelineId)\n\n// Sets the node messages\n// nodeId - The ID of the node\n// messages - An array of messages\n// pipelineId - The ID of the pipeline\nsetNodeMessages(nodeId, messages, pipelineId)\n\n// Sets a single message on a node\n// nodeId - The ID of the node\n// message - A message\n// pipelineId - The ID of the pipeline\nsetNodeMessage(nodeId, message, pipelineId)\n\n// Sets the lable for a node\n// nodeId - The ID of the node\n// ndeLabel - The label\n// pipelineId - The ID of the pipeline\nsetNodeLabel(nodeId, newLabel, pipelineId)\n\n// Sets the class name to newClassName of the nodes identified by nodeIds\n// array in the pipleine specified by pipeline ID. The class name will be\n// applied to the node body path.\nsetNodesClassName(nodeIds, newClassName, pipelineId)\n\n// Sets the decorations on a node. The decorations array passed in \n// will replace any decorations currently applied to the node.\n// nodeId - The ID of the node\n// newDecorations - An array of decorations. See Wiki for details.\n// pipelineId - The ID of the pipeline\nsetNodeDecorations(nodeId, newDecorations, pipelineId)\n\n// Sets the input ports on a node. The inputs array of ports provided will\n// replace any input ports for a node.\n// nodeId - The ID of the node\n// inputs - An array of input port objects.\n// pipelineId - The ID of the pipeline\nsetNodeInputPorts(nodeId, inputs, pipelineId)\n\n// Sets the output ports on a node. The outputs array of ports provided will\n// replace any output ports for a node.\n// nodeId - The ID of the node\n// outputs - An array of output port objects.\n// pipelineId - The ID of the pipeline\nsetNodeOutputPorts(nodeId, outputs, pipelineId)\n\n// Sets the decorations of multiple nodes at once. The decorations array\n// passed in will replace any decorations currently applied to the nodes.\n// pipelineNodeDecorations - Specifies the nodes and their decorations.\n// It is a JavaScript array like this:\n//   [\n//     { pipelineId: <pipelineId>, nodeId: <nodeId>, decorations: <decoration_spec_array>},\n//     { pipelineId: <pipelineId>, nodeId: <nodeId>, decorations: <decoration_spec_array>},\n//     { pipelineId: <pipelineId>, nodeId: <nodeId>, decorations: <decoration_spec_array>}\n//   ]\nsetNodesMultiDecorations(pipelineNodeDecorations)\n\n// Sets the input port label on a node\n// nodeId - The ID of the node\n// portId - The ID of the input port\n// newLabel - The label\n// pipelineId - The ID of the pipeline\nsetInputPortLabel(nodeId, portId, newLabel, pipelineId)\n\n// Sets the output port label on a node\n// nodeId - The ID of the node\n// portId - The ID of the output port\n// newLabel - The label\n// pipelineId - The ID of the pipeline\nsetOutputPortLabel(nodeId, portId, newLabel, pipelineId)\n\n// Gets a node\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNode(nodeId, pipelineId)\n\n// Gets the UI parameters for a node\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeUiParameters(nodeId, pipelineId)\n\n// Gets the supernodes for a pipeline.\n// pipelineId - The ID of the pipeline\ngetSupernodes(pipelineId)\n\n// Returns supernode ID that has a subflow_ref to the given pipelineId.\ngetSupernodeObjReferencing(pipelineId)\n\n// Gets the messages for a node\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeMessages(nodeId, pipelineId)\n\n// Gets the array of input ports for the node or null if the node ID is\n// not recognized.\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeInputPorts(nodeId, pipelineId)\n\n// Gets the array of output ports for the node or null if the node ID is\n// not recognized.\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeOutputPorts(nodeId, pipelineId)\n\n// Gets a message for a specific control for a node\n// nodeId - The ID of the node\n// controlName - The control name\n// pipelineId - The ID of the pipeline\ngetNodeMessage(nodeId, controlName, pipelineId)\n\n// Gets an array of decorations for a node\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeDecorations(nodeId, pipelineId)\n\n// Gets the class name associated with the node specified by nodeId in the\n// pipeline specified by pipelineId.\ngetNodeClassName(nodeId, pipelineId)\n\n// Gets the style spcification (see Wiki) for a node\n// nodeId - The ID of the node\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\n// pipelineId - The ID of the pipeline\ngetNodeStyle(nodeId, temporary, pipelineId)\n\n// Returns a boolean to indicate whether the supernode is expanded in place.\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\nisSuperNodeExpandedInPlace(nodeId, pipelineId)\n\n\n```\n\nThe format of the message object is described in Pipeline Flow UI schema: https://github.com/elyra-ai/pipeline-schemas/blob/master/common-pipeline/pipeline-flow/pipeline-flow-ui-v1-schema.json\n\n\n## Comment methods\n\n```\n// Returns the comments from the pipeline.\n// pipelineId - The ID of the pipeline\ngetComments(pipelineId)\n\n// Returns a comment from the pipeline.\n// comId - The ID of the comment\n// pipelineId - The ID of the pipeline\ngetComment(comId, pipelineId)\n\n// Creates a comment for the pipeline.\n// source - Input data\n// pipelineId - The ID of the pipeline\ncreateComment(source, pipelineId)\n\n// Adds a comment to the pipeline.\n// data - the data describing the comment\n// pipelineId - The ID of the pipeline\naddComment(data, pipelineId)\n\n// Edits a comment with the data.\n// data - the comment\n// pipelineId - The ID of the pipeline\neditComment(data, pipelineId)\n\n// Sets the properties in the comment identified by the commentId. The\n// commentProperties is an object containing one or more properties that will\n// replace the corresponding properties in the comment. For example: if\n// commentProperties is { x_pos: 50, y_pos: 70 } the comment\n// will be set to that position.\nsetCommentProperties(commentId, commentProperties, pipelineId)\n\n// Sets the class name to newClassName of the comments identified by commentIds\n// array in the pipleine specified by pipeline ID. The class name will be\n// applied to the comment body path.\nsetCommentsClassName(commentIds, newClassName, pipelineId)\n\n// Deletes a comment\n// comId - The ID of the comment\n// pipelineId - The ID of the pipeline\ndeleteComment(comId, pipelineId)\n\n// Gets the class name associated with the comment specified by commentId in the\n// pipeline specified by pipelineId.\ngetCommentClassName(commentId, pipelineId)\n\n// Gets the style spcification (see Wiki) for a comment\n// commentId - The ID of the node\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\n// pipelineId - The ID of the pipeline\ngetCommentStyle(commentId, temporary, pipelineId)\n\n```\n\n## Link methods\n\n```\n// Gets a link\n// linkId - The ID of the link\n// pipelineId - The ID of the pipeline\ngetLink(linkId, pipelineId)\n\n// Returns an array of link objects for the pipelineId passed in.\n// pipelineId - The ID of the pipeline\ngetLinks(pipelineId)\n\n// Sets the properties in the link identified by the linkId. The\n// linkProperties is an object containing one or more properties that will\n// replace the corresponding properties in the link. For exam`ple: if\n// linkProperties is { trgNodeId: \"123\", trgNodePortId: \"789\" } the target\n// node ID will be set to \"123\" and the target port ID set to \"789\".\nsetLinkProperties(linkId, linkProperties, pipelineId)\n\n// Sets the source properties in the data link identified by the linkId. The\n// srcNodeId and srcNodePortId will be set to the values provided. If\n// srcNodePortId is set to null the current srcNodePortId will be removed\n// from the link. Also, if the link has a srcPos property (because its\n// source end is detached) that will be removed.\nsetNodeDataLinkSrcInfo(linkId, srcNodeId, srcNodePortId, pipelineId)\n\n// Sets the target properties in the data link identified by the linkId. The\n// trgNodeId and trgNodePortId will be set to the values provided. If\n// trgNodePortId is set to null the current trgNodePortId will be removed\n// from the link. Also, if the link has a trgPos property (because its\n// target end is detached) that will be removed.\nsetNodeDataLinkTrgInfo(linkId, trgNodeId, trgNodePortId, pipelineId)\n\n// Gets a node to node data link\n// srcNodeId - The ID of the source node\n// srcNodePortId - The ID of the source node port\n// trgNodeId - The ID of the target node\n// trgNodePortId - The ID of the target node port\n// pipelineId - The ID of the pipeline\ngetNodeDataLinkFromInfo(srcNodeId, srcNodePortId, trgNodeId, trgNodePortId, pipelineId)\n\n// Gets a comment to node link\n// id1 - The ID of the comment\n// id2 - The ID of the node\n// pipelineId - The ID of the pipeline\ngetCommentLinkFromInfo(id1, id2, pipelineId)\n\n// Gets a node to node association link\n// id1 - The ID of one of the node\n// id2 - The ID of one of the node\n// pipelineId - The ID of the pipeline\ngetNodeAssocLinkFromInfo(id1, id2, pipelineId)\n\n// Adds links to a pipeline\n// linkList - An array of links\n// pipelineId - The ID of the pipeline\naddLinks(linkList, pipelineId)\n\n// Deletes a link\n// source - An array of links\n// pipelineId - The ID of the pipeline\ndeleteLink(link, pipelineId)\n\n// Creates node to node links\n// data - Data describing the links\n// pipelineId - The ID of the pipeline\ncreateNodeLinks(data, pipelineId)\n\n// Creates comment links\n// data - Data describing the links\n// pipelineId - The ID of the pipeline\ncreateCommentLinks(data, pipelineId)\n\n// Sets the class name to newClassName of the links identified by linkIds\n// array in the pipleine specified by pipeline ID. The class name will be\n// applied to the link line path.\nsetLinksClassName(linkIds, newClassName, pipelineId)\n\n// Sets the style of the links specified by pipelineLinkIds to be\n// the newStyle which will be either temporary or permanent.\n// pipelineLinkIds - This identifies the objects to be styles. It is a\n// javascript object like this:\n//   {\n//     <pipelineID_1>: [\n//       <linkID_1_1>,\n//       <linkID_1_2>\n//     ],\n//     <pipelineID_2>: [\n//         <linkID_2_1>,\n//         <linkID_2_2>\n//     ]\n//   }\n// newStyle - This is a style specification. See the wiki for details.\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\nsetLinksStyle(pipelineLinkIds, newStyle, temporary)\n\n// Sets the styles of multiple links at once.\n// pipelineObjStyles - Specified the links and the styles each should be\n// set to. It is a javascript array like this:\n//   [\n//     { pipelineId: <pipelineId>, objId: <linkId>, style: <style_spec>},\n//     { pipelineId: <pipelineId>, objId: <linkId>, style: <style_spec>},\n//     { pipelineId: <pipelineId>, objId: <linkId>, style: <style_spec>}\n//   ]\n// temporary - A boolean to indicate if the styles are serialized when\n//             getPipelineFlow() method is called or not.\nsetLinksMultiStyle(pipelineObjStyles, temporary)\n\n// Gets the class name associated with the link specified by linkId in the\n// pipeline specified by pipelineId.\ngetLinkClassName(linkId, pipelineId)\n\n// Returns the style specification for a link.\n// linkIds - An array of links\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\n// pipelineId - The ID of the pipeline\ngetLinkStyle(linkId, temporary, pipelineId)\n\n// Sets the decorations on a link. The decorations array passed in\n// will replace any decorations currently applied to the link.\n// linkId - The ID of the link\n// newDecorations - An array of decorations. See Wiki for details.\n// pipelineId - The ID of the pipeline\nsetLinkDecorations(linkId, newDecorations, pipelineId)\n\n// Sets the decorations of multiple links at once. The decorations array\n// passed in will replace any decorations currently applied to the links.\n// pipelineLinkDecorations - Specifies the links and their decorations.\n// It is a javascript array like this:\n//   [\n//     { pipelineId: <pipelineId>, linkId: <linkId>, decorations: <decoration_spec_array>},\n//     { pipelineId: <pipelineId>, linkId: <linkId>, decorations: <decoration_spec_array>},\n//     { pipelineId: <pipelineId>, linkId: <linkId>, decorations: <decoration_spec_array>}\n//   ]\nsetLinksMultiDecorations(pipelineLinkDecorations)\n\n// Gets an array of decorations for a link\n// linkId - The ID of the link\n// pipelineId - The ID of the pipeline\ngetLinkDecorations(linkId, pipelineId)\n\n\n```\n\n## Branch highlight methods\n\n```\n// Highlights the branch(s) (both upstream and downstream) from the node\n// IDs passed in and returns the highlighted object Ids.\n// nodeIds - An array of node Ids\n// pipelineId - The ID of the pipeline\nhighlightBranch(nodeIds, pipelineId)\n\n// Highlights the upstream nodes from the node IDs passed in\n// and returns the returns the highlighted object Ids.\n// nodeIds - An array of node Ids\n// pipelineId - The ID of the pipeline\nhighlightUpstream(nodeIds, pipelineId)\n\n// Highlights the downstream nodes from the node IDs passed in\n// and returns highlighted object Ids.\n// nodeIds - An array of node Ids\n// pipelineId - The ID of the pipeline\nhighlightDownstream(nodeIds, pipelineId)\n\n\n```\n\n## Operational methods\n\nThese are general purpose methods for operation of the canvas:\n\n\n```\n// Returns a Boolean to indicate whether canvas logging is switched on or off. \ngetLoggingState()\n\n// Sets canvas logging based on the Boolean passed in.\nsetLoggingState(state)\n\n// Opens the palette\nopenPalette()\n\n// Closes the palette\nclosePalette()\n\n// Returns true if the palette is currently open\nisPaletteOpen()\n\n// Opens the context menu\nopenContextMenu(menuDef)\n\n// Closes the context menu\ncloseContextMenu()\n\n// Opens the notification panel\nopenNotificationPanel()\n\n// Closes the notification panel\ncloseNotificationPanel()\n\n// Centers the canvas contents and zooms in\nzoomIn()\n\n// Centers the canvas contents and zooms out\nzoomOut()\n\n// Zooms the canvas contents to fit within the viewport\nzoomToFit()\n\n// Changes the zoom amounts for the canvas. This method does not alter the\n// pipelineFlow document. zoomObject is an object with three fields:\n// x: Is the horizontal translate amount which is a number indicating the\n//    pixel amount to move. Negative left and positive right\n// y: Is the vertical translate amount which is a number indicating the\n//    pixel amount to move. Negative up and positive down.\n// k: is the scale amount which is a number greater than 0 where 1 is the\n//    default scale size.\nzoomTo(zoomObject)\n\n// Increments the translation of the canvas by the x and y increment\n// amounts. The optional animateTime parameter can be provided to animate the\n// movement of the canvas. It is a time for the animation in milliseconds.\n// If omitted the movement happens immediately.\ntranslateBy(x, y, animateTime)\n\n// Returns the current zoom object for the currently displayed canvas.\ngetZoom()\n\n// Returns a zoom object required to pan the objects (nodes and/or comments)\n// identified by the objectIds array to 'reveal' the objects in the viewport.\n// The zoom object returned can be provided to the CanvasController.zoomTo()\n// method to perform the zoom/pan action.\n// If the xPos and yPos variables are provided it will return a zoom object\n// to pan the objects to a location specified by a percentage offset of the\n// viewport width and height respectively.\n// If the xPos and yPos parameters are undefined (omitted) and all the\n// objects are fully within the canvas viewport, it will return null.\n// This can be used to detect whether the objects are fully visible or not.\n// Otherwise it will return a zoom object which can be used to pan the\n// objects into the viewport so they appear at the nearest side of the\n// viewport to where they are currently positioned.\n// The zoom object has three fields:\n// x: Is the horizontal translate amount which is a number indicating the\n//    pixel amount to move. Negative left and positive right\n// y: Is the vertical translate amount which is a number indicating the\n//    pixel amount to move. Negative up and positive down.\n// k: is the scale amount which is a number greater than 0 where 1 is the\n//    default scale size.\n// Parameters:\n// objectIds - An array of nodes and/or comment IDs.\n// xPos - Optional. Can be set to percentage offset of the viewport width.\n// yPos - Optional. Can be set to percentage offset of the viewport height.\ngetZoomToReveal(objectIds, xPos, yPos)\n\n// Clears any saved zoom values stored in local storage. This means\n// newly opened flows will appear with the default zoom. This method\n// is only applicable when the `enableSaveZoom` config parameter is\n// set to \"LocalStorage\".\nclearSavedZoomValues()\n\n// Returns a Boolean to indicate whether canvas logging is switched on or off. \ngetLoggingState()\n\n// Sets canvas logging based on the Boolean passed in.\nsetLoggingState(state)\n\n// Opens the palette\nopenPalette()\n\n// Closes the palette\nclosePalette()\n\n// Returns true if the palette is currently open\nisPaletteOpen()\n\n// Opens the context menu\nopenContextMenu(menuDef)\n\n// Closes the context menu\ncloseContextMenu()\n\n// Opens the notification panel\nopenNotificationPanel()\n\n// Closes the notification panel\ncloseNotificationPanel()\n\n// Centers the canvas contents and zooms in\nzoomIn()\n\n// Centers the canvas contents and zooms out\nzoomOut()\n\n// Zooms the canvas contents to fit within the viewport\nzoomToFit()\n\n// Changes the zoom amounts for the canvas. This method does not alter the\n// pipelineFlow document. zoomObject is an object with three fields:\n// x: Is the horizontal translate amount which is a number indicating the\n//    pixel amount to move. Negative left and positive right\n// y: Is the vertical translate amount which is a number indicating the\n//    pixel amount to move. Negative up and positive down.\n// k: is the scale amount which is a number greater than 0 where 1 is the\n//    default scale size.\nzoomTo(zoomObject)\n\n// Increments the translation of the canvas by the x and y increment\n// amounts. The optional animateTime parameter can be provided to animate the\n// movement of the canvas. It is a time for the animation in milliseconds.\n// If omitted the movement happens immediately.\ntranslateBy(x, y, animateTime)\n\n// Returns the current zoom object for the currently displayed canvas.\ngetZoom()\n\n// Returns a zoom object required to pan the objects (nodes and/or comments)\n// identified by the objectIds array to 'reveal' the objects in the viewport.\n// The zoom object returned can be provided to the CanvasController.zoomTo()\n// method to perform the zoom/pan action.\n// If the xPos and yPos variables are provided it will return a zoom object\n// to pan the objects to a location specified by a percentage offset of the\n// viewport width and height respectively.\n// If the xPos and yPos parameters are undefined (omitted) and all the\n// objects are fully within the canvas viewport, it will return null.\n// This can be used to detect whether the objects are fully visible or not.\n// Otherwise it will return a zoom object which can be used to pan the\n// objects into the viewport so they appear at the nearest side of the\n// viewport to where they are currently positioned.\n// The zoom object has three fields:\n// x: Is the horizontal translate amount which is a number indicating the\n//    pixel amount to move. Negative left and positive right\n// y: Is the vertical translate amount which is a number indicating the\n//    pixel amount to move. Negative up and positive down.\n// k: is the scale amount which is a number greater than 0 where 1 is the\n//    default scale size.\n// Parameters:\n// objectIds - An array of nodes and/or comment IDs.\n// xPos - Optional. Can be set to percentage offset of the viewport width.\n// yPos - Optional. Can be set to percentage offset of the viewport height.\ngetZoomToReveal(objectIds, xPos, yPos)\n\n// Clears any saved zoom values stored in local storage. This means\n// newly opened flows will appear with the default zoom. This method\n// is only applicable when the `enableSaveZoom` config parameter is\n// set to \"LocalStorage\".\nclearSavedZoomValues()\n\n```\n\n","type":"Mdx","contentDigest":"0b713ab4e2a9be427fed5b9de06e3197","owner":"gatsby-plugin-mdx","counter":421},"frontmatter":{"title":"Canvas controller API","description":"Canvas controller API","tabs":["Canvas controller API","Style spec","Decorator spec","API Object structure","Notification spec"]},"exports":{},"rawBody":"---\ntitle: Canvas controller API\ndescription: Canvas controller API\ntabs: ['Canvas controller API', 'Style spec', 'Decorator spec', 'API Object structure', 'Notification spec']\n\n---\n\n<PageDescription>\n\nYour application code can programmatically perform many of the actions that the user can do in the common canvas using the Canvas Controller API.\n\n</PageDescription>\n\n\n<InlineNotification>\n\n**Note:** See <a href=\"api-object-structure\">this section</a> for differences between the structure of objects in the API and the schema.\n</InlineNotification>\n\n\n<AnchorLinks >\n\n  <AnchorLink>Introduction</AnchorLink>\n  <AnchorLink>Pipeline flow methods</AnchorLink>\n    <AnchorLink>Pipeline methods</AnchorLink>\n  <AnchorLink>Palette flow methods</AnchorLink>\n    <AnchorLink>Selections methods</AnchorLink>\n  <AnchorLink>Notification messages methods</AnchorLink>\n    <AnchorLink>Node AND comment methods</AnchorLink>\n  <AnchorLink>Node methods</AnchorLink>\n    <AnchorLink>Comment methods</AnchorLink>\n  <AnchorLink>Link methods</AnchorLink>\n    <AnchorLink>Branch highlight methods</AnchorLink>\n  <AnchorLink>Operational methods</AnchorLink>\n\n</AnchorLinks>\n\n## Introduction\n\nIn most cases within the API, the pipelineId parameter is optional. If pipelineId is omitted, the method will default to the pipeline that is currently displayed in the main canvas viewport.\n\nWarning: Do not alter the IDs of objects that currently exist on the canvas. Changing object IDs can cause internal problems, in particular with the command stack.\n\n## Pipeline flow methods\n\nThe API provides the following:\n\n```\n// Loads the pipelineFlow document provided into common-canvas and displays it.\n// The document must conform to the pipelineFlow schema as documented in the\n// elyra-ai pipeline-schemas repo. Documents conforming to older versions may be\n// provided but they will be upgraded to the most recent version.\nsetPipelineFlow(flow)\n\n// Clears the pipleine flow and displays an empty canvas.\nclearPipelineFlow()\n\n// Returns the current pipelineFlow document in the latest version of the\n// pipelineFlow schema as documented in the elyra-ai pipeline-schemas repo.\ngetPipelineFlow()\n\n// Returns the ID of the primary pipeline from the pipelineFlow.\ngetPrimaryPipelineId()\n\n// Returns the internal format of all canvas data stored in memory by\n// common-canvas. Nodes, comments and links are returned in the internal\n// format.\ngetCanvasInfo()\n\n// Returns the IDs of the ancestor pipleline of the pipeline ID passed in.\ngetAncestorPipelineIds(pipelineId)\n\n// Removes all styles from nodes, comments and links. See the setObjectsStyle\n// and setLinkStyle methods for details on setting styles.\n// temporary - is a boolean that indicates whether temporary or permanent\n// styles should be removed.\nremoveAllStyles(temporary)\n\n// Specifies the new styles for objects that are not highlighted during\n// branch highlighting.\n// newStyle - is a style specification object. See wiki for details.\nsetSubdueStyle(newStyle)\n\n\n\n\n```\n\n## Pipeline methods\n\n```\n// Returns the flow validation messages for the pipeline ID passed in.\ngetFlowMessages(pipelineId)\n\n// Returns a boolean to indicate whether there are any messages of\n// includeMsgsType in the pipeline identified by the pipeline ID passed in.\n// includeMsgsType - can be either \"error\" or \"warning\"\nisFlowValid(includeMsgTypes, pipelineId)\n\n// Rearranges the nodes in the canvas in the direction specified for the\n// pipeline ID passed in.\n// layoutDirection - can be \"horizontal\" or \"vertical\"\nautoLayout(layoutDirection, pipelineId)\n\n```\n\n## Palette methods\n\n```\n// Loads the palette data as described in the palette schema in\n// elyra-ai pipeline-schemas repo. Any version can be loaded and it will be\n// upgraded to the latest version.\nsetPipelineFlowPalette(palette)\n\n// Clears the palette data from common-canvas.\nclearPaletteData()\n\n// Sets the loading text of the category. If set to a non-empty string the\n// category will show an InlineLoading control in the palette category div\n// with this text as the label. If set to falsey the palette category\n// will display as normal.\nsetCategoryLoadingText(categoryId, loadingText)\n\n// Sets the empty text of the category. If set to a non-empty string and the\n// category does not have any nodes, the palette will show a warning icon with\n// this text as a message under the category title when the category is opened.\n// This message will not be displayed if the field is set to falsey or if \n// nodetypes are added to the category.\nsetCategoryEmptyText(categoryId, emptyText)\n\n// Adds a new node into the palette:\n// nodeTypeObj - must conform to the style of node used by the palette as\n// described in the palette schema. See objects in nodeTypes array in the\n// palette schema:\n//  https://github.com/elyra-ai/pipeline-schemas/blob/master/common-canvas/palette/palette-v3-schema.json\n// category - is the name of the palette category where the node will be\n// added. If the category doesn't exist it will be created.\n// categoryLabel - Is an optional param. If a new category is created it will\n// be displayed with this label.\n// categoryDescription - Is an optional param. If a new category is created\n// it will be displayed with this description.\n// categoryImage - Is an optional param. The image displayed for the category provided as a\n// reference to an image or the image itself.\naddNodeTypeToPalette(nodeTypeObj, categoryId, categoryLabel, categoryDescription, categoryImage)\n\n// Adds an array of new node into the palette:\n// nodeTypeObjs - an array of nodetypes that must conform to the style of\n// nodes used by the palette as described in the palette schema. See objects\n// in nodeTypes array in the palette schema:\n//  https://github.com/elyra-ai/pipeline-schemas/blob/master/common-canvas/palette/palette-v3-schema.json\n// category - is the name of the palette category where the node will be\n// added. If the category doesn't exist it will be created.\n// categoryLabel - is an optional param. If a new category is created it will\n// be displayed with this label.\n// categoryImage - the image displayed for the category provided as a\n// reference to an image or the image itself.\n// categoryDescription - Is an optional param. If a new category is created\n// it will be displayed with this description.\n// categoryImage - Is an optional param. The image displayed for the category provided as a\n// reference to an image or the image itself.\naddNodeTypesToPalette(nodeTypeObjs, categoryId, categoryLabel, categoryDescription, categoryImage)\n\n// Removes nodetypes from a palette category\n// selObjectIds - an array of object IDs to identify the nodetypes to be\n// removed\n// categoryId - the ID of teh category from which the nodes will be removed\nremoveNodesFromPalette(selObjectIds, categoryId)\n\n// Returns the palette data document which will conform to the latest version\n// of the palette schema.\ngetPaletteData()\n\n// Returns the palette node identified by the operator ID passed in.\ngetPaletteNode(operatorId)\n\n// Returns the category of the palette node identified by the operator passed in\ngetCategoryForNode(nodeOpIdRef)\n\n// Converts a node template from the format use in the palette (that conforms\n// to the schema) to the internal node format.\nconvertNodeTemplate(nodeTemplate)\n\n```\n\n## Selections methods\n\n```\n\n// Sets the currently selected objects replacing any current selections.\n// newSelection - An array of object IDs for nodes and/or comments\n// pipelineId - Optional. The ID of the pipeline where the objects exist.\n// Selected objects can only be in one pipeline. If this parameter is omitted\n// it is assumed the selections will be for objects in the 'top-level' pipeline\n// being displayed.\nsetSelections(newSelection, pipelineId)\n\n// Clears all the current selections from the canvas.\nclearSelections()\n\n// Selects all the objects on the canvas.\nselectAll()\n\n// Returns an array of the IDs of the currently selected objects.\ngetSelectedObjectIds()\n\n// Returns the currently selected Nodes.\ngetSelectedNodes()\n\n// Returns the currently selected Comments.\ngetSelectedComments()\n\n// Returns the ID of the pipeline in which the currently selected objects\n// exist. Only one pipeline may contain selected objects.\ngetSelectedPipelineId()\n\n// Deletes all currently selected objects.\ndeleteSelectedObjects()\n\n// Returns true if the currently selected objects are all linked together.\n// This is used when deciding to creating a supernode.\nareSelectedNodesContiguous()\n\n\n```\n\n## Notification messages methods\n\nThe notification panel is displayed by the user by clicking the notifications icon in the toolbar. Your application can display whatever messages it wants in the notification panel. See the <a href=\"notification-spec\">Notification Messages Specification</a> documentation for the structure of message objects. The contents of the notification panel can be managed using the methods below:\n\n```\n// Overwrites the array of notification messages shown in the notification\n// panel.\n// newMessage - An array of messages (see getNotificationMessages)\nsetNotificationMessages(newMessages)\n\n// Deletes all notification messages shown in the notification panel.\nclearNotificationMessages()\n\n// Removes the notification messages from the given array of ids\ndeleteNotificationMessages(ids)\n\n// Returns the array of current notification messages. If the messageType is\n// provided only messages of that type will be returned. If messageType is\n// not provided, all messages will be returned. The format of a notification\n// message is an object with these fields:\n// {\n//   \"id\": string (Required),\n//   \"type\" : enum, oneOf [\"info\", \"success\", \"warning\", \"error\"] (Required),\n//   \"callback\": function, the callback function when a message is clicked (Required),\n//   \"title\": string (Optional),\n//   \"content\": string, html, JSX Object (Optional),\n//   \"timestamp\": string (Optional),\n//   \"closeMessage\": string (Optional)\n// }\ngetNotificationMessages(messageType)\n\n// Returns the maximum notification message type present in the current set\n// of notification messages. For this: (\"error\" > \"warning\" > \"success\" > \"info\")\ngetNotificationMessagesMaxType()\n\n\n\n```\n\n## Node AND comment methods\n\n\nIn common-canvas nodes and comments are collectively known as objects. The following methods may be used to manage either collections of comments or nodes or a mixture of both. Note:\n\n  *  See <a href=\"style-spec\">this section</a> if you are working with styles.\n  *  See <a href=\"decorator-spec\">this section</a> if you are working with decorations.\n  *  See <a href=\"api-object-structure#api-differences-with-schema\">this section</a> for differences between the structure of objects in the API and the schema.\n\n```\n// Moves the objects identified in the data object which must be in the\n// pipeline identified by the pipeline ID.\n// data - A javascript object like this:\n// {\n//   nodes: []       // An array of node and comment IDs\n//   offsetX: number // Offset in pixels the objects will move in the X dir\n//   offsetY: number // Offset in pixels the objects will move in the Y dir\n// }\nmoveObjects(data, pipelineId)\n\n// Deletes the objects specified in objectIds array.\n// objectIds - An array of node and comment IDs\ndeleteObjects(objectIds, pipelineId)\n\n// Removes the links to and from the objects specified in the objectIds array.\n// objectIds - An array of node and comment IDs\ndisconnectObjects(objectIds, pipelineId)\n\n// Deletes the object specified by the id in the pipleine specified by\n// pipeline ID.\ndeleteObject(id, pipelineId)\n\n// Sets the style of the objects specified by pipelineObjectIds to be\n// the newStyle which will be either temporary or permanent.\n// pipelineObjectIds: This identified the objects to be styles. It is a\n// javascript object like this:\n//   {\n//     <pipelineID_1>: [\n//       <objectID_1_1>,\n//       <objectID_1_2>\n//     ],\n//     <pipelineID_2>: [\n//         <objectID_2_1>,\n//         <objectID_2_2>\n//     ]\n//   }\n// newStyles - This is a style specification. See the wiki for details.\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\nsetObjectsStyle(pipelineObjectIds, newStyle, temporary)\n\n// Sets the styles of multiple objects at once.\n// pipelineObjStyles - Specified the objects and the styles each should be\n// set to. It is a javascript array like this:\n//   [\n//     { pipelineId: <pipelineId>, objId: <objectId>, style: <style_spec>},\n//     { pipelineId: <pipelineId>, objId: <objectId>, style: <style_spec>},\n//     { pipelineId: <pipelineId>, objId: <objectId>, style: <style_spec>}\n//   ]\n// temporary - A boolean to indicate if the styles are serialized when\n//             getPipelineFlow() method is called or not.\nsetObjectsMultiStyle(pipelineObjStyles, temporary)\n\n```\n\n## Node methods\n\n```\n// Retuns an array of nodes for the pipeline specified by the pipelineId.\ngetNodes(pipelineId)\n\n// Returns a new node created from the object passed in which has the\n// following properties:\n// nodeTemplate - a node template from the palette\n// offsetX - the x coordinate of the new node\n// offsetY - the y coordinate of the new node\n// pipelineId - the ID of the pipeline where the new node will exist\ncreateNode(data, pipelineId)\n\n// Adds a new node into the pipeline specified by the pipelineId.\naddNode(node, pipelineId)\n\n// Deletes the node specified.\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ndeleteNode(nodeId, pipelineId)\n\n// Sets the node properties\n// nodeId - The ID of the node\n// properties - An object containing properties to be overriden in the node\n// pipelineId - The ID of the pipeline\nsetNodeProperties(nodeId, properties, pipelineId)\n\n// Sets the node parameters\n// nodeId - The ID of the node\n// parameters - An array of parameters\n// pipelineId - The ID of the pipeline\nsetNodeParameters(nodeId, parameters, pipelineId)\n\n// Sets the node UI parameters\n// nodeId - The ID of the node\n// parameters - An array of UI parameters\n// pipelineId - The ID of the pipeline\nsetNodeUiParameters(nodeId, uiParameters, pipelineId)\n\n// Sets the node messages\n// nodeId - The ID of the node\n// messages - An array of messages\n// pipelineId - The ID of the pipeline\nsetNodeMessages(nodeId, messages, pipelineId)\n\n// Sets a single message on a node\n// nodeId - The ID of the node\n// message - A message\n// pipelineId - The ID of the pipeline\nsetNodeMessage(nodeId, message, pipelineId)\n\n// Sets the lable for a node\n// nodeId - The ID of the node\n// ndeLabel - The label\n// pipelineId - The ID of the pipeline\nsetNodeLabel(nodeId, newLabel, pipelineId)\n\n// Sets the class name to newClassName of the nodes identified by nodeIds\n// array in the pipleine specified by pipeline ID. The class name will be\n// applied to the node body path.\nsetNodesClassName(nodeIds, newClassName, pipelineId)\n\n// Sets the decorations on a node. The decorations array passed in \n// will replace any decorations currently applied to the node.\n// nodeId - The ID of the node\n// newDecorations - An array of decorations. See Wiki for details.\n// pipelineId - The ID of the pipeline\nsetNodeDecorations(nodeId, newDecorations, pipelineId)\n\n// Sets the input ports on a node. The inputs array of ports provided will\n// replace any input ports for a node.\n// nodeId - The ID of the node\n// inputs - An array of input port objects.\n// pipelineId - The ID of the pipeline\nsetNodeInputPorts(nodeId, inputs, pipelineId)\n\n// Sets the output ports on a node. The outputs array of ports provided will\n// replace any output ports for a node.\n// nodeId - The ID of the node\n// outputs - An array of output port objects.\n// pipelineId - The ID of the pipeline\nsetNodeOutputPorts(nodeId, outputs, pipelineId)\n\n// Sets the decorations of multiple nodes at once. The decorations array\n// passed in will replace any decorations currently applied to the nodes.\n// pipelineNodeDecorations - Specifies the nodes and their decorations.\n// It is a JavaScript array like this:\n//   [\n//     { pipelineId: <pipelineId>, nodeId: <nodeId>, decorations: <decoration_spec_array>},\n//     { pipelineId: <pipelineId>, nodeId: <nodeId>, decorations: <decoration_spec_array>},\n//     { pipelineId: <pipelineId>, nodeId: <nodeId>, decorations: <decoration_spec_array>}\n//   ]\nsetNodesMultiDecorations(pipelineNodeDecorations)\n\n// Sets the input port label on a node\n// nodeId - The ID of the node\n// portId - The ID of the input port\n// newLabel - The label\n// pipelineId - The ID of the pipeline\nsetInputPortLabel(nodeId, portId, newLabel, pipelineId)\n\n// Sets the output port label on a node\n// nodeId - The ID of the node\n// portId - The ID of the output port\n// newLabel - The label\n// pipelineId - The ID of the pipeline\nsetOutputPortLabel(nodeId, portId, newLabel, pipelineId)\n\n// Gets a node\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNode(nodeId, pipelineId)\n\n// Gets the UI parameters for a node\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeUiParameters(nodeId, pipelineId)\n\n// Gets the supernodes for a pipeline.\n// pipelineId - The ID of the pipeline\ngetSupernodes(pipelineId)\n\n// Returns supernode ID that has a subflow_ref to the given pipelineId.\ngetSupernodeObjReferencing(pipelineId)\n\n// Gets the messages for a node\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeMessages(nodeId, pipelineId)\n\n// Gets the array of input ports for the node or null if the node ID is\n// not recognized.\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeInputPorts(nodeId, pipelineId)\n\n// Gets the array of output ports for the node or null if the node ID is\n// not recognized.\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeOutputPorts(nodeId, pipelineId)\n\n// Gets a message for a specific control for a node\n// nodeId - The ID of the node\n// controlName - The control name\n// pipelineId - The ID of the pipeline\ngetNodeMessage(nodeId, controlName, pipelineId)\n\n// Gets an array of decorations for a node\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeDecorations(nodeId, pipelineId)\n\n// Gets the class name associated with the node specified by nodeId in the\n// pipeline specified by pipelineId.\ngetNodeClassName(nodeId, pipelineId)\n\n// Gets the style spcification (see Wiki) for a node\n// nodeId - The ID of the node\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\n// pipelineId - The ID of the pipeline\ngetNodeStyle(nodeId, temporary, pipelineId)\n\n// Returns a boolean to indicate whether the supernode is expanded in place.\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\nisSuperNodeExpandedInPlace(nodeId, pipelineId)\n\n\n```\n\nThe format of the message object is described in Pipeline Flow UI schema: https://github.com/elyra-ai/pipeline-schemas/blob/master/common-pipeline/pipeline-flow/pipeline-flow-ui-v1-schema.json\n\n\n## Comment methods\n\n```\n// Returns the comments from the pipeline.\n// pipelineId - The ID of the pipeline\ngetComments(pipelineId)\n\n// Returns a comment from the pipeline.\n// comId - The ID of the comment\n// pipelineId - The ID of the pipeline\ngetComment(comId, pipelineId)\n\n// Creates a comment for the pipeline.\n// source - Input data\n// pipelineId - The ID of the pipeline\ncreateComment(source, pipelineId)\n\n// Adds a comment to the pipeline.\n// data - the data describing the comment\n// pipelineId - The ID of the pipeline\naddComment(data, pipelineId)\n\n// Edits a comment with the data.\n// data - the comment\n// pipelineId - The ID of the pipeline\neditComment(data, pipelineId)\n\n// Sets the properties in the comment identified by the commentId. The\n// commentProperties is an object containing one or more properties that will\n// replace the corresponding properties in the comment. For example: if\n// commentProperties is { x_pos: 50, y_pos: 70 } the comment\n// will be set to that position.\nsetCommentProperties(commentId, commentProperties, pipelineId)\n\n// Sets the class name to newClassName of the comments identified by commentIds\n// array in the pipleine specified by pipeline ID. The class name will be\n// applied to the comment body path.\nsetCommentsClassName(commentIds, newClassName, pipelineId)\n\n// Deletes a comment\n// comId - The ID of the comment\n// pipelineId - The ID of the pipeline\ndeleteComment(comId, pipelineId)\n\n// Gets the class name associated with the comment specified by commentId in the\n// pipeline specified by pipelineId.\ngetCommentClassName(commentId, pipelineId)\n\n// Gets the style spcification (see Wiki) for a comment\n// commentId - The ID of the node\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\n// pipelineId - The ID of the pipeline\ngetCommentStyle(commentId, temporary, pipelineId)\n\n```\n\n## Link methods\n\n```\n// Gets a link\n// linkId - The ID of the link\n// pipelineId - The ID of the pipeline\ngetLink(linkId, pipelineId)\n\n// Returns an array of link objects for the pipelineId passed in.\n// pipelineId - The ID of the pipeline\ngetLinks(pipelineId)\n\n// Sets the properties in the link identified by the linkId. The\n// linkProperties is an object containing one or more properties that will\n// replace the corresponding properties in the link. For exam`ple: if\n// linkProperties is { trgNodeId: \"123\", trgNodePortId: \"789\" } the target\n// node ID will be set to \"123\" and the target port ID set to \"789\".\nsetLinkProperties(linkId, linkProperties, pipelineId)\n\n// Sets the source properties in the data link identified by the linkId. The\n// srcNodeId and srcNodePortId will be set to the values provided. If\n// srcNodePortId is set to null the current srcNodePortId will be removed\n// from the link. Also, if the link has a srcPos property (because its\n// source end is detached) that will be removed.\nsetNodeDataLinkSrcInfo(linkId, srcNodeId, srcNodePortId, pipelineId)\n\n// Sets the target properties in the data link identified by the linkId. The\n// trgNodeId and trgNodePortId will be set to the values provided. If\n// trgNodePortId is set to null the current trgNodePortId will be removed\n// from the link. Also, if the link has a trgPos property (because its\n// target end is detached) that will be removed.\nsetNodeDataLinkTrgInfo(linkId, trgNodeId, trgNodePortId, pipelineId)\n\n// Gets a node to node data link\n// srcNodeId - The ID of the source node\n// srcNodePortId - The ID of the source node port\n// trgNodeId - The ID of the target node\n// trgNodePortId - The ID of the target node port\n// pipelineId - The ID of the pipeline\ngetNodeDataLinkFromInfo(srcNodeId, srcNodePortId, trgNodeId, trgNodePortId, pipelineId)\n\n// Gets a comment to node link\n// id1 - The ID of the comment\n// id2 - The ID of the node\n// pipelineId - The ID of the pipeline\ngetCommentLinkFromInfo(id1, id2, pipelineId)\n\n// Gets a node to node association link\n// id1 - The ID of one of the node\n// id2 - The ID of one of the node\n// pipelineId - The ID of the pipeline\ngetNodeAssocLinkFromInfo(id1, id2, pipelineId)\n\n// Adds links to a pipeline\n// linkList - An array of links\n// pipelineId - The ID of the pipeline\naddLinks(linkList, pipelineId)\n\n// Deletes a link\n// source - An array of links\n// pipelineId - The ID of the pipeline\ndeleteLink(link, pipelineId)\n\n// Creates node to node links\n// data - Data describing the links\n// pipelineId - The ID of the pipeline\ncreateNodeLinks(data, pipelineId)\n\n// Creates comment links\n// data - Data describing the links\n// pipelineId - The ID of the pipeline\ncreateCommentLinks(data, pipelineId)\n\n// Sets the class name to newClassName of the links identified by linkIds\n// array in the pipleine specified by pipeline ID. The class name will be\n// applied to the link line path.\nsetLinksClassName(linkIds, newClassName, pipelineId)\n\n// Sets the style of the links specified by pipelineLinkIds to be\n// the newStyle which will be either temporary or permanent.\n// pipelineLinkIds - This identifies the objects to be styles. It is a\n// javascript object like this:\n//   {\n//     <pipelineID_1>: [\n//       <linkID_1_1>,\n//       <linkID_1_2>\n//     ],\n//     <pipelineID_2>: [\n//         <linkID_2_1>,\n//         <linkID_2_2>\n//     ]\n//   }\n// newStyle - This is a style specification. See the wiki for details.\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\nsetLinksStyle(pipelineLinkIds, newStyle, temporary)\n\n// Sets the styles of multiple links at once.\n// pipelineObjStyles - Specified the links and the styles each should be\n// set to. It is a javascript array like this:\n//   [\n//     { pipelineId: <pipelineId>, objId: <linkId>, style: <style_spec>},\n//     { pipelineId: <pipelineId>, objId: <linkId>, style: <style_spec>},\n//     { pipelineId: <pipelineId>, objId: <linkId>, style: <style_spec>}\n//   ]\n// temporary - A boolean to indicate if the styles are serialized when\n//             getPipelineFlow() method is called or not.\nsetLinksMultiStyle(pipelineObjStyles, temporary)\n\n// Gets the class name associated with the link specified by linkId in the\n// pipeline specified by pipelineId.\ngetLinkClassName(linkId, pipelineId)\n\n// Returns the style specification for a link.\n// linkIds - An array of links\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\n// pipelineId - The ID of the pipeline\ngetLinkStyle(linkId, temporary, pipelineId)\n\n// Sets the decorations on a link. The decorations array passed in\n// will replace any decorations currently applied to the link.\n// linkId - The ID of the link\n// newDecorations - An array of decorations. See Wiki for details.\n// pipelineId - The ID of the pipeline\nsetLinkDecorations(linkId, newDecorations, pipelineId)\n\n// Sets the decorations of multiple links at once. The decorations array\n// passed in will replace any decorations currently applied to the links.\n// pipelineLinkDecorations - Specifies the links and their decorations.\n// It is a javascript array like this:\n//   [\n//     { pipelineId: <pipelineId>, linkId: <linkId>, decorations: <decoration_spec_array>},\n//     { pipelineId: <pipelineId>, linkId: <linkId>, decorations: <decoration_spec_array>},\n//     { pipelineId: <pipelineId>, linkId: <linkId>, decorations: <decoration_spec_array>}\n//   ]\nsetLinksMultiDecorations(pipelineLinkDecorations)\n\n// Gets an array of decorations for a link\n// linkId - The ID of the link\n// pipelineId - The ID of the pipeline\ngetLinkDecorations(linkId, pipelineId)\n\n\n```\n\n## Branch highlight methods\n\n```\n// Highlights the branch(s) (both upstream and downstream) from the node\n// IDs passed in and returns the highlighted object Ids.\n// nodeIds - An array of node Ids\n// pipelineId - The ID of the pipeline\nhighlightBranch(nodeIds, pipelineId)\n\n// Highlights the upstream nodes from the node IDs passed in\n// and returns the returns the highlighted object Ids.\n// nodeIds - An array of node Ids\n// pipelineId - The ID of the pipeline\nhighlightUpstream(nodeIds, pipelineId)\n\n// Highlights the downstream nodes from the node IDs passed in\n// and returns highlighted object Ids.\n// nodeIds - An array of node Ids\n// pipelineId - The ID of the pipeline\nhighlightDownstream(nodeIds, pipelineId)\n\n\n```\n\n## Operational methods\n\nThese are general purpose methods for operation of the canvas:\n\n\n```\n// Returns a Boolean to indicate whether canvas logging is switched on or off. \ngetLoggingState()\n\n// Sets canvas logging based on the Boolean passed in.\nsetLoggingState(state)\n\n// Opens the palette\nopenPalette()\n\n// Closes the palette\nclosePalette()\n\n// Returns true if the palette is currently open\nisPaletteOpen()\n\n// Opens the context menu\nopenContextMenu(menuDef)\n\n// Closes the context menu\ncloseContextMenu()\n\n// Opens the notification panel\nopenNotificationPanel()\n\n// Closes the notification panel\ncloseNotificationPanel()\n\n// Centers the canvas contents and zooms in\nzoomIn()\n\n// Centers the canvas contents and zooms out\nzoomOut()\n\n// Zooms the canvas contents to fit within the viewport\nzoomToFit()\n\n// Changes the zoom amounts for the canvas. This method does not alter the\n// pipelineFlow document. zoomObject is an object with three fields:\n// x: Is the horizontal translate amount which is a number indicating the\n//    pixel amount to move. Negative left and positive right\n// y: Is the vertical translate amount which is a number indicating the\n//    pixel amount to move. Negative up and positive down.\n// k: is the scale amount which is a number greater than 0 where 1 is the\n//    default scale size.\nzoomTo(zoomObject)\n\n// Increments the translation of the canvas by the x and y increment\n// amounts. The optional animateTime parameter can be provided to animate the\n// movement of the canvas. It is a time for the animation in milliseconds.\n// If omitted the movement happens immediately.\ntranslateBy(x, y, animateTime)\n\n// Returns the current zoom object for the currently displayed canvas.\ngetZoom()\n\n// Returns a zoom object required to pan the objects (nodes and/or comments)\n// identified by the objectIds array to 'reveal' the objects in the viewport.\n// The zoom object returned can be provided to the CanvasController.zoomTo()\n// method to perform the zoom/pan action.\n// If the xPos and yPos variables are provided it will return a zoom object\n// to pan the objects to a location specified by a percentage offset of the\n// viewport width and height respectively.\n// If the xPos and yPos parameters are undefined (omitted) and all the\n// objects are fully within the canvas viewport, it will return null.\n// This can be used to detect whether the objects are fully visible or not.\n// Otherwise it will return a zoom object which can be used to pan the\n// objects into the viewport so they appear at the nearest side of the\n// viewport to where they are currently positioned.\n// The zoom object has three fields:\n// x: Is the horizontal translate amount which is a number indicating the\n//    pixel amount to move. Negative left and positive right\n// y: Is the vertical translate amount which is a number indicating the\n//    pixel amount to move. Negative up and positive down.\n// k: is the scale amount which is a number greater than 0 where 1 is the\n//    default scale size.\n// Parameters:\n// objectIds - An array of nodes and/or comment IDs.\n// xPos - Optional. Can be set to percentage offset of the viewport width.\n// yPos - Optional. Can be set to percentage offset of the viewport height.\ngetZoomToReveal(objectIds, xPos, yPos)\n\n// Clears any saved zoom values stored in local storage. This means\n// newly opened flows will appear with the default zoom. This method\n// is only applicable when the `enableSaveZoom` config parameter is\n// set to \"LocalStorage\".\nclearSavedZoomValues()\n\n// Returns a Boolean to indicate whether canvas logging is switched on or off. \ngetLoggingState()\n\n// Sets canvas logging based on the Boolean passed in.\nsetLoggingState(state)\n\n// Opens the palette\nopenPalette()\n\n// Closes the palette\nclosePalette()\n\n// Returns true if the palette is currently open\nisPaletteOpen()\n\n// Opens the context menu\nopenContextMenu(menuDef)\n\n// Closes the context menu\ncloseContextMenu()\n\n// Opens the notification panel\nopenNotificationPanel()\n\n// Closes the notification panel\ncloseNotificationPanel()\n\n// Centers the canvas contents and zooms in\nzoomIn()\n\n// Centers the canvas contents and zooms out\nzoomOut()\n\n// Zooms the canvas contents to fit within the viewport\nzoomToFit()\n\n// Changes the zoom amounts for the canvas. This method does not alter the\n// pipelineFlow document. zoomObject is an object with three fields:\n// x: Is the horizontal translate amount which is a number indicating the\n//    pixel amount to move. Negative left and positive right\n// y: Is the vertical translate amount which is a number indicating the\n//    pixel amount to move. Negative up and positive down.\n// k: is the scale amount which is a number greater than 0 where 1 is the\n//    default scale size.\nzoomTo(zoomObject)\n\n// Increments the translation of the canvas by the x and y increment\n// amounts. The optional animateTime parameter can be provided to animate the\n// movement of the canvas. It is a time for the animation in milliseconds.\n// If omitted the movement happens immediately.\ntranslateBy(x, y, animateTime)\n\n// Returns the current zoom object for the currently displayed canvas.\ngetZoom()\n\n// Returns a zoom object required to pan the objects (nodes and/or comments)\n// identified by the objectIds array to 'reveal' the objects in the viewport.\n// The zoom object returned can be provided to the CanvasController.zoomTo()\n// method to perform the zoom/pan action.\n// If the xPos and yPos variables are provided it will return a zoom object\n// to pan the objects to a location specified by a percentage offset of the\n// viewport width and height respectively.\n// If the xPos and yPos parameters are undefined (omitted) and all the\n// objects are fully within the canvas viewport, it will return null.\n// This can be used to detect whether the objects are fully visible or not.\n// Otherwise it will return a zoom object which can be used to pan the\n// objects into the viewport so they appear at the nearest side of the\n// viewport to where they are currently positioned.\n// The zoom object has three fields:\n// x: Is the horizontal translate amount which is a number indicating the\n//    pixel amount to move. Negative left and positive right\n// y: Is the vertical translate amount which is a number indicating the\n//    pixel amount to move. Negative up and positive down.\n// k: is the scale amount which is a number greater than 0 where 1 is the\n//    default scale size.\n// Parameters:\n// objectIds - An array of nodes and/or comment IDs.\n// xPos - Optional. Can be set to percentage offset of the viewport width.\n// yPos - Optional. Can be set to percentage offset of the viewport height.\ngetZoomToReveal(objectIds, xPos, yPos)\n\n// Clears any saved zoom values stored in local storage. This means\n// newly opened flows will appear with the default zoom. This method\n// is only applicable when the `enableSaveZoom` config parameter is\n// set to \"LocalStorage\".\nclearSavedZoomValues()\n\n```\n\n","fileAbsolutePath":"/Users/dsobryan/Documents/ElyraOS/elyra-ai-site/src/pages/common-canvas/canvas-controller/canvas-controller-api.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}