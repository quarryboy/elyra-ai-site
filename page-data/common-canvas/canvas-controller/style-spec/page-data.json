{"componentChunkName":"component---src-pages-common-canvas-canvas-controller-style-spec-mdx","path":"/common-canvas/canvas-controller/style-spec/","result":{"pageContext":{"frontmatter":{"title":"Style spec","description":"Style spec","tabs":["Canvas controller API","Style spec","Decorator spec","API Object structure","Notification spec"]},"relativePagePath":"/common-canvas/canvas-controller/style-spec.mdx","titleType":"page","MdxNode":{"id":"97e098ae-3230-5b0a-87e4-fd11b0173104","children":[],"parent":"0dcbad5d-28e6-58f0-bf74-e297b27db8d1","internal":{"content":"---\ntitle: Style spec\ndescription: Style spec\ntabs: ['Canvas controller API', 'Style spec', 'Decorator spec', 'API Object structure', 'Notification spec']\n\n---\n\n<PageDescription>\n\nThere are multiple ways to specify the styles for the objects common-canvas displays.\n</PageDescription>\n\n\n* A class name can be provided for nodes either within the pipelineFlow document or\n* The common-canvas default styes can be overriden within your CSS or SCSS file\n\nFor more precise styling of objects the style specification object can be used to provide a number of styles to common canvas to set the inline styles on numerous elements of an object. For example, a node is made up of: a selection outline; a node body (rectangle); an image, a label etc.\n\nStyle specifications may be applied to common-canvas objects using the following <a href=\"canvas-controller-api\">Canvas Controller</a> methods:\n\n```\nsetObjectsStyle()\nsetObjectsMultiStyle()\nsetLinksStyle()\nsetLinksMultiStyle()\nsetSubdueStyle()\n\n```\n\nand may be retrieved for objects using:\n\n```\ngetNodeStyle()\ngetCommentStyle()\ngetLinkStyle()\n\n```\n\nThe style spec for a node can set the styles for all these elements in one shot. Here is a template of a style spec for a node:\n\n```\n{\n    body: { default: <css_snippet>, hover: <css_snippet> },\n    image: { default: <css_snippet> },\n    label: { default: <css_snippet> },\n    selection_outline: { default: <css_snippet> }\n}\n\n```\n\nAnd here is a real example:\n\n```\n{ \n    body: { \n        default: \"fill: coral; stroke: red;\",\n        hover: \"fill: cornflowerblue; stroke: blue;\"\n    }\n};\n\n```\n\nHere is a template for styling a comment:\n\n\n```\n{\n    body: { default: <css_snippet>, hover: <css_snippet> },\n    text: { default: <css_snippet> },\n    selection_outline: { default: <css_snippet> },\n}\n\n```\n\nAnd here is a template for styling a link:\n\n```\n{\n    line: { default: <css_snippet> , hover: <css_snippet>  }\n}\n\n```\n\n* `<css_snippet>` - is a string containing any CSS code that can be added inline to an SVG object. That means, for example, you need to use fill and stroke for colors etc It is recommended NOT to change the sizes of text fonts.\n\n\nThe CSS will be applied to the element of the object specified, either as the default inline style or as the style when the pointer hovers over the object.\n\nWhen a hover style is applied to a graphical element it is applied in addition to the default style so there is no need to repeat styles in the hover <css_snippet> because they will augment the default style.\n\nBecause styles are applied as in-line styles they will override any styles provided in your application's CSS and specified to common-canvas through the class_name field of canvas objects.\n\nIf the <css_snippet> is specified as null the current style will be removed from the specified element of the object.\n\nFinally, styles can be applied to your nodes, comments and links as either temporary or permanent styles by specifying the `temporary` boolean in the API methods. A temporary style is just applied for the duration of the session and are not persisted. You should use `temporary=true` styles that represent transient attributes of an object that should not be persisted in the pipelineFlow document. Use `temporary=false` styles for styles that you want to persist in the pipelineFlow document.","type":"Mdx","contentDigest":"d6baeb76b4e86bc444bdc8f925f476d8","owner":"gatsby-plugin-mdx","counter":425},"frontmatter":{"title":"Style spec","description":"Style spec","tabs":["Canvas controller API","Style spec","Decorator spec","API Object structure","Notification spec"]},"exports":{},"rawBody":"---\ntitle: Style spec\ndescription: Style spec\ntabs: ['Canvas controller API', 'Style spec', 'Decorator spec', 'API Object structure', 'Notification spec']\n\n---\n\n<PageDescription>\n\nThere are multiple ways to specify the styles for the objects common-canvas displays.\n</PageDescription>\n\n\n* A class name can be provided for nodes either within the pipelineFlow document or\n* The common-canvas default styes can be overriden within your CSS or SCSS file\n\nFor more precise styling of objects the style specification object can be used to provide a number of styles to common canvas to set the inline styles on numerous elements of an object. For example, a node is made up of: a selection outline; a node body (rectangle); an image, a label etc.\n\nStyle specifications may be applied to common-canvas objects using the following <a href=\"canvas-controller-api\">Canvas Controller</a> methods:\n\n```\nsetObjectsStyle()\nsetObjectsMultiStyle()\nsetLinksStyle()\nsetLinksMultiStyle()\nsetSubdueStyle()\n\n```\n\nand may be retrieved for objects using:\n\n```\ngetNodeStyle()\ngetCommentStyle()\ngetLinkStyle()\n\n```\n\nThe style spec for a node can set the styles for all these elements in one shot. Here is a template of a style spec for a node:\n\n```\n{\n    body: { default: <css_snippet>, hover: <css_snippet> },\n    image: { default: <css_snippet> },\n    label: { default: <css_snippet> },\n    selection_outline: { default: <css_snippet> }\n}\n\n```\n\nAnd here is a real example:\n\n```\n{ \n    body: { \n        default: \"fill: coral; stroke: red;\",\n        hover: \"fill: cornflowerblue; stroke: blue;\"\n    }\n};\n\n```\n\nHere is a template for styling a comment:\n\n\n```\n{\n    body: { default: <css_snippet>, hover: <css_snippet> },\n    text: { default: <css_snippet> },\n    selection_outline: { default: <css_snippet> },\n}\n\n```\n\nAnd here is a template for styling a link:\n\n```\n{\n    line: { default: <css_snippet> , hover: <css_snippet>  }\n}\n\n```\n\n* `<css_snippet>` - is a string containing any CSS code that can be added inline to an SVG object. That means, for example, you need to use fill and stroke for colors etc It is recommended NOT to change the sizes of text fonts.\n\n\nThe CSS will be applied to the element of the object specified, either as the default inline style or as the style when the pointer hovers over the object.\n\nWhen a hover style is applied to a graphical element it is applied in addition to the default style so there is no need to repeat styles in the hover <css_snippet> because they will augment the default style.\n\nBecause styles are applied as in-line styles they will override any styles provided in your application's CSS and specified to common-canvas through the class_name field of canvas objects.\n\nIf the <css_snippet> is specified as null the current style will be removed from the specified element of the object.\n\nFinally, styles can be applied to your nodes, comments and links as either temporary or permanent styles by specifying the `temporary` boolean in the API methods. A temporary style is just applied for the duration of the session and are not persisted. You should use `temporary=true` styles that represent transient attributes of an object that should not be persisted in the pipelineFlow document. Use `temporary=false` styles for styles that you want to persist in the pipelineFlow document.","fileAbsolutePath":"/Users/dsobryan/Documents/ElyraOS/elyra-ai-site/src/pages/common-canvas/canvas-controller/style-spec.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}