{"componentChunkName":"component---src-pages-common-canvas-config-toolbar-config-mdx","path":"/common-canvas/config/toolbar-config/","result":{"pageContext":{"frontmatter":{"title":"Toolbar config","description":"Toolbar config","tabs":["Canvas config","Toolbar config","Notification config","Context menu config","Keyboard config"]},"relativePagePath":"/common-canvas/config/toolbar-config.mdx","titleType":"page","MdxNode":{"id":"dd5b9468-4b6c-5133-aaed-ba4b03abbbde","children":[],"parent":"b1ecd027-dd97-547c-b72c-01cb427dd686","internal":{"content":"---\ntitle: Toolbar config\ndescription: Toolbar config\ntabs: ['Canvas config', 'Toolbar config', 'Notification config', 'Context menu config', 'Keyboard config']\n---\n\n<AnchorLinks small>\n  <AnchorLink>action</AnchorLink>\n  <AnchorLink>label</AnchorLink>\n  <AnchorLink>enable</AnchorLink>\n  <AnchorLink>iconEnabled</AnchorLink>\n  <AnchorLink>iconDisabled</AnchorLink>\n  <AnchorLink>incLabelWithIcon</AnchorLink>\n  <AnchorLink>kind</AnchorLink>\n  <AnchorLink>tooltip</AnchorLink>\n  <AnchorLink>divider</AnchorLink>\n  <AnchorLink>Deprecated toolbar config</AnchorLink>\n  <AnchorLink>Advanced: JSX actions</AnchorLink>\n  <AnchorLink>action</AnchorLink>\n  <AnchorLink>jsx</AnchorLink>\n  <AnchorLink>tooltip</AnchorLink>\n\n</AnchorLinks>\n\n## Toolbar config object\n\nA toolbar will be displayed for common-canvas if the <a href=\"canvas-config#canvas-config-object\">canvas configuration</a>. field `enableToolbarLayout` is set to \"Top\". The toolbar config object configures which actions are shown in the canvas toolbar. If you do not specify a toolbar config, common canvas will display a default toolbar. You can optionally specify actions for the left and right side of the toolbar to override the default toolbar. Here is an example, configuration object:\n\n```    \nconst toolbarConfig = {\n        leftBar: [\n            { action: \"undo\", label: \"Undo\", enable: true },\n            { action: \"redo\", label: \"Redo\", enable: true },\n            { divider: true },\n            { action: \"cut\", label: \"Cut\", enable: false },\n            { action: \"copy\", label: \"Copy\", enable: false },\n            { action: \"paste\", label: \"Paste\", enable: false },\n            { divider: true },\n            { action: \"createAutoComment\", label: \"Add Comment\", enable: true },\n            { action: \"deleteSelectedObjects\", label: \"Delete\", enable: true },\n            { action: \"arrangeHorizontally\", label: \"Arrange Horizontally\", enable: true }\n        ],\n        rightBar: [\n            { action: \"stop\", label: \"Stop Execution\", enable: false },\n            { divider: true },\n            { action: \"run\", label: \"Run Pipeline\", enable: false }\n        ]\n    };\n```\n\nIf you provide the `leftBar` field but not the `rightBar` field, common-canvas will automatically populate the right side of the toolbar with zoom-in, zoom-out, and zoom-to-fit actions. To suppress these right side actions, specify the `rightBar` field as an empty array.\n\nThere is no need to specify either a palette action or a notification panel action. These will automatically be added to your toolbar:\n* A palette action will be added to the left side of the toolbar if the `enablePaletteLayout` field is set to either \"Flyout\" (the default) or \"Modal\" in the <a href=\"/canvas-config#canvas-config-object\">canvas configuration</a>.\n\n* A notification panel action will be added to the right side of the toolbar if a notification configuration object is specified to the <a href=\"/common-canvas/canvas-documentation\"> CommonCanvas react object</a>.\n\nThe toolbar will display the objects in the same order they are defined in the arrays.\n\nHere is an example of an action object which must contain an `action` field as a minimum.\n\n```\n{\n    action: \"run\", \n    label: \"Run\", \n    enable: true,\n    iconEnabled: \"/image/myOwnEnabledIcon.svg\",\n    iconDisabled: \"/image/myOwnDisabledIcon.svg\",\n    incLabelWithIcon: \"before\",\n    kind: \"primary\",\n    tooltip: \"Run the flow\"\n}\n```\n\n### action \nA unique identifier and the name of the action to be performed. This action name will be passed in the `data` parameter of the editActionHandler callback method so you can detect when the user clicks an action in the toolbar. The following actions will have default icons available so you don't need to specify `iconEnabled` or `iconDisabled` with them: `stop`, `run`, `undo`, `redo`, `cut`, `copy`, `paste`, `createAutoComment`, `deleteSelectedObjects`, `arrangeHorizontally`, `arrangeVertically`, `zoomIn`, `zoomOut`, and `zoomToFit`. If you are using the recommended internal object (`enableInternalObjectModel` canvas config field is set to true--_(the default_) these built in actions will be automatically handled by common-canvas. So for example, if the `deleteSelectedObjects` action (shown as a trash can) is clicked any selected objects will be deleted from the internal object model. Disablement of these built in actions is also handled by common-canvas so, for example, when no canvas objects are selected the `deleteSelectedObjects` action (trash can icon) will be automatically disabled.\n\n### label\nThe Tooltip label to display (and optionally the text to display next to the icon if `incLabelWithIcon` is specified).\n\n### enable\nIcon will have hover effect and is clickable when set to true. If false, icon will be disabled and unclickable. If not set, it will default to disabled (enable: false)\n\n### iconEnabled\nSpecifies the icon to display when `enable` is true. It can be either:\n* A string containing the path to a custom SVG file to display\n* A JSX expression, for example (`<Edit32 />`) where Edit32 is an imported icon. It is recommended to only pass very simple JSX expressions.\n\n### iconDisabled\nSpecifies the icon to display when `enable` is false. If iconDisabled is not specified iconEnabled will be used instead. It can be either:\n* A string containing the path to a custom SVG file to display\n* A JSX expression, for example (`<Edit32 />`) where Edit32 is an imported icon. It is recommended to only pass very simple JSX expressions.\n\n### incLabelWithIcon\nCan be set to \"none\", \"before\" or \"after\". The default is \"none\". This field specifies whether the label should be displayed in the toolbar with the icon and if so, where it is displayed with respect to the icon.\n\n### kind\nCan be set to \"default\", \"primary\", \"danger\", \"secondary\", \"tertiary\" or \"ghost\". The default it \"default\". These give the action the same styling as the equivalent kind's of <a href=\"https://carbondesignsystem.com/components/button/usage#button-types\">buttons in the carbon library</a>.\n\n### tooltip\nA string or JSX object. The tooltip that will be displayed for the action. If this is not provided the label will be displayed as the tooltip instead.\n\nYou can add dividers to separate groups of actions from other actions. This is displayed as a thin gray line. The divider object has one attribute:\n\n```\n    { \n       divider: true\n    }\n\n```\n\n### divider\nTo show a divider in the toolbar, add an object with divider attribute set to true.\n\n\n### Deprecated toolbar config\n\nThe old toolbar configuration is still supported for now (but is deprecated). This allows the config to be provided as an array that defines just the left side of the toolbar. The right side will always show the zoom actions (zoomIn, zoomOut, zoomToFit) and a notifications panel icon (if a notification configuration object is provided in the CommonCanvas react object). These right side actions will always show on the right-hand side of the toolbar and are handled internally by the canvas. The entries in the array follow the same definition as described above. Note: there is no need to provide a palette action in the array because a palette icon and following divider will automatically be added to the toolbar when a palette is specified for the canvas.\n\nAn example of the toolbar config array should look like this:\n\n```\n    const toolbarConfig = [\n       { action: \"stop\", label: \"Stop Execution\", enable: false },\n       { action: \"run\", label: \"Run Pipeline\", enable: false },\n       { action: \"undo\", label: \"Undo\", enable: true },\n       { action: \"redo\", label: \"Redo\", enable: true },\n       { action: \"cut\", label: \"Cut\", enable: false },\n       { action: \"copy\", label: \"Copy\", enable: false },\n       { action: \"paste\", label: \"Paste\", enable: false },\n       { action: \"createAutoComment\", label: \"Add Comment\", enable: true },\n       { action: \"deleteSelectedObjects\", label: \"Delete\", enable: true },\n       { action: \"arrangeHorizontally\", label: \"Arrange Horizontally\", enable: true }\n    ];\n\n```\n\n### Advanced: JSX actions\n\nRegular toolbar buttons, explained above, are displayed as set of Carbon `Button`s. If you **don't** want your content wrappered in a button, you can provide your own JSX to display as an action in the toolbar. Be aware however that, because of the way the toolbar is designed, there are restrictions on what the toolbar can do to display your JSX. For example, it cannot display anything with a height greater than the toolbar height.\n\nIf you provide your own JSX object it is displayed in a simple `div` in the toolbar. Some attributes are applied to the `div` to allow the action to work correctly within the toolbar - these cannot be changed. You are responsible for styling your JSX object to get it to appear the way you want.\n\nAlso be aware that, if the width of the toolbar reduces (maybe by the user sizing the page) your action may get moved into the overflow menu. It is also your responsibility to style the button so it appears as you want in the overflow menu as well as the toolbar.\n\nThe JSX can be provided in the `jsx` field. Here is an example. The only other fields that are recognized with the `jsx` field are `action` and `tooltip`, all other fields will be ignored.\n\n\n```\n    { \n       action: \"custom-loading\",\n       jsx: (<div style={{ padding: \"0 11px\" }}><InlineLoading status=\"active\" description=\"Loading...\" /></div>),\n       tooltip: \"Loading the thing you wanted.\"\n    }\n```\n\n\n\n### action\nA unique identifier and the name of the action to be performed.\n\n### jsx\nA JSX object. This will be displayed as the action in the toolbar.\n\n### tooltip\nA string or JSX object. This will be displayed as the tooltip for the action in the toolbar. If tooltip is omitted no tooltip will be added to your action. If tooltip is specified the jsx will be inside a tooltip div which is in the toolbar div mentioned above.\n\n\n","type":"Mdx","contentDigest":"a629e61fdaf8b6203c654f0b840edd8a","owner":"gatsby-plugin-mdx","counter":425},"frontmatter":{"title":"Toolbar config","description":"Toolbar config","tabs":["Canvas config","Toolbar config","Notification config","Context menu config","Keyboard config"]},"exports":{},"rawBody":"---\ntitle: Toolbar config\ndescription: Toolbar config\ntabs: ['Canvas config', 'Toolbar config', 'Notification config', 'Context menu config', 'Keyboard config']\n---\n\n<AnchorLinks small>\n  <AnchorLink>action</AnchorLink>\n  <AnchorLink>label</AnchorLink>\n  <AnchorLink>enable</AnchorLink>\n  <AnchorLink>iconEnabled</AnchorLink>\n  <AnchorLink>iconDisabled</AnchorLink>\n  <AnchorLink>incLabelWithIcon</AnchorLink>\n  <AnchorLink>kind</AnchorLink>\n  <AnchorLink>tooltip</AnchorLink>\n  <AnchorLink>divider</AnchorLink>\n  <AnchorLink>Deprecated toolbar config</AnchorLink>\n  <AnchorLink>Advanced: JSX actions</AnchorLink>\n  <AnchorLink>action</AnchorLink>\n  <AnchorLink>jsx</AnchorLink>\n  <AnchorLink>tooltip</AnchorLink>\n\n</AnchorLinks>\n\n## Toolbar config object\n\nA toolbar will be displayed for common-canvas if the <a href=\"canvas-config#canvas-config-object\">canvas configuration</a>. field `enableToolbarLayout` is set to \"Top\". The toolbar config object configures which actions are shown in the canvas toolbar. If you do not specify a toolbar config, common canvas will display a default toolbar. You can optionally specify actions for the left and right side of the toolbar to override the default toolbar. Here is an example, configuration object:\n\n```    \nconst toolbarConfig = {\n        leftBar: [\n            { action: \"undo\", label: \"Undo\", enable: true },\n            { action: \"redo\", label: \"Redo\", enable: true },\n            { divider: true },\n            { action: \"cut\", label: \"Cut\", enable: false },\n            { action: \"copy\", label: \"Copy\", enable: false },\n            { action: \"paste\", label: \"Paste\", enable: false },\n            { divider: true },\n            { action: \"createAutoComment\", label: \"Add Comment\", enable: true },\n            { action: \"deleteSelectedObjects\", label: \"Delete\", enable: true },\n            { action: \"arrangeHorizontally\", label: \"Arrange Horizontally\", enable: true }\n        ],\n        rightBar: [\n            { action: \"stop\", label: \"Stop Execution\", enable: false },\n            { divider: true },\n            { action: \"run\", label: \"Run Pipeline\", enable: false }\n        ]\n    };\n```\n\nIf you provide the `leftBar` field but not the `rightBar` field, common-canvas will automatically populate the right side of the toolbar with zoom-in, zoom-out, and zoom-to-fit actions. To suppress these right side actions, specify the `rightBar` field as an empty array.\n\nThere is no need to specify either a palette action or a notification panel action. These will automatically be added to your toolbar:\n* A palette action will be added to the left side of the toolbar if the `enablePaletteLayout` field is set to either \"Flyout\" (the default) or \"Modal\" in the <a href=\"/canvas-config#canvas-config-object\">canvas configuration</a>.\n\n* A notification panel action will be added to the right side of the toolbar if a notification configuration object is specified to the <a href=\"/common-canvas/canvas-documentation\"> CommonCanvas react object</a>.\n\nThe toolbar will display the objects in the same order they are defined in the arrays.\n\nHere is an example of an action object which must contain an `action` field as a minimum.\n\n```\n{\n    action: \"run\", \n    label: \"Run\", \n    enable: true,\n    iconEnabled: \"/image/myOwnEnabledIcon.svg\",\n    iconDisabled: \"/image/myOwnDisabledIcon.svg\",\n    incLabelWithIcon: \"before\",\n    kind: \"primary\",\n    tooltip: \"Run the flow\"\n}\n```\n\n### action \nA unique identifier and the name of the action to be performed. This action name will be passed in the `data` parameter of the editActionHandler callback method so you can detect when the user clicks an action in the toolbar. The following actions will have default icons available so you don't need to specify `iconEnabled` or `iconDisabled` with them: `stop`, `run`, `undo`, `redo`, `cut`, `copy`, `paste`, `createAutoComment`, `deleteSelectedObjects`, `arrangeHorizontally`, `arrangeVertically`, `zoomIn`, `zoomOut`, and `zoomToFit`. If you are using the recommended internal object (`enableInternalObjectModel` canvas config field is set to true--_(the default_) these built in actions will be automatically handled by common-canvas. So for example, if the `deleteSelectedObjects` action (shown as a trash can) is clicked any selected objects will be deleted from the internal object model. Disablement of these built in actions is also handled by common-canvas so, for example, when no canvas objects are selected the `deleteSelectedObjects` action (trash can icon) will be automatically disabled.\n\n### label\nThe Tooltip label to display (and optionally the text to display next to the icon if `incLabelWithIcon` is specified).\n\n### enable\nIcon will have hover effect and is clickable when set to true. If false, icon will be disabled and unclickable. If not set, it will default to disabled (enable: false)\n\n### iconEnabled\nSpecifies the icon to display when `enable` is true. It can be either:\n* A string containing the path to a custom SVG file to display\n* A JSX expression, for example (`<Edit32 />`) where Edit32 is an imported icon. It is recommended to only pass very simple JSX expressions.\n\n### iconDisabled\nSpecifies the icon to display when `enable` is false. If iconDisabled is not specified iconEnabled will be used instead. It can be either:\n* A string containing the path to a custom SVG file to display\n* A JSX expression, for example (`<Edit32 />`) where Edit32 is an imported icon. It is recommended to only pass very simple JSX expressions.\n\n### incLabelWithIcon\nCan be set to \"none\", \"before\" or \"after\". The default is \"none\". This field specifies whether the label should be displayed in the toolbar with the icon and if so, where it is displayed with respect to the icon.\n\n### kind\nCan be set to \"default\", \"primary\", \"danger\", \"secondary\", \"tertiary\" or \"ghost\". The default it \"default\". These give the action the same styling as the equivalent kind's of <a href=\"https://carbondesignsystem.com/components/button/usage#button-types\">buttons in the carbon library</a>.\n\n### tooltip\nA string or JSX object. The tooltip that will be displayed for the action. If this is not provided the label will be displayed as the tooltip instead.\n\nYou can add dividers to separate groups of actions from other actions. This is displayed as a thin gray line. The divider object has one attribute:\n\n```\n    { \n       divider: true\n    }\n\n```\n\n### divider\nTo show a divider in the toolbar, add an object with divider attribute set to true.\n\n\n### Deprecated toolbar config\n\nThe old toolbar configuration is still supported for now (but is deprecated). This allows the config to be provided as an array that defines just the left side of the toolbar. The right side will always show the zoom actions (zoomIn, zoomOut, zoomToFit) and a notifications panel icon (if a notification configuration object is provided in the CommonCanvas react object). These right side actions will always show on the right-hand side of the toolbar and are handled internally by the canvas. The entries in the array follow the same definition as described above. Note: there is no need to provide a palette action in the array because a palette icon and following divider will automatically be added to the toolbar when a palette is specified for the canvas.\n\nAn example of the toolbar config array should look like this:\n\n```\n    const toolbarConfig = [\n       { action: \"stop\", label: \"Stop Execution\", enable: false },\n       { action: \"run\", label: \"Run Pipeline\", enable: false },\n       { action: \"undo\", label: \"Undo\", enable: true },\n       { action: \"redo\", label: \"Redo\", enable: true },\n       { action: \"cut\", label: \"Cut\", enable: false },\n       { action: \"copy\", label: \"Copy\", enable: false },\n       { action: \"paste\", label: \"Paste\", enable: false },\n       { action: \"createAutoComment\", label: \"Add Comment\", enable: true },\n       { action: \"deleteSelectedObjects\", label: \"Delete\", enable: true },\n       { action: \"arrangeHorizontally\", label: \"Arrange Horizontally\", enable: true }\n    ];\n\n```\n\n### Advanced: JSX actions\n\nRegular toolbar buttons, explained above, are displayed as set of Carbon `Button`s. If you **don't** want your content wrappered in a button, you can provide your own JSX to display as an action in the toolbar. Be aware however that, because of the way the toolbar is designed, there are restrictions on what the toolbar can do to display your JSX. For example, it cannot display anything with a height greater than the toolbar height.\n\nIf you provide your own JSX object it is displayed in a simple `div` in the toolbar. Some attributes are applied to the `div` to allow the action to work correctly within the toolbar - these cannot be changed. You are responsible for styling your JSX object to get it to appear the way you want.\n\nAlso be aware that, if the width of the toolbar reduces (maybe by the user sizing the page) your action may get moved into the overflow menu. It is also your responsibility to style the button so it appears as you want in the overflow menu as well as the toolbar.\n\nThe JSX can be provided in the `jsx` field. Here is an example. The only other fields that are recognized with the `jsx` field are `action` and `tooltip`, all other fields will be ignored.\n\n\n```\n    { \n       action: \"custom-loading\",\n       jsx: (<div style={{ padding: \"0 11px\" }}><InlineLoading status=\"active\" description=\"Loading...\" /></div>),\n       tooltip: \"Loading the thing you wanted.\"\n    }\n```\n\n\n\n### action\nA unique identifier and the name of the action to be performed.\n\n### jsx\nA JSX object. This will be displayed as the action in the toolbar.\n\n### tooltip\nA string or JSX object. This will be displayed as the tooltip for the action in the toolbar. If tooltip is omitted no tooltip will be added to your action. If tooltip is specified the jsx will be inside a tooltip div which is in the toolbar div mentioned above.\n\n\n","fileAbsolutePath":"/Users/dsobryan/Documents/ElyraOS/elyra-ai-site/src/pages/common-canvas/config/toolbar-config.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}