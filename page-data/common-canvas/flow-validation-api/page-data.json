{"componentChunkName":"component---src-pages-common-canvas-flow-validation-api-mdx","path":"/common-canvas/flow-validation-api/","result":{"pageContext":{"frontmatter":{"title":"Canvas components","description":"Canvas components"},"relativePagePath":"/common-canvas/flow-validation-api.mdx","titleType":"page","MdxNode":{"id":"5e69bd7c-fea2-559a-98e9-b93e1a39ba50","children":[],"parent":"020384de-6947-5759-89ec-e9aa4762e6ee","internal":{"content":"---\ntitle: Canvas components\ndescription: Canvas components\n---\n\n\n<PageDescription>\n\nCommon canvas displays a flow of data operations as nodes and links which the user can create and edit to get the flow they want. These visual flows of data operations are translated into data processing steps performed by a back-end server. \n</PageDescription>\n\n\n To use the Flow Validation API import the FlowValidation object fro common-canvas: `import { FlowValidation } from \"@elyra/canvas\";`\n\n Then call the API on the object, for example: `FlowValidation.validateFlow( ... );`\n\n The Flow Validation object provides the following API:\n\n``` \nvalidateFlow(canvasController, parameterDataCallback, setNodeMessagesCallback, includeMsgTypes)\n\tcanvasController - an instance of the canvas controller \n\tparameterDataCallback – function to get the parameter data or form data for a node\n\tsetNodeMessagesCallback – function to set the validation messages for a node. (optional)\n        includeMsgTypes - array[strings] Return invalid only if messages are found of types contained \n                      in the array. If not specified then any message type causes invalid return. (optional)\n        return - boolean If flow is valid returns true, otherwise returns false.\n        ```\n\nWhere the two callbacks are defined as follows:\n\n```parameterDataCallback(nodeId)\n\tnodeId – string node Id.\n\tfunction must return this object:\n\t{\n\t\ttype: “parameterDef” | “form”,\n\t\tdata: Json_object\n\t}\n\n/* The setNodeMessagesCallback is optional and only useful if not using internal object model.\nsetNodeMessagesCallback(nodeId, messages)\n\tnodeId – string node Id.\n\tan array of message objects generated from the validation of the node.\n```\n\nThe validateFlow() API will traverse the current flow and for each node invoke the parameterDataCallback() to get with a form data JSON or a parameterDef JSON. It will validate the JSON for the node and store any messages in the node objects within the model. The setNodeMessagesCallback() function will be called with all the messages generated for the node. This is only useful if the application is not using the internal object model. The format of the message object is described in <a href=\"https://github.com/elyra-ai/wdp-pipeline-schemas/blob/master/common-pipeline/pipeline-flow/pipeline-flow-ui-v1-schema.json\">Pipeline Flow UI schema</a>.\n\nHere is an example of using the FlowValidation API to validate a flow on opening:\n\n```import { CanvasController, FlowValidation } from \"@elyra/canvas\";\n\ngetNodeForm(nodeId) {\n    const parameterDef = getParameterDefJSON(nodeId);\n    return { type: \"parameterDef\", data: parameterDef };\n}\n\nsetNodeMessages(nodeId, messages) {\n    // code to persist messages in a store in addition to the internal model.\n}\n\nopenCanvas(canvasJson) {\n    const canvasController = new CanvasController();\n    canvasController.setPipelineFlow(canvasJson);\n    FlowValidation.validateFlow(canvasController, this.getNodeForm, this.setNodeMessages);\n}\n\n```","type":"Mdx","contentDigest":"8c71a6f12bac9a4038bf86365fe92a82","owner":"gatsby-plugin-mdx","counter":424},"frontmatter":{"title":"Canvas components","description":"Canvas components"},"exports":{},"rawBody":"---\ntitle: Canvas components\ndescription: Canvas components\n---\n\n\n<PageDescription>\n\nCommon canvas displays a flow of data operations as nodes and links which the user can create and edit to get the flow they want. These visual flows of data operations are translated into data processing steps performed by a back-end server. \n</PageDescription>\n\n\n To use the Flow Validation API import the FlowValidation object fro common-canvas: `import { FlowValidation } from \"@elyra/canvas\";`\n\n Then call the API on the object, for example: `FlowValidation.validateFlow( ... );`\n\n The Flow Validation object provides the following API:\n\n``` \nvalidateFlow(canvasController, parameterDataCallback, setNodeMessagesCallback, includeMsgTypes)\n\tcanvasController - an instance of the canvas controller \n\tparameterDataCallback – function to get the parameter data or form data for a node\n\tsetNodeMessagesCallback – function to set the validation messages for a node. (optional)\n        includeMsgTypes - array[strings] Return invalid only if messages are found of types contained \n                      in the array. If not specified then any message type causes invalid return. (optional)\n        return - boolean If flow is valid returns true, otherwise returns false.\n        ```\n\nWhere the two callbacks are defined as follows:\n\n```parameterDataCallback(nodeId)\n\tnodeId – string node Id.\n\tfunction must return this object:\n\t{\n\t\ttype: “parameterDef” | “form”,\n\t\tdata: Json_object\n\t}\n\n/* The setNodeMessagesCallback is optional and only useful if not using internal object model.\nsetNodeMessagesCallback(nodeId, messages)\n\tnodeId – string node Id.\n\tan array of message objects generated from the validation of the node.\n```\n\nThe validateFlow() API will traverse the current flow and for each node invoke the parameterDataCallback() to get with a form data JSON or a parameterDef JSON. It will validate the JSON for the node and store any messages in the node objects within the model. The setNodeMessagesCallback() function will be called with all the messages generated for the node. This is only useful if the application is not using the internal object model. The format of the message object is described in <a href=\"https://github.com/elyra-ai/wdp-pipeline-schemas/blob/master/common-pipeline/pipeline-flow/pipeline-flow-ui-v1-schema.json\">Pipeline Flow UI schema</a>.\n\nHere is an example of using the FlowValidation API to validate a flow on opening:\n\n```import { CanvasController, FlowValidation } from \"@elyra/canvas\";\n\ngetNodeForm(nodeId) {\n    const parameterDef = getParameterDefJSON(nodeId);\n    return { type: \"parameterDef\", data: parameterDef };\n}\n\nsetNodeMessages(nodeId, messages) {\n    // code to persist messages in a store in addition to the internal model.\n}\n\nopenCanvas(canvasJson) {\n    const canvasController = new CanvasController();\n    canvasController.setPipelineFlow(canvasJson);\n    FlowValidation.validateFlow(canvasController, this.getNodeForm, this.setNodeMessages);\n}\n\n```","fileAbsolutePath":"/Users/dsobryan/Documents/ElyraOS/elyra-ai-site/src/pages/common-canvas/flow-validation-api.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}