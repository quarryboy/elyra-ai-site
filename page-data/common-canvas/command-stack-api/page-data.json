{"componentChunkName":"component---src-pages-common-canvas-command-stack-api-mdx","path":"/common-canvas/command-stack-api/","result":{"pageContext":{"frontmatter":{"title":"Command stack","description":"Command stack"},"relativePagePath":"/common-canvas/command-stack-api.mdx","titleType":"page","MdxNode":{"id":"a3dd8121-1ca3-59f3-a1ad-32a38f36f8bd","children":[],"parent":"1ab91122-1f1b-5c3b-9818-892116a42874","internal":{"content":"---\ntitle: Command stack\ndescription: Command stack\n---\n\n\n<PageDescription>\n\nThe CommandStack is a JavaScript class that provides the functionality to support do/undo/redo of commands. It maintains an internal stack of commands with a cursor that moves up and down when commands are undone or redone. Commands are also Javascript classes that implement a simple interface.\n\n</PageDescription>\n\n\n\nThe CommandStack API allows application code to programmatically add commands to the command stack. You can get the Command Stack by calling the `CanvasController.getCommandStack()` method. The CommandStack API provides the following methods:\n\n```\n   do(command) - push the command onto the command stack and then invoke command.do()\n   undo() - pop a command from the command stack and then invoke command.undo()\n   redo() - push last undo command onto the command stack and then invoke command.redo()\n   canUndo() - returns true if there is a command on the command stack.\n   canRedo() - returns true if there is an undo command that can be redo.\n   clearCommandStack() \n   getUndoCommand() - returns the next command to be undone or null.\n   getRedoCommand() - returns the next command to be redone or null.\n\n```\n\nEach commands that is added to the command stack is a Javascript class that need to implement these methods:\n\n```\n   constructor()\n   do()\n   undo()\n   redo()\n\n```\n\n#### constructor()\ninitial setup do() - Performs all actions necessary to execute the command undo() - Performs all actions necessary to reverse the actions performed in do() redo() - Performs all actions necessary to re-execute the command. For some commands this is the same as do() but others it is different.\n\nHere is some sample code that shows how a create-node command might be written:\n\n```\n  export default class CreateNodeAction extends Action {\n\tconstructor(data) {\n\t   super(data);\n\t   this.newNode = createNode(data);\n\t}\n\n\tdo() {\n\t   ObjectModel.addNode(this.newNode);\n\t}\n\n\tundo() {\n\t   ObjectModel.removeNode(this.newNode.id);\n\t}\n\n\tredo() {\n\t   ObjectModel.addNode(this.newNode);\n\t}\n  }\n\n```\n\nHere is an example of using the CommandStack API to create a command action and push it on the stack:\n\n```\n   const command = new CreateNodeAction(data);\n   CommandStack.do(command);\n\n```\n\nWhen using CommonCanvas, the canvas-controller creates an instance of the command stack. CommonCanvas provides command objects for each of the commands that are performed by the user, such as: create node, delete comment, link nodes together, etc. Common canvas also provides undo/redo options in its default context menu, on the toolbar and via keystrokes ctrl+z (undo) and ctrl+shift+z (redo). You can implement your own undo and redo UI if required using the API.\n","type":"Mdx","contentDigest":"99ef3bdf7e21a3c95ba36f1811a989f6","owner":"gatsby-plugin-mdx","counter":409},"frontmatter":{"title":"Command stack","description":"Command stack"},"exports":{},"rawBody":"---\ntitle: Command stack\ndescription: Command stack\n---\n\n\n<PageDescription>\n\nThe CommandStack is a JavaScript class that provides the functionality to support do/undo/redo of commands. It maintains an internal stack of commands with a cursor that moves up and down when commands are undone or redone. Commands are also Javascript classes that implement a simple interface.\n\n</PageDescription>\n\n\n\nThe CommandStack API allows application code to programmatically add commands to the command stack. You can get the Command Stack by calling the `CanvasController.getCommandStack()` method. The CommandStack API provides the following methods:\n\n```\n   do(command) - push the command onto the command stack and then invoke command.do()\n   undo() - pop a command from the command stack and then invoke command.undo()\n   redo() - push last undo command onto the command stack and then invoke command.redo()\n   canUndo() - returns true if there is a command on the command stack.\n   canRedo() - returns true if there is an undo command that can be redo.\n   clearCommandStack() \n   getUndoCommand() - returns the next command to be undone or null.\n   getRedoCommand() - returns the next command to be redone or null.\n\n```\n\nEach commands that is added to the command stack is a Javascript class that need to implement these methods:\n\n```\n   constructor()\n   do()\n   undo()\n   redo()\n\n```\n\n#### constructor()\ninitial setup do() - Performs all actions necessary to execute the command undo() - Performs all actions necessary to reverse the actions performed in do() redo() - Performs all actions necessary to re-execute the command. For some commands this is the same as do() but others it is different.\n\nHere is some sample code that shows how a create-node command might be written:\n\n```\n  export default class CreateNodeAction extends Action {\n\tconstructor(data) {\n\t   super(data);\n\t   this.newNode = createNode(data);\n\t}\n\n\tdo() {\n\t   ObjectModel.addNode(this.newNode);\n\t}\n\n\tundo() {\n\t   ObjectModel.removeNode(this.newNode.id);\n\t}\n\n\tredo() {\n\t   ObjectModel.addNode(this.newNode);\n\t}\n  }\n\n```\n\nHere is an example of using the CommandStack API to create a command action and push it on the stack:\n\n```\n   const command = new CreateNodeAction(data);\n   CommandStack.do(command);\n\n```\n\nWhen using CommonCanvas, the canvas-controller creates an instance of the command stack. CommonCanvas provides command objects for each of the commands that are performed by the user, such as: create node, delete comment, link nodes together, etc. Common canvas also provides undo/redo options in its default context menu, on the toolbar and via keystrokes ctrl+z (undo) and ctrl+shift+z (redo). You can implement your own undo and redo UI if required using the API.\n","fileAbsolutePath":"/Users/dsobryan/Documents/ElyraOS/elyra-ai-site/src/pages/common-canvas/command-stack-api.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}