{"componentChunkName":"component---src-pages-common-properties-controller-mdx","path":"/common-properties/controller/","result":{"pageContext":{"frontmatter":{"title":"Controller","description":"Controller"},"relativePagePath":"/common-properties/controller.mdx","titleType":"page","MdxNode":{"id":"d131a6fc-5dcd-5c04-9fea-28e57b670f7b","children":[],"parent":"f34324be-e3fd-5a55-9ae3-b13ec2931f23","internal":{"content":"---\ntitle: Controller\ndescription: Controller\n---\n\n\n\n\n\n<AnchorLinks >\n <AnchorLink>propertyId</AnchorLink>\n <AnchorLink>Property methods</AnchorLink>\n <AnchorLink>Message methods</AnchorLink>\n <AnchorLink>State methods (disable/enabled & hidden/visible)</AnchorLink>\n <AnchorLink>DatasetMetadata methods</AnchorLink>\n <AnchorLink>Row selection methods</AnchorLink>\n<AnchorLink>Validation methods</AnchorLink>\n<AnchorLink>Control methods</AnchorLink>\n<AnchorLink>General methods</AnchorLink>\n<AnchorLink>Disable move row buttons methods</AnchorLink>\n <AnchorLink>Custom panel and control methods</AnchorLink>\n<AnchorLink>maxLength for single-line and multi-line control methods</AnchorLink>\n\n\n \n</AnchorLinks>\n\n\n## propertyId\n\n```\nconst propertyId = {\n  name: {parameter name defined in operator definition},\n  row: {row in table/array}, // optional when col not set\n  col: {col in table}, // optional\n  propertyId: {propertyId of the nested structure} // optional\n}\n\n```\n\n## Property methods\n\n```\nsetPropertyValues(values)  \nupdatePropertyValue(propertyId, value) \n/* \n * options - optional object of config options where\n *   filterHiddenDisabled (boolean): when set to true, filter out data values with a state of disabled or hidden\n *   applyProperties (boolean): when set to true, will return data values in the format expected by the `applyPropertyChanges` callback. If unset or false, will return the internal format used by common properties.\n*/\ngetPropertyValue(propertyId, options)  \n/* \n * options - optional object of config options where\n *   filterHiddenDisabled (boolean): when set to true, filter out data values with a state of disabled or hidden\n *   applyProperties (boolean): when set to true, will return data values in the format expected by the `applyPropertyChanges` callback. If unset or false, will return the internal format used by common properties.\n*/\ngetPropertyValues(options)  \n\n```\n\n\n## Message methods\n\n```\n/*\n * Returns current list of error messages\n * @filteredPipeline (boolean) optional\n * when filteredPipeline=true returns enabled/visible control messages and only 1 per control.\n */\ngetErrorMessages(filteredPipeline)\ngetErrorMessage(propertyId)  \nsetErrorMessages(messages)  \nupdateErrorMessage(propertyId, message) \n\n```\n\n\n## State methods (disable/enabled & hidden/visible)\n\n```\ngetControlState(propertyId)\ngetControlStates()\nsetControlStates(states)  \n\n/*\n * @propertyId - see above\n * @state - valid values are \"enabled\", \"disabled\", \"visible\", \"hidden\"\n */\nupdateControlState(propertyId, state) \n\n```\n\n\n\n## DatasetMetadata methods\n\n```\ngetDatasetMetadata()\n\n/*\n * @datasetMetadata - see [schema](https://github.com/elyra-ai/pipeline-schemas/blob/master/common-pipeline/datarecord-metadata/datarecord-metadata-v1-schema.json)\n */ \nsetDatasetMetadata(datasetMetadata)\n\n```\n\n## Row selection methods\n\n```\n/*\n * Returns table row selection indices as an array of integers.\n * @propertyId - see above\n */\ngetSelectedRows(propertyId)\n\n/*\n * Updates table row selections for the given table control.\n * @propertyId - see above\n * @selection - A zero-based array of integer selection indices\n */\nupdateSelectedRows(propertyId, selection) \n\n/*\n * Clears selected table rows for the given table.\n * @propertyId - see above\n * If the propertyId is omitted all table row selections are cleared\n */\nclearSelectedRows(propertyId)\n\n/*\n * Adds a row selection listener for a table or list.\n * @propertyId - see above\n * @listener - callback function for when a selection is made in the table or list\n */\naddRowSelectionListener(propertyId, listener)\n\n/*\n * Removes the row selection listener from a table or list.\n * @propertyId - see above\n */\nremoveRowSelectionListener(propertyId)\n\n```\n\n## Validation methods\n\n```\n\n/*\n * Runs validation conditions on all controls\n */\nvalidatePropertiesValues()\n\n\n\n/*\n * Validates a specific propertyId\n * @propertyId - see above\n */\nvalidateInput(propertyId)\n\n```\n\n\n## Control methods\n\n```\n/* \n * Update the enum values for a given control.  Used when enum values aren't static\n * @propertyId - see above\n * @valuesObj (array) [{ value: <string, number, boolean> , label: \"<string>\" }]\n */\nupdateControlEnumValues(propertyId, valuesObj)\n\n```\n\n\n\n\n\n## General methods\n\n```\n/*\n* Returns the current size of the RHS flyout.\n*/\ngetEditorSize()\n\n\n```\n\n\n\n## Disable move row buttons methods\n\n```\n/**\n * Disable table row move buttons for all propertyIds in given array\n * @param propertyIds Array of propertyIds\n *\n */\nsetDisableRowMoveButtons(propertyIds)\n/**\n* Returns array of propertyIds for which row move buttons will be disabled\n*\t@return Array of propertyIds\n*/\ngetDisableRowMoveButtons()\n/**\n* Check if row move buttons should be disabled for given propertyId\n* @param propertyId  The unique property identifier\n* @return boolean\n*/\nisDisableRowMoveButtons(propertyId)\n\n```\n\n\n\n## Custom panel and control methods\n\n```\n/* \n * Only used in custom panel to allow for custom property summary values to be displayed\n * Displays the value set in propertiesReducer for that parameter\n * @propertyId - see above\n * @label (string)\n * @inSummary (boolean)\n */\nsetControlInSummary(propertyId, label, inSummary)\n\n/* \n * Sets the content to be displayed in the summaryPanel for a customPanel property.\n * The summary panel will directly display the content.\n * @propertyId - see above\n * @content = { value: <object> , label: \"<value>\" }\n */\nupdateCustPropSumPanelValue(propertyId, content)\n\n/* \n * Returns a standard control that can then be used in a customPanel.\n * @propertyId - See above\n * @paramDef - Follows the format of https://github.com/elyra-ai/pipeline-schemas/blob/master/common-canvas/parameter-defs/parameter-defs-v1-schema.json).  titleDefinition, current_parameters, conditions, dataset_metadata are ignored and are optional.   \n * @parameter - This is the parameter from the paramDef to create the control for.  \n */\ncreateControl(propertyId, paramDef, parameter)\n\n/* \n * Returns the translated text for a control given a resource key. \n * Users should be able to use the values from resources that has been uploaded as part of paramDef.\n * @key - Resource key\n * @value - Default value returned when no resource or key has been found.\n */\ngetResource(key, value)\n\n\n```\n\n\n## maxLength for single-line and multi-line control methods\n\n\n```\n/*\n * Returns the maximum characters allowed for multi-line string controls\n * Default value is 1024\n */\ngetMaxLengthForMultiLineControls()\n\n/*\n * Returns the maximum characters allowed for single-line string controls\n * Default value is 128\n */\ngetMaxLengthForSingleLineControls()\n\n```\n","type":"Mdx","contentDigest":"8bb4dd2f4a7ce1286b4e03522703184f","owner":"gatsby-plugin-mdx","counter":401},"frontmatter":{"title":"Controller","description":"Controller"},"exports":{},"rawBody":"---\ntitle: Controller\ndescription: Controller\n---\n\n\n\n\n\n<AnchorLinks >\n <AnchorLink>propertyId</AnchorLink>\n <AnchorLink>Property methods</AnchorLink>\n <AnchorLink>Message methods</AnchorLink>\n <AnchorLink>State methods (disable/enabled & hidden/visible)</AnchorLink>\n <AnchorLink>DatasetMetadata methods</AnchorLink>\n <AnchorLink>Row selection methods</AnchorLink>\n<AnchorLink>Validation methods</AnchorLink>\n<AnchorLink>Control methods</AnchorLink>\n<AnchorLink>General methods</AnchorLink>\n<AnchorLink>Disable move row buttons methods</AnchorLink>\n <AnchorLink>Custom panel and control methods</AnchorLink>\n<AnchorLink>maxLength for single-line and multi-line control methods</AnchorLink>\n\n\n \n</AnchorLinks>\n\n\n## propertyId\n\n```\nconst propertyId = {\n  name: {parameter name defined in operator definition},\n  row: {row in table/array}, // optional when col not set\n  col: {col in table}, // optional\n  propertyId: {propertyId of the nested structure} // optional\n}\n\n```\n\n## Property methods\n\n```\nsetPropertyValues(values)  \nupdatePropertyValue(propertyId, value) \n/* \n * options - optional object of config options where\n *   filterHiddenDisabled (boolean): when set to true, filter out data values with a state of disabled or hidden\n *   applyProperties (boolean): when set to true, will return data values in the format expected by the `applyPropertyChanges` callback. If unset or false, will return the internal format used by common properties.\n*/\ngetPropertyValue(propertyId, options)  \n/* \n * options - optional object of config options where\n *   filterHiddenDisabled (boolean): when set to true, filter out data values with a state of disabled or hidden\n *   applyProperties (boolean): when set to true, will return data values in the format expected by the `applyPropertyChanges` callback. If unset or false, will return the internal format used by common properties.\n*/\ngetPropertyValues(options)  \n\n```\n\n\n## Message methods\n\n```\n/*\n * Returns current list of error messages\n * @filteredPipeline (boolean) optional\n * when filteredPipeline=true returns enabled/visible control messages and only 1 per control.\n */\ngetErrorMessages(filteredPipeline)\ngetErrorMessage(propertyId)  \nsetErrorMessages(messages)  \nupdateErrorMessage(propertyId, message) \n\n```\n\n\n## State methods (disable/enabled & hidden/visible)\n\n```\ngetControlState(propertyId)\ngetControlStates()\nsetControlStates(states)  \n\n/*\n * @propertyId - see above\n * @state - valid values are \"enabled\", \"disabled\", \"visible\", \"hidden\"\n */\nupdateControlState(propertyId, state) \n\n```\n\n\n\n## DatasetMetadata methods\n\n```\ngetDatasetMetadata()\n\n/*\n * @datasetMetadata - see [schema](https://github.com/elyra-ai/pipeline-schemas/blob/master/common-pipeline/datarecord-metadata/datarecord-metadata-v1-schema.json)\n */ \nsetDatasetMetadata(datasetMetadata)\n\n```\n\n## Row selection methods\n\n```\n/*\n * Returns table row selection indices as an array of integers.\n * @propertyId - see above\n */\ngetSelectedRows(propertyId)\n\n/*\n * Updates table row selections for the given table control.\n * @propertyId - see above\n * @selection - A zero-based array of integer selection indices\n */\nupdateSelectedRows(propertyId, selection) \n\n/*\n * Clears selected table rows for the given table.\n * @propertyId - see above\n * If the propertyId is omitted all table row selections are cleared\n */\nclearSelectedRows(propertyId)\n\n/*\n * Adds a row selection listener for a table or list.\n * @propertyId - see above\n * @listener - callback function for when a selection is made in the table or list\n */\naddRowSelectionListener(propertyId, listener)\n\n/*\n * Removes the row selection listener from a table or list.\n * @propertyId - see above\n */\nremoveRowSelectionListener(propertyId)\n\n```\n\n## Validation methods\n\n```\n\n/*\n * Runs validation conditions on all controls\n */\nvalidatePropertiesValues()\n\n\n\n/*\n * Validates a specific propertyId\n * @propertyId - see above\n */\nvalidateInput(propertyId)\n\n```\n\n\n## Control methods\n\n```\n/* \n * Update the enum values for a given control.  Used when enum values aren't static\n * @propertyId - see above\n * @valuesObj (array) [{ value: <string, number, boolean> , label: \"<string>\" }]\n */\nupdateControlEnumValues(propertyId, valuesObj)\n\n```\n\n\n\n\n\n## General methods\n\n```\n/*\n* Returns the current size of the RHS flyout.\n*/\ngetEditorSize()\n\n\n```\n\n\n\n## Disable move row buttons methods\n\n```\n/**\n * Disable table row move buttons for all propertyIds in given array\n * @param propertyIds Array of propertyIds\n *\n */\nsetDisableRowMoveButtons(propertyIds)\n/**\n* Returns array of propertyIds for which row move buttons will be disabled\n*\t@return Array of propertyIds\n*/\ngetDisableRowMoveButtons()\n/**\n* Check if row move buttons should be disabled for given propertyId\n* @param propertyId  The unique property identifier\n* @return boolean\n*/\nisDisableRowMoveButtons(propertyId)\n\n```\n\n\n\n## Custom panel and control methods\n\n```\n/* \n * Only used in custom panel to allow for custom property summary values to be displayed\n * Displays the value set in propertiesReducer for that parameter\n * @propertyId - see above\n * @label (string)\n * @inSummary (boolean)\n */\nsetControlInSummary(propertyId, label, inSummary)\n\n/* \n * Sets the content to be displayed in the summaryPanel for a customPanel property.\n * The summary panel will directly display the content.\n * @propertyId - see above\n * @content = { value: <object> , label: \"<value>\" }\n */\nupdateCustPropSumPanelValue(propertyId, content)\n\n/* \n * Returns a standard control that can then be used in a customPanel.\n * @propertyId - See above\n * @paramDef - Follows the format of https://github.com/elyra-ai/pipeline-schemas/blob/master/common-canvas/parameter-defs/parameter-defs-v1-schema.json).  titleDefinition, current_parameters, conditions, dataset_metadata are ignored and are optional.   \n * @parameter - This is the parameter from the paramDef to create the control for.  \n */\ncreateControl(propertyId, paramDef, parameter)\n\n/* \n * Returns the translated text for a control given a resource key. \n * Users should be able to use the values from resources that has been uploaded as part of paramDef.\n * @key - Resource key\n * @value - Default value returned when no resource or key has been found.\n */\ngetResource(key, value)\n\n\n```\n\n\n## maxLength for single-line and multi-line control methods\n\n\n```\n/*\n * Returns the maximum characters allowed for multi-line string controls\n * Default value is 1024\n */\ngetMaxLengthForMultiLineControls()\n\n/*\n * Returns the maximum characters allowed for single-line string controls\n * Default value is 128\n */\ngetMaxLengthForSingleLineControls()\n\n```\n","fileAbsolutePath":"/Users/dsobryan/Documents/ElyraOS/elyra-ai-site/src/pages/common-properties/controller.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}