{"componentChunkName":"component---src-pages-common-properties-custom-components-mdx","path":"/common-properties/custom-components/","result":{"pageContext":{"frontmatter":{"title":"Custom components","description":"Custom components"},"relativePagePath":"/common-properties/custom-components.mdx","titleType":"page","MdxNode":{"id":"ba7de33d-fbbc-5151-bf10-ba74b26b6ca1","children":[],"parent":"ccbc9a66-f22b-5404-b655-914282d7ca59","internal":{"content":"---\ntitle: Custom components\ndescription: Custom components\n---\n\n<PageDescription>\n\nCustom components allows applications to use custom code to drive different parts of the common-properties user interface. For some panels and controls it might be necessary to listen to different types of redux state changes to cause the panel/control to rerender.\n\n</PageDescription>\n\n\n<AnchorLinks >\n <AnchorLink>Overview</AnchorLink>\n <AnchorLink>Custom panels</AnchorLink>\n <AnchorLink>Custom controls</AnchorLink>\n <AnchorLink>Custom condition operators</AnchorLink>\n \n</AnchorLinks>\n\n\n## Overview\n\n Here is an example of a textfield listening to 3 state changes:\n\n```\nimport { connect } from \"react-redux\";\n\n// ... application code\n\nrender() {\n  const value = this.props.value; // value passed by redux as a property\n\n  // ... rest of component render code\n\n}\n\nTextfieldControl.propTypes = {\n  // ... application props\n  state: PropTypes.string, // pass in by redux\n  value: PropTypes.string, // pass in by redux\n  messageInfo: PropTypes.object // pass in by redux\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  value: ownProps.controller.getPropertyValue(ownProps.propertyId),\n  state: ownProps.controller.getControlState(ownProps.propertyId),\n  messageInfo: ownProps.controller.getErrorMessage(ownProps.propertyId)\n});\nexport default connect(mapStateToProps, null)(TextfieldControl);\n\n\n```\n## Custom panels\n\nCustom panels allow applications to create their own panels and controls that can live in the same dialogs as common-property panels and controls.\n\n#### Custom panel interface\n\n```\n// Returns the 'id' for the group defined in uihints\nstatic id()\n\nconstructor(parameters, controller, data)\n\n// Returns the content users want to display\nrenderPanel()\n\n```\n\n\n* parameters - String array of parameters set under the customPanel group in uihints\n* controller - See <a href=\"controller\">here</a> for API information.\n* data - Optional parameter. Returns values stored in `data` attribute of a group `customPanel`.\n* renderPanel() - Called on all Redux store changes:\n   * property value changes (<a href=\"controller#property-methods\">property APIs</a>)\n   * state changes (<a href=\"controller#state-methods-(disableenabled-and-hiddenvisible)\">state APIs</a>)\n   * schema changes (<a href=\"controller#datasetmetadata-methods\">schema APIs</a>)\n   * row selection changes (<a href=\"controller#row-selection-methods\">selection APIs</a>)\n   * messages changes (<a href=\"controller#message-methods\">message APIs</a>)\n\n\n#### Custom react components\n\n<Title>Example</Title>\n\n```\nrenderPanel() {\n const controlId = this.parameters[0];\n return (\n  <CustomCtrlToggle\n   key={controlId}\n   propertyId={name: controlId}\n   controller={this.controller}\n  />\n );\n}\n\n```\n\nhttps://github.com/elyra-ai/canvas/tree/master/canvas_modules/harness/src/client/components/custom-panels\n\n\n## Custom Controls\n\nCustom controls allow applications to create their own controls that can live in the same dialogs as common-property panels and controls.\n\n#### Custom control interface\n\n```\n// Returns the 'custom_control_id' for the parameter defined in uihints\nstatic id()\n\nconstructor(propertyId, controller, data, tableInfo)\n\n// Returns the content users want to display\nrenderControl()\n\n```\n\n\n * propertyId - See <a href=\"controller#common-properties-controller-api\">propertyId</a> for definition.\n * controller - See here for <a href=\"controller\">API</a> information.\n * data - Returns values stored in `data` attribute of a parameter in uihints.\n * tableInfo - Set when custom control is a cell in a table.\n    * table (boolean) Set to true when in a table cell\n    * editStyle (string) Valid values are \"summary\" and \"inline\". \"summary\" is set when the control will display either below the table (\"on_panel\") or in a \"subpanel\". This allows the custom control to display a summary value in the cell and something else for the custom control.\n * renderControl() - Called on all Redux store changes:\n   * property value changes (<a href=\"controller#property-methods\">property APIs</a>)\n   * state changes (<a href=\"controller#state-methods-(disableenabled-and-hiddenvisible)\">state APIs</a>)\n   * schema changes (<a href=\"controller#datasetmetadata-methods\">schema APIs</a>)\n   * row selection changes (<a href=\"controller#row-selection-methods\">selection APIs</a>)\n   * messages changes (<a href=\"controller#message-methods\">message APIs</a>)\n\n\n\n#### Custom react components\n\n<Title>Example</Title>\n\n```\nrenderControl() {\n return (\n  <CustomCtrlToggle\n   key={controlId}\n   propertyId={this.propertyId}\n   controller={this.controller}\n  />\n );\n}\n\n```\n\nhttps://github.com/elyra-ai/canvas/tree/master/canvas_modules/harness/src/client/components/custom-controls\n\n\n## Custom condition operators\n\nCustom condition operators allow users to create their own operators that can then be used for enablement, visibility, validation, and enum filtering. The condition operators should always return a `boolean` value.\n\n\n#### Custom operator interface\n\n```\n/**\n* This is the key used to determine if the operator should be ran.  Maps to the `op` defined in the\n* `condition` in uihints\n* @return string\n*/\nfunction op()\n\n/**\n* @param see below\n* @return boolean\n*/\nfunction evaluate(paramInfo, param2Info, value, controller)\n\n```\n\n\n\n* `paramInfo` (object) - `parameter_ref` set in the `condition` in uihints\n  *  `control` (object) - contains information about the control.\n  *  `value` (any) - current property value\n* `param2Info` (object) - `parameter_2_ref` set in the condition in uihints. See `paramInfo` for object info\n* `value` - `value` set in the `condition` in uihints. If no value specific this will be `undefined`\n* `controller` - See <a href=\"controller\">here</a> for API information.\n\n\n<Title>Example 1</Title>\n\n```\nfunction op() {\n  return \"customMax\";\n}\n\nfunction evaluate(paramInfo, param2Info, value, controller) {\n  const supportedControls = [\"numberfield\"];\n  if (supportedControls.indexOf(paramInfo.control.controlType) >= 0) {\n    return paramInfo.value < value;\n  }\n  return true;\n}\n\nmodule.exports.op = op;\nmodule.exports.evaluate = evaluate;\n\n```\n\n\n<Title>Example 2</Title>\n\n```\n{\n  \"evaluate\": {\n    \"condition\": {\n      \"parameter_ref\": \"custom_op_num\",\n      \"op\": \"customMax\",\n      \"value\": 100\n    }\n  }\n}\n\n```\n\nhttps://github.com/elyra-ai/canvas/tree/master/canvas_modules/harness/src/client/custom/condition-ops \nhttps://github.com/elyra-ai/canvas/tree/master/canvas_modules/common-canvas/src/common-properties/ui-conditions/condition-ops","type":"Mdx","contentDigest":"c62f26d33924a32523917d191485feba","owner":"gatsby-plugin-mdx","counter":404},"frontmatter":{"title":"Custom components","description":"Custom components"},"exports":{},"rawBody":"---\ntitle: Custom components\ndescription: Custom components\n---\n\n<PageDescription>\n\nCustom components allows applications to use custom code to drive different parts of the common-properties user interface. For some panels and controls it might be necessary to listen to different types of redux state changes to cause the panel/control to rerender.\n\n</PageDescription>\n\n\n<AnchorLinks >\n <AnchorLink>Overview</AnchorLink>\n <AnchorLink>Custom panels</AnchorLink>\n <AnchorLink>Custom controls</AnchorLink>\n <AnchorLink>Custom condition operators</AnchorLink>\n \n</AnchorLinks>\n\n\n## Overview\n\n Here is an example of a textfield listening to 3 state changes:\n\n```\nimport { connect } from \"react-redux\";\n\n// ... application code\n\nrender() {\n  const value = this.props.value; // value passed by redux as a property\n\n  // ... rest of component render code\n\n}\n\nTextfieldControl.propTypes = {\n  // ... application props\n  state: PropTypes.string, // pass in by redux\n  value: PropTypes.string, // pass in by redux\n  messageInfo: PropTypes.object // pass in by redux\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  value: ownProps.controller.getPropertyValue(ownProps.propertyId),\n  state: ownProps.controller.getControlState(ownProps.propertyId),\n  messageInfo: ownProps.controller.getErrorMessage(ownProps.propertyId)\n});\nexport default connect(mapStateToProps, null)(TextfieldControl);\n\n\n```\n## Custom panels\n\nCustom panels allow applications to create their own panels and controls that can live in the same dialogs as common-property panels and controls.\n\n#### Custom panel interface\n\n```\n// Returns the 'id' for the group defined in uihints\nstatic id()\n\nconstructor(parameters, controller, data)\n\n// Returns the content users want to display\nrenderPanel()\n\n```\n\n\n* parameters - String array of parameters set under the customPanel group in uihints\n* controller - See <a href=\"controller\">here</a> for API information.\n* data - Optional parameter. Returns values stored in `data` attribute of a group `customPanel`.\n* renderPanel() - Called on all Redux store changes:\n   * property value changes (<a href=\"controller#property-methods\">property APIs</a>)\n   * state changes (<a href=\"controller#state-methods-(disableenabled-and-hiddenvisible)\">state APIs</a>)\n   * schema changes (<a href=\"controller#datasetmetadata-methods\">schema APIs</a>)\n   * row selection changes (<a href=\"controller#row-selection-methods\">selection APIs</a>)\n   * messages changes (<a href=\"controller#message-methods\">message APIs</a>)\n\n\n#### Custom react components\n\n<Title>Example</Title>\n\n```\nrenderPanel() {\n const controlId = this.parameters[0];\n return (\n  <CustomCtrlToggle\n   key={controlId}\n   propertyId={name: controlId}\n   controller={this.controller}\n  />\n );\n}\n\n```\n\nhttps://github.com/elyra-ai/canvas/tree/master/canvas_modules/harness/src/client/components/custom-panels\n\n\n## Custom Controls\n\nCustom controls allow applications to create their own controls that can live in the same dialogs as common-property panels and controls.\n\n#### Custom control interface\n\n```\n// Returns the 'custom_control_id' for the parameter defined in uihints\nstatic id()\n\nconstructor(propertyId, controller, data, tableInfo)\n\n// Returns the content users want to display\nrenderControl()\n\n```\n\n\n * propertyId - See <a href=\"controller#common-properties-controller-api\">propertyId</a> for definition.\n * controller - See here for <a href=\"controller\">API</a> information.\n * data - Returns values stored in `data` attribute of a parameter in uihints.\n * tableInfo - Set when custom control is a cell in a table.\n    * table (boolean) Set to true when in a table cell\n    * editStyle (string) Valid values are \"summary\" and \"inline\". \"summary\" is set when the control will display either below the table (\"on_panel\") or in a \"subpanel\". This allows the custom control to display a summary value in the cell and something else for the custom control.\n * renderControl() - Called on all Redux store changes:\n   * property value changes (<a href=\"controller#property-methods\">property APIs</a>)\n   * state changes (<a href=\"controller#state-methods-(disableenabled-and-hiddenvisible)\">state APIs</a>)\n   * schema changes (<a href=\"controller#datasetmetadata-methods\">schema APIs</a>)\n   * row selection changes (<a href=\"controller#row-selection-methods\">selection APIs</a>)\n   * messages changes (<a href=\"controller#message-methods\">message APIs</a>)\n\n\n\n#### Custom react components\n\n<Title>Example</Title>\n\n```\nrenderControl() {\n return (\n  <CustomCtrlToggle\n   key={controlId}\n   propertyId={this.propertyId}\n   controller={this.controller}\n  />\n );\n}\n\n```\n\nhttps://github.com/elyra-ai/canvas/tree/master/canvas_modules/harness/src/client/components/custom-controls\n\n\n## Custom condition operators\n\nCustom condition operators allow users to create their own operators that can then be used for enablement, visibility, validation, and enum filtering. The condition operators should always return a `boolean` value.\n\n\n#### Custom operator interface\n\n```\n/**\n* This is the key used to determine if the operator should be ran.  Maps to the `op` defined in the\n* `condition` in uihints\n* @return string\n*/\nfunction op()\n\n/**\n* @param see below\n* @return boolean\n*/\nfunction evaluate(paramInfo, param2Info, value, controller)\n\n```\n\n\n\n* `paramInfo` (object) - `parameter_ref` set in the `condition` in uihints\n  *  `control` (object) - contains information about the control.\n  *  `value` (any) - current property value\n* `param2Info` (object) - `parameter_2_ref` set in the condition in uihints. See `paramInfo` for object info\n* `value` - `value` set in the `condition` in uihints. If no value specific this will be `undefined`\n* `controller` - See <a href=\"controller\">here</a> for API information.\n\n\n<Title>Example 1</Title>\n\n```\nfunction op() {\n  return \"customMax\";\n}\n\nfunction evaluate(paramInfo, param2Info, value, controller) {\n  const supportedControls = [\"numberfield\"];\n  if (supportedControls.indexOf(paramInfo.control.controlType) >= 0) {\n    return paramInfo.value < value;\n  }\n  return true;\n}\n\nmodule.exports.op = op;\nmodule.exports.evaluate = evaluate;\n\n```\n\n\n<Title>Example 2</Title>\n\n```\n{\n  \"evaluate\": {\n    \"condition\": {\n      \"parameter_ref\": \"custom_op_num\",\n      \"op\": \"customMax\",\n      \"value\": 100\n    }\n  }\n}\n\n```\n\nhttps://github.com/elyra-ai/canvas/tree/master/canvas_modules/harness/src/client/custom/condition-ops \nhttps://github.com/elyra-ai/canvas/tree/master/canvas_modules/common-canvas/src/common-properties/ui-conditions/condition-ops","fileAbsolutePath":"/Users/dsobryan/Documents/ElyraOS/elyra-ai-site/src/pages/common-properties/custom-components.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}