{"componentChunkName":"component---src-pages-common-properties-development-testing-guidelines-mdx","path":"/common-properties/development-testing-guidelines/","result":{"pageContext":{"frontmatter":{"title":"Development testing guidelines","description":"Development testing guidelines"},"relativePagePath":"/common-properties/development-testing-guidelines.mdx","titleType":"page","MdxNode":{"id":"345a65e0-cce0-50c1-90c9-048976c7b7be","children":[],"parent":"1307f5cf-88ef-515c-86dd-a4587a0029b3","internal":{"content":"---\ntitle: Development testing guidelines\ndescription: Development testing guidelines\n---\n\n\n<PageDescription>\n\nUI hints is a section of the property definition json and contains specifications to assist in the presentation and flow of the property dialog. The specifications indicate which controls to use to display and gather input on the fields.\n\n</PageDescription>\n\n\n<AnchorLinks >\n <AnchorLink>Unit testing</AnchorLink>\n <AnchorLink>Functional testing</AnchorLink>\n <AnchorLink>Debugging tests</AnchorLink>\n\n</AnchorLinks>\n\n\n## Unit testing\n\nThe Canvas unit tests are automated with the primary purpose of providing rapid feedback to the developers. The test cases are run during every development build. Unit test cases are written using Jest (https://jestjs.io/docs/tutorial-react)). The test cases should be written and delivered at the time that a feature or enhancement is delivered.\n\nUnit test cases should focus on good coverage of a function/service. We are current investigating code coverage analysis tools and will update this doc when it is implemented.\n\nUnit test case coverage should focus on these areas:\n\n* All APIs and all UI elements.\n* All component properties.\n* A variety of input data.\n\nHere is a good blog on JavaScript Unit Testing: https://medium.com/javascript-scene/what-every-unit-test-needs-f6cd34d9836d\n\n\n\n## Functional testing\n\nThe Canvas Functional Test cases will be automated and run during code delivery. The function test case will be automated and written using Cypress: https://docs.cypress.io/.\n\nFunctional Testing coverage includes the following types of tests.\n\n* Core functionality\n* Inter-operate with other Canvas elements.\n* Need to test both forward and backwards compatibility\n* Negative / bounds\n* Globalization / Localization\n  *  Handling of all strings using UTF-8\n  *  Verifying non-English unicode data is handled appropriately\n  *  Externalizing all strings that may be presented for the user (e.g., error messages, UI labels, etc.)\n* Access control security (roles / permissions / tenant management)\n* Malicious and security (code scans such as AppScan, ethical hacking)\n* Accessibility for UI\n\n\n## Debugging tests\n\n\nJest tests (unit): https://facebook.github.io/jest/docs/troubleshooting.html\n\nWith node 8 or newer\n\n* Add `debugger;` statement to your Jest test suite program where you want to stop and begin debugging.\n* If you want to run just a single test within your test program (rather than all of them) temporarily change the it() method for the test to be it.only(). For example, change:\n\n```\nit(\"should add a node\", () => { ... })\n```\nto be:\n\n```\nit.only(\"should add a node\", () => { ... })\n```\n\n* In the console enter: `npm run debug` or `npm run debug <test suite name>`\n* Open Chrome debugging tools by pasting this into the Chrome address field: chrome://inspect/\n* You should see a 'remote' target for `node_modules/.bin/jest`. Click on the `inspect` link below it.\n* Click on sources and then click the play button (right pointing blue triangle icon).\n* The code should run to the point where your debugger statement was added.\n","type":"Mdx","contentDigest":"d3ae834f179e2e2f6cb7c22ad50c939b","owner":"gatsby-plugin-mdx","counter":404},"frontmatter":{"title":"Development testing guidelines","description":"Development testing guidelines"},"exports":{},"rawBody":"---\ntitle: Development testing guidelines\ndescription: Development testing guidelines\n---\n\n\n<PageDescription>\n\nUI hints is a section of the property definition json and contains specifications to assist in the presentation and flow of the property dialog. The specifications indicate which controls to use to display and gather input on the fields.\n\n</PageDescription>\n\n\n<AnchorLinks >\n <AnchorLink>Unit testing</AnchorLink>\n <AnchorLink>Functional testing</AnchorLink>\n <AnchorLink>Debugging tests</AnchorLink>\n\n</AnchorLinks>\n\n\n## Unit testing\n\nThe Canvas unit tests are automated with the primary purpose of providing rapid feedback to the developers. The test cases are run during every development build. Unit test cases are written using Jest (https://jestjs.io/docs/tutorial-react)). The test cases should be written and delivered at the time that a feature or enhancement is delivered.\n\nUnit test cases should focus on good coverage of a function/service. We are current investigating code coverage analysis tools and will update this doc when it is implemented.\n\nUnit test case coverage should focus on these areas:\n\n* All APIs and all UI elements.\n* All component properties.\n* A variety of input data.\n\nHere is a good blog on JavaScript Unit Testing: https://medium.com/javascript-scene/what-every-unit-test-needs-f6cd34d9836d\n\n\n\n## Functional testing\n\nThe Canvas Functional Test cases will be automated and run during code delivery. The function test case will be automated and written using Cypress: https://docs.cypress.io/.\n\nFunctional Testing coverage includes the following types of tests.\n\n* Core functionality\n* Inter-operate with other Canvas elements.\n* Need to test both forward and backwards compatibility\n* Negative / bounds\n* Globalization / Localization\n  *  Handling of all strings using UTF-8\n  *  Verifying non-English unicode data is handled appropriately\n  *  Externalizing all strings that may be presented for the user (e.g., error messages, UI labels, etc.)\n* Access control security (roles / permissions / tenant management)\n* Malicious and security (code scans such as AppScan, ethical hacking)\n* Accessibility for UI\n\n\n## Debugging tests\n\n\nJest tests (unit): https://facebook.github.io/jest/docs/troubleshooting.html\n\nWith node 8 or newer\n\n* Add `debugger;` statement to your Jest test suite program where you want to stop and begin debugging.\n* If you want to run just a single test within your test program (rather than all of them) temporarily change the it() method for the test to be it.only(). For example, change:\n\n```\nit(\"should add a node\", () => { ... })\n```\nto be:\n\n```\nit.only(\"should add a node\", () => { ... })\n```\n\n* In the console enter: `npm run debug` or `npm run debug <test suite name>`\n* Open Chrome debugging tools by pasting this into the Chrome address field: chrome://inspect/\n* You should see a 'remote' target for `node_modules/.bin/jest`. Click on the `inspect` link below it.\n* Click on sources and then click the play button (right pointing blue triangle icon).\n* The code should run to the point where your debugger statement was added.\n","fileAbsolutePath":"/Users/dsobryan/Documents/ElyraOS/elyra-ai-site/src/pages/common-properties/development-testing-guidelines.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}