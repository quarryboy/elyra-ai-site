{"componentChunkName":"component---src-pages-recipes-deploying-locally-mdx","path":"/recipes/deploying-locally/","result":{"pageContext":{"frontmatter":{"title":"Deploying Kubeflow Pipelines Locally for Elyra","description":"Deploying Kubeflow Pipelines Locally for Elyra"},"relativePagePath":"/recipes/deploying-locally.mdx","titleType":"page","MdxNode":{"id":"b41927af-7d18-5908-96e4-02ac4cc75ff0","children":[],"parent":"d45c38a1-bad8-57ec-9916-b8f74611c4f6","internal":{"content":"---\ntitle: Deploying Kubeflow Pipelines Locally for Elyra\ndescription: Deploying Kubeflow Pipelines Locally for Elyra\n---\n\nexport const Title = () => (\n  <span>\n    Deploying Kubeflow Pipelines Locally for Elyra\n  </span>\n);\n\n<PageDescription>\n\nElyra's pipeline editor depends on runtimes like Kubeflow to properly execute its pipelines. In the example,\nwe will be deploying Kubeflow Pipelines on Kubernetes using Docker Desktop. Note that these instructions will\nONLY install the Kubeflow Pipelines component.\n\n</PageDescription>\n\n\n\n## Requirements\n- Docker Desktop\n    - Available for [MacOS](https://hub.docker.com/editions/community/docker-ce-desktop-mac) and \n                    [Windows](https://hub.docker.com/editions/community/docker-ce-desktop-windows)\n- kubectl\n    - Available for [MacOS](https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-macos)\n    - Note: Windows users should skip this step since Docker Desktop adds its own version of `kubectl` to `PATH`\n    \n    \n### Enabling Kubernetes on Docker Desktop\n\nAfter installing our requirements, we want to enable `kubernetes` in `Docker Desktop`.\n\nIn this example, we will be performing the steps on a MacOS system\n\n1. In the upper right corner locate the Docker Desktop Icon, Click and go to `Preferences`   \n![docker icon](../images/ai/docker-desktop-icon.png)  \n  \n2. Navigate to the `Resources` sub-menu and ensure that Docker Desktop has at least   \n4 CPUs, 8 GB of Memory and 1 GB of Swap. If not, increase as necessary and click `Apply & Restart`.  \n![desktop resources](../images/ai/docker-desktop-resources.png)  \n  \n3. Navigate to the `Kubernetes` sub-menu and click `Enable Kubernetes` and hit `Apply & Restart`  \n![k8s menu](../images/ai/docker-desktop-k8s-menu.png)  \n  \n4. `Docker Desktop` should now install a single node deployment of Kubernetes  \n on your system and configure your `kubectl` to the correct local kubernetes cluster  \n![desktop in progress](../images/ai/docker-desktop-in-progress.png)  \n![desktop complete](../images/ai/docker-desktop-complete.png)  \n  \n5. Verify that your cluster is up and running and configured correctly by running  \n`kubectl get all --all-namespaces` and verifying that the Docker Desktop pods are present and in `Running` state   \n![desktop kubectl](../images/ai/docker-desktop-kubectl.png)  \n  \n## Install KubeFlow Pipelines \n\n- Deploy Kubeflow  \n\n```bash\nexport PIPELINE_VERSION=1.4.0\nkubectl apply -k \"github.com/kubeflow/pipelines/manifests/kustomize/cluster-scoped-resources?ref=$PIPELINE_VERSION\"\nkubectl wait --for condition=established --timeout=60s crd/applications.app.k8s.io\nkubectl apply -k \"github.com/elyra-ai/elyra/etc/kubernetes/kubeflow-pipelines?ref=master\"\n```\n- Get status of the Kubeflow deployment and ensure all pods are running before proceeding.  \nDeployment times vary from system to system so please be patient when the pods are starting up.\n```bash\nkubectl get all -n kubeflow\n```\n- Setup port forwarding to use the Kubeflow Pipelines UI / API\n```bash\nkubectl port-forward $(kubectl get pods -n kubeflow | grep ml-pipeline-ui | cut -d' ' -f1) 31380:3000 -n kubeflow &\n```\n- Add minio-service to your local hosts file\n```bash\necho '127.0.0.1  minio-service' | sudo tee -a /etc/hosts\n```\n- Setup port forwarding to use the Minio Object Service with Kubeflow\n```bash\nkubectl port-forward $(kubectl get pods -n kubeflow | grep minio | cut -d' ' -f1) 9000:9000 -n kubeflow &\n```\n- Your Kubeflow Pipelines API and Minio Object Store endpoints should be respectively\n```bash\nUI Endpoint: http://localhost:31380\nAPI Endpoint: http://localhost:31380/pipeline\nObject Storage Endpoint: http://minio-service:9000\n```\n\nThese endpoints will be used to configure your Elyra metadata runtime with the\ncommand below:\n\n```bash\nelyra-metadata install runtimes --replace=true \\\n       --schema_name=kfp \\\n       --name=kfp-local \\\n       --display_name=\"Kubeflow Pipeline (local)\" \\\n       --api_endpoint=http://localhost:31380/pipeline \\\n       --cos_endpoint=http://minio-service:9000 \\\n       --cos_username=minio \\\n       --cos_password=minio123 \\\n       --cos_bucket=covid\n```\n\n## Troubleshooting\nIf the kubernetes cluster fails to start you may need to analyze the container logs to figure out which \ncomponent is failing. \n1. To do this, go back to your `Kubernetes` sub-menu under `Preferences`\n2. Check the box for `Show System Containers (Advanced)` and click `Apply and Restart`\n![Elyra](../images/ai/docker-desktop-advanced-option.png)  \n3. Open a terminal window and run `docker ps`. This should show a list of containers currently running in \nDocker as well as the containers that are part of your kubernetes cluster.\n![Elyra](../images/ai/docker-desktop-ps.png)  \n4. To view the logs of a container, use\n```bash\ndocker logs <CONTAINER ID>\n```\nThe output of these logs should hopefully assist with any issues you may encounter.\n\n## Additional Resources and Documentation\n[Docker Desktop Installation Docs](https://docs.docker.com/get-started/)  \n[KubeFlow Installation Docs](https://www.kubeflow.org/docs/started/installing-kubeflow/)\n","type":"Mdx","contentDigest":"6b3e642a643b11847b812318a9171452","owner":"gatsby-plugin-mdx","counter":340},"frontmatter":{"title":"Deploying Kubeflow Pipelines Locally for Elyra","description":"Deploying Kubeflow Pipelines Locally for Elyra"},"exports":{},"rawBody":"---\ntitle: Deploying Kubeflow Pipelines Locally for Elyra\ndescription: Deploying Kubeflow Pipelines Locally for Elyra\n---\n\nexport const Title = () => (\n  <span>\n    Deploying Kubeflow Pipelines Locally for Elyra\n  </span>\n);\n\n<PageDescription>\n\nElyra's pipeline editor depends on runtimes like Kubeflow to properly execute its pipelines. In the example,\nwe will be deploying Kubeflow Pipelines on Kubernetes using Docker Desktop. Note that these instructions will\nONLY install the Kubeflow Pipelines component.\n\n</PageDescription>\n\n\n\n## Requirements\n- Docker Desktop\n    - Available for [MacOS](https://hub.docker.com/editions/community/docker-ce-desktop-mac) and \n                    [Windows](https://hub.docker.com/editions/community/docker-ce-desktop-windows)\n- kubectl\n    - Available for [MacOS](https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-macos)\n    - Note: Windows users should skip this step since Docker Desktop adds its own version of `kubectl` to `PATH`\n    \n    \n### Enabling Kubernetes on Docker Desktop\n\nAfter installing our requirements, we want to enable `kubernetes` in `Docker Desktop`.\n\nIn this example, we will be performing the steps on a MacOS system\n\n1. In the upper right corner locate the Docker Desktop Icon, Click and go to `Preferences`   \n![docker icon](../images/ai/docker-desktop-icon.png)  \n  \n2. Navigate to the `Resources` sub-menu and ensure that Docker Desktop has at least   \n4 CPUs, 8 GB of Memory and 1 GB of Swap. If not, increase as necessary and click `Apply & Restart`.  \n![desktop resources](../images/ai/docker-desktop-resources.png)  \n  \n3. Navigate to the `Kubernetes` sub-menu and click `Enable Kubernetes` and hit `Apply & Restart`  \n![k8s menu](../images/ai/docker-desktop-k8s-menu.png)  \n  \n4. `Docker Desktop` should now install a single node deployment of Kubernetes  \n on your system and configure your `kubectl` to the correct local kubernetes cluster  \n![desktop in progress](../images/ai/docker-desktop-in-progress.png)  \n![desktop complete](../images/ai/docker-desktop-complete.png)  \n  \n5. Verify that your cluster is up and running and configured correctly by running  \n`kubectl get all --all-namespaces` and verifying that the Docker Desktop pods are present and in `Running` state   \n![desktop kubectl](../images/ai/docker-desktop-kubectl.png)  \n  \n## Install KubeFlow Pipelines \n\n- Deploy Kubeflow  \n\n```bash\nexport PIPELINE_VERSION=1.4.0\nkubectl apply -k \"github.com/kubeflow/pipelines/manifests/kustomize/cluster-scoped-resources?ref=$PIPELINE_VERSION\"\nkubectl wait --for condition=established --timeout=60s crd/applications.app.k8s.io\nkubectl apply -k \"github.com/elyra-ai/elyra/etc/kubernetes/kubeflow-pipelines?ref=master\"\n```\n- Get status of the Kubeflow deployment and ensure all pods are running before proceeding.  \nDeployment times vary from system to system so please be patient when the pods are starting up.\n```bash\nkubectl get all -n kubeflow\n```\n- Setup port forwarding to use the Kubeflow Pipelines UI / API\n```bash\nkubectl port-forward $(kubectl get pods -n kubeflow | grep ml-pipeline-ui | cut -d' ' -f1) 31380:3000 -n kubeflow &\n```\n- Add minio-service to your local hosts file\n```bash\necho '127.0.0.1  minio-service' | sudo tee -a /etc/hosts\n```\n- Setup port forwarding to use the Minio Object Service with Kubeflow\n```bash\nkubectl port-forward $(kubectl get pods -n kubeflow | grep minio | cut -d' ' -f1) 9000:9000 -n kubeflow &\n```\n- Your Kubeflow Pipelines API and Minio Object Store endpoints should be respectively\n```bash\nUI Endpoint: http://localhost:31380\nAPI Endpoint: http://localhost:31380/pipeline\nObject Storage Endpoint: http://minio-service:9000\n```\n\nThese endpoints will be used to configure your Elyra metadata runtime with the\ncommand below:\n\n```bash\nelyra-metadata install runtimes --replace=true \\\n       --schema_name=kfp \\\n       --name=kfp-local \\\n       --display_name=\"Kubeflow Pipeline (local)\" \\\n       --api_endpoint=http://localhost:31380/pipeline \\\n       --cos_endpoint=http://minio-service:9000 \\\n       --cos_username=minio \\\n       --cos_password=minio123 \\\n       --cos_bucket=covid\n```\n\n## Troubleshooting\nIf the kubernetes cluster fails to start you may need to analyze the container logs to figure out which \ncomponent is failing. \n1. To do this, go back to your `Kubernetes` sub-menu under `Preferences`\n2. Check the box for `Show System Containers (Advanced)` and click `Apply and Restart`\n![Elyra](../images/ai/docker-desktop-advanced-option.png)  \n3. Open a terminal window and run `docker ps`. This should show a list of containers currently running in \nDocker as well as the containers that are part of your kubernetes cluster.\n![Elyra](../images/ai/docker-desktop-ps.png)  \n4. To view the logs of a container, use\n```bash\ndocker logs <CONTAINER ID>\n```\nThe output of these logs should hopefully assist with any issues you may encounter.\n\n## Additional Resources and Documentation\n[Docker Desktop Installation Docs](https://docs.docker.com/get-started/)  \n[KubeFlow Installation Docs](https://www.kubeflow.org/docs/started/installing-kubeflow/)\n","fileAbsolutePath":"/Users/dsobryan/Documents/ElyraOS/elyra-ai-site/src/pages/recipes/deploying-locally.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}