{"componentChunkName":"component---src-pages-recipes-deploying-in-kubeflow-mdx","path":"/recipes/deploying-in-kubeflow/","result":{"pageContext":{"frontmatter":{"title":"Deploying Elyra & JupyterHub in a Kubernetes environment","description":"Deploying Elyra & JupyterHub in a Kubernetes environment"},"relativePagePath":"/recipes/deploying-in-kubeflow.mdx","titleType":"page","MdxNode":{"id":"64c1d749-aa50-55cc-afd8-4a97ca18c609","children":[],"parent":"8d6ce81c-e419-53e6-91bd-3994363cc14d","internal":{"content":"---\ntitle: Deploying Elyra & JupyterHub in a Kubernetes environment\ndescription: Deploying Elyra & JupyterHub in a Kubernetes environment\n---\n\nexport const Title = () => (\n  <span>\n    Deploying Elyra & JupyterHub in a Kubernetes environment\n  </span>\n);\n\n<PageDescription>\n\nThis document goes over how to integrate Elyra into a self-service Jupyter Notebook platform\nmanaged by JupyterHub in a Kubernetes environment.\n\n</PageDescription>\n\n\n\nThe links below provide more details on how to install/configure JupyterHub:\n - [Zero to JupyterHub with Kubernetes](https://zero-to-jupyterhub.readthedocs.io/en/latest/index.html)\n - [Ansible script to deploy Elyra, JupyterHub, Jupyter Enterprise Gateway](https://github.com/lresende/ansible-kubernetes-cluster)\n\n![JupyterHub Deployment](../images/ai/elyra-deployment-diagram.png)\n\n## Configuring JupyterHub Deployment\n\nIn this case, JupyterHub is the recommended entry point for Elyra, as it will manage the user\nauthorization and provisioning of individual Notebook servers for each user.\n\nJupyterHub is configured via a config.yaml file, and the following settings are required:\n\n * Configure JupyterHub to use Elyra docker image when instantiating the notebook environment for each user\n\n```yaml\nsingleuser:\n  defaultUrl: \"/lab\"\n  image:\n    name: elyra/elyra\n    # change to a specific release version as appropriate\n    tag: 3.0.1\n    # disable this in a production environment\n    pullPolicy: \"Always\"\n  storage:\n    dynamic:\n      storageClass: nfs-dynamic\n```\n\n## Deploying Jupyter Enterprise Gateway\n\nJupyter Enterprise Gateway enables support for remote kernels in a Jupyter Deployment\n\n * Deploying Jupyter Enterprise gateway\n\n```bash\nkubectl apply -f https://raw.githubusercontent.com/jupyter/enterprise_gateway/v2.1.1/etc/kubernetes/enterprise-gateway.yaml\n```\n\n## Connecting JupyterHub and Jupyter Enterprise Gateway\n\nNow that all components are deployed, we need to make them aware of each other via some\nadditional environment variables.\n\n * Flowing current user from JupyterHub to Jupyter Enterprise Gateway\n\n```yaml\nhub:\n  ...\n  extraConfig: |-\n    from kubespawner import KubeSpawner\n    from tornado import gen\n    import yaml\n\n    class CustomKubeSpawner(KubeSpawner):\n        def get_env(self):\n            env = super().get_env()\n\n            env['KERNEL_USERNAME'] =  self.user.name\n\n            return env\n    c.JupyterHub.spawner_class = CustomKubeSpawner\n    c.Spawner.start_timeout = 500\n```\n\n  * Integrating Elyra (Jupyter Notebook) with Jupyter Enterprise Gateway\n\n```yaml\nsingleuser:\n  defaultUrl: \"/lab\"\n  image:\n    name: elyra/elyra\n    # change to a specific release version as appropriated\n    tag: 3.0.1\n    # disable this in a production environment\n    pullPolicy: \"Always\"\n  storage:\n    dynamic:\n      storageClass: nfs-dynamic\n  extraEnv:\n    JUPYTER_GATEWAY_URL: <FQDN of Gateway Service Endpoint>\n    JUPYTER_GATEWAY_REQUEST_TIMEOUT: \"120\"\n```\n\n## Customizing the docker image to be used\n\nWe have created an [Elyra docker image](https://hub.docker.com/r/elyra/elyra) with specific dependencies\nrequired to run elyra, and that could be used to customize your environment with other additional\npackages required by your workloads, or any other customizations needed.\n\n```dockerfile\nFROM elyra/elyra:3.0.1\n\n...\n\n\n```\n","type":"Mdx","contentDigest":"45e9c67b02af9b7938ac48320cf25764","owner":"gatsby-plugin-mdx","counter":340},"frontmatter":{"title":"Deploying Elyra & JupyterHub in a Kubernetes environment","description":"Deploying Elyra & JupyterHub in a Kubernetes environment"},"exports":{},"rawBody":"---\ntitle: Deploying Elyra & JupyterHub in a Kubernetes environment\ndescription: Deploying Elyra & JupyterHub in a Kubernetes environment\n---\n\nexport const Title = () => (\n  <span>\n    Deploying Elyra & JupyterHub in a Kubernetes environment\n  </span>\n);\n\n<PageDescription>\n\nThis document goes over how to integrate Elyra into a self-service Jupyter Notebook platform\nmanaged by JupyterHub in a Kubernetes environment.\n\n</PageDescription>\n\n\n\nThe links below provide more details on how to install/configure JupyterHub:\n - [Zero to JupyterHub with Kubernetes](https://zero-to-jupyterhub.readthedocs.io/en/latest/index.html)\n - [Ansible script to deploy Elyra, JupyterHub, Jupyter Enterprise Gateway](https://github.com/lresende/ansible-kubernetes-cluster)\n\n![JupyterHub Deployment](../images/ai/elyra-deployment-diagram.png)\n\n## Configuring JupyterHub Deployment\n\nIn this case, JupyterHub is the recommended entry point for Elyra, as it will manage the user\nauthorization and provisioning of individual Notebook servers for each user.\n\nJupyterHub is configured via a config.yaml file, and the following settings are required:\n\n * Configure JupyterHub to use Elyra docker image when instantiating the notebook environment for each user\n\n```yaml\nsingleuser:\n  defaultUrl: \"/lab\"\n  image:\n    name: elyra/elyra\n    # change to a specific release version as appropriate\n    tag: 3.0.1\n    # disable this in a production environment\n    pullPolicy: \"Always\"\n  storage:\n    dynamic:\n      storageClass: nfs-dynamic\n```\n\n## Deploying Jupyter Enterprise Gateway\n\nJupyter Enterprise Gateway enables support for remote kernels in a Jupyter Deployment\n\n * Deploying Jupyter Enterprise gateway\n\n```bash\nkubectl apply -f https://raw.githubusercontent.com/jupyter/enterprise_gateway/v2.1.1/etc/kubernetes/enterprise-gateway.yaml\n```\n\n## Connecting JupyterHub and Jupyter Enterprise Gateway\n\nNow that all components are deployed, we need to make them aware of each other via some\nadditional environment variables.\n\n * Flowing current user from JupyterHub to Jupyter Enterprise Gateway\n\n```yaml\nhub:\n  ...\n  extraConfig: |-\n    from kubespawner import KubeSpawner\n    from tornado import gen\n    import yaml\n\n    class CustomKubeSpawner(KubeSpawner):\n        def get_env(self):\n            env = super().get_env()\n\n            env['KERNEL_USERNAME'] =  self.user.name\n\n            return env\n    c.JupyterHub.spawner_class = CustomKubeSpawner\n    c.Spawner.start_timeout = 500\n```\n\n  * Integrating Elyra (Jupyter Notebook) with Jupyter Enterprise Gateway\n\n```yaml\nsingleuser:\n  defaultUrl: \"/lab\"\n  image:\n    name: elyra/elyra\n    # change to a specific release version as appropriated\n    tag: 3.0.1\n    # disable this in a production environment\n    pullPolicy: \"Always\"\n  storage:\n    dynamic:\n      storageClass: nfs-dynamic\n  extraEnv:\n    JUPYTER_GATEWAY_URL: <FQDN of Gateway Service Endpoint>\n    JUPYTER_GATEWAY_REQUEST_TIMEOUT: \"120\"\n```\n\n## Customizing the docker image to be used\n\nWe have created an [Elyra docker image](https://hub.docker.com/r/elyra/elyra) with specific dependencies\nrequired to run elyra, and that could be used to customize your environment with other additional\npackages required by your workloads, or any other customizations needed.\n\n```dockerfile\nFROM elyra/elyra:3.0.1\n\n...\n\n\n```\n","fileAbsolutePath":"/Users/dsobryan/Documents/ElyraOS/elyra-ai-site/src/pages/recipes/deploying-in-kubeflow.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}