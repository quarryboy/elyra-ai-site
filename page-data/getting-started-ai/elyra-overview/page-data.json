{"componentChunkName":"component---src-pages-getting-started-ai-elyra-overview-mdx","path":"/getting-started-ai/elyra-overview/","result":{"pageContext":{"frontmatter":{"title":"Elyra AI overview","description":"Elyra AI overview"},"relativePagePath":"/getting-started-ai/elyra-overview.mdx","titleType":"page","MdxNode":{"id":"bcf066da-50eb-53fa-9969-16949063690d","children":[],"parent":"a699244e-1cfa-513f-879d-66bdd8ce61b5","internal":{"content":"---\ntitle: Elyra AI overview\ndescription: Elyra AI overview\n---\n\nexport const Title = () => (\n  <span>\n    Elyra AI overview\n  </span>\n);\n\n\n<PageDescription>\n\nElyra is a set of AI-centric extensions to JupyterLab Notebooks. The main features include the following:\n\n</PageDescription>\n\n\n\n\n<AnchorLinks small>\n  <AnchorLink>AI Pipelines visual editor</AnchorLink>\n  <AnchorLink>Ability to run a notebook, Python or R script as a batch job</AnchorLink>\n  <AnchorLink>Reusable Code Snippets</AnchorLink>\n  <AnchorLink>Hybrid runtime support</AnchorLink>\n  <AnchorLink>Python and R script editors with local/remote execution capabilities</AnchorLink>\n  <AnchorLink>Python script navigation using auto-generated Table of Contents</AnchorLink>\n  <AnchorLink>Language Server Protocol integration</AnchorLink>\n  <AnchorLink>Version control using git integration</AnchorLink>\n</AnchorLinks>\n\n\n\n\nYou can try out some of these features using the getting started tour on [Binder](https://github.com/elyra-ai/elyra#using-binder) without having to install anything.\n\n\n## AI Pipelines visual editor\n\nBuilding an AI pipeline for a model is hard, breaking down and modularizing a pipeline is harder. A typical machine/deep learning pipeline begins as a series of preprocessing steps followed by experimentation/optimization and finally deployment. Each of these steps represents a challenge in the model development lifecycle.\n\nElyra provides a **Pipeline Visual Editor** for building AI pipelines from notebooks, Python scripts and R scripts, simplifying the conversion of multiple notebooks or scripts files into batch jobs or workflows.\n\nCurrently, pipelines can be executed locally in JupyterLab, on Kubeflow Pipelines, or with Apache Airflow.\n\n<Row>\n    <Column colMd={7} colLg={7}>\n\n![AI Pipeline in editor](images/ai/pipeline-in-editor.png)\n\n</Column>\n</Row>\n\nLearn more about the Pipeline Visual Editor in the AI Pipelines topic in the User Guide, explore the tutorials, or example pipelines.\n\nThe pipeline editor feature can optionally be installed as a stand-alone extension.\n\n## Ability to run a notebook, Python or R script as a batch job\n\nElyra extends the Jupyter Notebook UI to to allow for execution of a notebook as a batch job in local or remote cloud environments. This feature leverages the AI pipelines feature and requires either a Kubeflow Pipelines or Apache Airflow deployment via a runtime configuration.\n\nTo run a notebook as a batch job open the notebook and select ```Run as Pipeline``` button from the menu bar.\n\n\n<Row>\n    <Column colMd={7} colLg={7}>\n\n![run notebook as pipeline](images/ai/run-notebook-as-pipeline.gif)\n\n</Column>\n</Row>\n\nSimilarly, to submit a Python or R script as a batch job, open a the script file and select ```Run as Pipeline``` button from the editor toolbar.\n\n\n## Reusable Code Snippets\n\nThe Code Snippet editor introduces support for reusable code fragments, making programming in JupyterLab more efficient by reducing repetitive work.\n\nFor information on how to manage and use code snippets refer to the Code Snippets topic in the User Guide.\n\nThe code snippet feature can optionally be installed as a stand-alone extension.\n\n<Row>\n    <Column colMd={7} colLg={7}>\n\n![code snippet expanded](images/ai/code-snippet-expanded.png)\n\n</Column>\n</Row>\n\n\n\n## Hybrid runtime support\n\nElyra leverages Jupyter Enterprise Gateway to enable Jupyter Notebooks to share resources across distributed clusters such as Apache Spark, Kubernetes, OpenShift, and the like.\n\nIt simplifies the task of running notebooks interactively on cloud machines, seamlessly leveraging the power of cloud-based resources such as GPUs and TPUs.\n\n\n## Python and R scripts execution support\n\nElyra contributes a Script editor with support for Python and R files, which can take advantage of the Hybrid Runtime Support enabling users to locally edit scripts and execute them against local or cloud-based resources seamlessly.\n\n<Row>\n    <Column colMd={7} colLg={7}>\n\n![python editor](images/ai/python-editor.png)\n\n</Column>\n</Row>\n\n\nFor information on how to use the Script editor refer to the Enhanced Script Support topic in the User Guide.\n\nThe Script editor feature can optionally be installed as a stand-alone extension.\n\n\n\n## Notebook navigation using auto-generated Table of Contents\n\nThe enhanced notebook navigation recognizes markdown headings and auto-generates a Table of Contents providing enhanced navigation capabilities.\n\nTo access the Table of Contents, open a notebook and select the Table of Contents tab from the sidebar.\n\n\n\n## Language Server Protocol integration\n\nThe JupyterLab Language Server Protocol (LSP) integration enhances the development experience in the notebook editor and file editors, delivering features common in IDEs such as autocompletion, code navigation, hover suggestions, code linting, and renaming.\n\nBy default, Elyra installs the Python Language Server package, enabling the productivity features in the notebook editor and the Python editor. Support for other languages can be added by manually installing additional Language Server packages and their prerequisites.\n\nRefer to the ```jupyterlab-lsp``` extension documentation for a full list of supported Language Servers and installation instructions.\n\n<Row>\n    <Column colMd={7} colLg={7}>\n\n![language server protocol](images/ai/lsp.gif)\n\n</Column>\n</Row>\n\nTo learn more about the ```jupyterlab-lsp``` extension and its features check out the repository.\n\n\n## Version control using git integration\n\nWith the integrated Git version control support users can clone Git repositories, track and manage changes (e.g. by comparing, committing, or discarding them) and share among team members - fostering productivity by enabling a collaborative working environment.\n\nTo learn more about the git extension or how to install it individually refer to the [jupyterlab-git](https://github.com/jupyterlab/jupyterlab-git) repository.\n\n<Row>\n    <Column colMd={7} colLg={7}>\n\n![git integration](images/ai/git.png)\n\n</Column>\n</Row>","type":"Mdx","contentDigest":"aa0af8477f89ee979f33738d9a465bcc","owner":"gatsby-plugin-mdx","counter":387},"frontmatter":{"title":"Elyra AI overview","description":"Elyra AI overview"},"exports":{},"rawBody":"---\ntitle: Elyra AI overview\ndescription: Elyra AI overview\n---\n\nexport const Title = () => (\n  <span>\n    Elyra AI overview\n  </span>\n);\n\n\n<PageDescription>\n\nElyra is a set of AI-centric extensions to JupyterLab Notebooks. The main features include the following:\n\n</PageDescription>\n\n\n\n\n<AnchorLinks small>\n  <AnchorLink>AI Pipelines visual editor</AnchorLink>\n  <AnchorLink>Ability to run a notebook, Python or R script as a batch job</AnchorLink>\n  <AnchorLink>Reusable Code Snippets</AnchorLink>\n  <AnchorLink>Hybrid runtime support</AnchorLink>\n  <AnchorLink>Python and R script editors with local/remote execution capabilities</AnchorLink>\n  <AnchorLink>Python script navigation using auto-generated Table of Contents</AnchorLink>\n  <AnchorLink>Language Server Protocol integration</AnchorLink>\n  <AnchorLink>Version control using git integration</AnchorLink>\n</AnchorLinks>\n\n\n\n\nYou can try out some of these features using the getting started tour on [Binder](https://github.com/elyra-ai/elyra#using-binder) without having to install anything.\n\n\n## AI Pipelines visual editor\n\nBuilding an AI pipeline for a model is hard, breaking down and modularizing a pipeline is harder. A typical machine/deep learning pipeline begins as a series of preprocessing steps followed by experimentation/optimization and finally deployment. Each of these steps represents a challenge in the model development lifecycle.\n\nElyra provides a **Pipeline Visual Editor** for building AI pipelines from notebooks, Python scripts and R scripts, simplifying the conversion of multiple notebooks or scripts files into batch jobs or workflows.\n\nCurrently, pipelines can be executed locally in JupyterLab, on Kubeflow Pipelines, or with Apache Airflow.\n\n<Row>\n    <Column colMd={7} colLg={7}>\n\n![AI Pipeline in editor](images/ai/pipeline-in-editor.png)\n\n</Column>\n</Row>\n\nLearn more about the Pipeline Visual Editor in the AI Pipelines topic in the User Guide, explore the tutorials, or example pipelines.\n\nThe pipeline editor feature can optionally be installed as a stand-alone extension.\n\n## Ability to run a notebook, Python or R script as a batch job\n\nElyra extends the Jupyter Notebook UI to to allow for execution of a notebook as a batch job in local or remote cloud environments. This feature leverages the AI pipelines feature and requires either a Kubeflow Pipelines or Apache Airflow deployment via a runtime configuration.\n\nTo run a notebook as a batch job open the notebook and select ```Run as Pipeline``` button from the menu bar.\n\n\n<Row>\n    <Column colMd={7} colLg={7}>\n\n![run notebook as pipeline](images/ai/run-notebook-as-pipeline.gif)\n\n</Column>\n</Row>\n\nSimilarly, to submit a Python or R script as a batch job, open a the script file and select ```Run as Pipeline``` button from the editor toolbar.\n\n\n## Reusable Code Snippets\n\nThe Code Snippet editor introduces support for reusable code fragments, making programming in JupyterLab more efficient by reducing repetitive work.\n\nFor information on how to manage and use code snippets refer to the Code Snippets topic in the User Guide.\n\nThe code snippet feature can optionally be installed as a stand-alone extension.\n\n<Row>\n    <Column colMd={7} colLg={7}>\n\n![code snippet expanded](images/ai/code-snippet-expanded.png)\n\n</Column>\n</Row>\n\n\n\n## Hybrid runtime support\n\nElyra leverages Jupyter Enterprise Gateway to enable Jupyter Notebooks to share resources across distributed clusters such as Apache Spark, Kubernetes, OpenShift, and the like.\n\nIt simplifies the task of running notebooks interactively on cloud machines, seamlessly leveraging the power of cloud-based resources such as GPUs and TPUs.\n\n\n## Python and R scripts execution support\n\nElyra contributes a Script editor with support for Python and R files, which can take advantage of the Hybrid Runtime Support enabling users to locally edit scripts and execute them against local or cloud-based resources seamlessly.\n\n<Row>\n    <Column colMd={7} colLg={7}>\n\n![python editor](images/ai/python-editor.png)\n\n</Column>\n</Row>\n\n\nFor information on how to use the Script editor refer to the Enhanced Script Support topic in the User Guide.\n\nThe Script editor feature can optionally be installed as a stand-alone extension.\n\n\n\n## Notebook navigation using auto-generated Table of Contents\n\nThe enhanced notebook navigation recognizes markdown headings and auto-generates a Table of Contents providing enhanced navigation capabilities.\n\nTo access the Table of Contents, open a notebook and select the Table of Contents tab from the sidebar.\n\n\n\n## Language Server Protocol integration\n\nThe JupyterLab Language Server Protocol (LSP) integration enhances the development experience in the notebook editor and file editors, delivering features common in IDEs such as autocompletion, code navigation, hover suggestions, code linting, and renaming.\n\nBy default, Elyra installs the Python Language Server package, enabling the productivity features in the notebook editor and the Python editor. Support for other languages can be added by manually installing additional Language Server packages and their prerequisites.\n\nRefer to the ```jupyterlab-lsp``` extension documentation for a full list of supported Language Servers and installation instructions.\n\n<Row>\n    <Column colMd={7} colLg={7}>\n\n![language server protocol](images/ai/lsp.gif)\n\n</Column>\n</Row>\n\nTo learn more about the ```jupyterlab-lsp``` extension and its features check out the repository.\n\n\n## Version control using git integration\n\nWith the integrated Git version control support users can clone Git repositories, track and manage changes (e.g. by comparing, committing, or discarding them) and share among team members - fostering productivity by enabling a collaborative working environment.\n\nTo learn more about the git extension or how to install it individually refer to the [jupyterlab-git](https://github.com/jupyterlab/jupyterlab-git) repository.\n\n<Row>\n    <Column colMd={7} colLg={7}>\n\n![git integration](images/ai/git.png)\n\n</Column>\n</Row>","fileAbsolutePath":"/Users/dsobryan/Documents/ElyraOS/elyra-ai-site/src/pages/getting-started-ai/elyra-overview.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}