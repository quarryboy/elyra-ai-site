{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss","webpack:///./src/pages/common-canvas/canvas-controller/canvas-controller-api.mdx"],"names":["PageHeader","title","theme","tabs","className","cx","styles","pageHeader","withTabs","length","darkMode","id","text","EditLink","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","props","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","aria-label","list","React","Component","LastModifiedDate","date","lastModified","Date","toLocaleDateString","day","year","month","Default","pageContext","children","location","Title","frontmatter","titleType","frontmatterTheme","description","keywords","interiorTheme","useMetadata","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils","module","exports","_frontmatter","makeShortcode","name","console","warn","PageDescription","InlineNotification","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-common-canvas-canvas-controller-canvas-controller-api-mdx-b36b9ae07eb654aa3dc0.js","sourcesContent":["import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport styles from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, theme, tabs = [] }) => (\n  <div\n    className={cx(styles.pageHeader, {\n      [styles.withTabs]: tabs.length,\n      [styles.darkMode]: theme === 'dark',\n    })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={styles.text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { title, tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav aria-label={title}>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\nimport useMetadata from '../util/hooks/useMetadata';\nimport LastModifiedDate from '../components/LastModifiedDate';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"EditLink-module--bx--text-truncate--end--2pqje\",\"bxTextTruncateFront\":\"EditLink-module--bx--text-truncate--front--3_lIE\",\"link\":\"EditLink-module--link--1qzW3\",\"row\":\"EditLink-module--row--1B9Gk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageTabs-module--bx--text-truncate--end--267NA\",\"bxTextTruncateFront\":\"PageTabs-module--bx--text-truncate--front--3xEQF\",\"tabsContainer\":\"PageTabs-module--tabs-container--8N4k0\",\"list\":\"PageTabs-module--list--3eFQc\",\"listItem\":\"PageTabs-module--list-item--nUmtD\",\"link\":\"PageTabs-module--link--1mDJ1\",\"selectedItem\":\"PageTabs-module--selected-item--YPVr3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"last-modified-date-module--bx--text-truncate--end--123zi\",\"bxTextTruncateFront\":\"last-modified-date-module--bx--text-truncate--front--3xeKz\",\"text\":\"last-modified-date-module--text--24m-4\",\"row\":\"last-modified-date-module--row--2BquN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageHeader-module--bx--text-truncate--end--mZWeX\",\"bxTextTruncateFront\":\"PageHeader-module--bx--text-truncate--front--3zvrI\",\"pageHeader\":\"PageHeader-module--page-header--3hIan\",\"darkMode\":\"PageHeader-module--dark-mode--hBrwL\",\"withTabs\":\"PageHeader-module--with-tabs--3nKxA\",\"text\":\"PageHeader-module--text--o9LFq\"};","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dsobryan/Documents/ElyraOS/elyra-ai-site/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nimport { Link } from 'gatsby';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Your application code can programmatically perform many of the actions that the user can do in the common canvas using the Canvas Controller API.`}</p>\n    </PageDescription>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` See `}<Link to=\"/common-canvas/canvas-controller/api-object-structure\" mdxType=\"Link\">{`this section`}</Link>{` for differences between the structure of objects in the API and the schema.`}</p>\n    </InlineNotification>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Introduction</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Pipeline flow methods</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Pipeline methods</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Palette flow methods</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Selections methods</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Notification messages methods</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Node AND comment methods</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Node methods</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Comment methods</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Link methods</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Branch highlight methods</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Operational methods</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Introduction`}</h2>\n    <p>{`In most cases within the API, the pipelineId parameter is optional. If pipelineId is omitted, the method will default to the pipeline that is currently displayed in the main canvas viewport.`}</p>\n    <p>{`Warning 1: Do not alter the IDs of objects that currently exist on the canvas. Changing object IDs can cause internal problems, in particular with the command stack.`}</p>\n    <p>{`Warning 2: When using external pipline flows, Pipeline IDs must be globally unique identifiers.  `}</p>\n    <h2>{`Pipeline flow methods`}</h2>\n    <p>{`The API provides the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Loads the pipelineFlow document provided into common-canvas and displays it.\n// The document must conform to the pipelineFlow schema as documented in the\n// elyra-ai pipeline-schemas repo. Documents conforming to older versions may be\n// provided but they will be upgraded to the most recent version.\nsetPipelineFlow(flow)\n\n// Clears the pipleine flow and displays an empty canvas.\nclearPipelineFlow()\n\n// Returns the current pipelineFlow document in the latest version of the\n// pipelineFlow schema as documented in the elyra-ai pipeline-schemas repo.\ngetPipelineFlow()\n\n// Returns the current pipelineFlow document ID.\ngetPipelineFlowId()\n\n// Returns the ID of the primary pipeline from the pipelineFlow.\ngetPrimaryPipelineId()\n\n// Returns the external pipeline flow for the url passed in. The external\n// flow must have been loaded through some common canvas action for this\n// method to be able to return anything.\ngetExternalPipelineFlow(url) {\n\n// Returns the internal format of all canvas data stored in memory by\n// common-canvas. Nodes, comments and links are returned in the internal\n// format.\ngetCanvasInfo()\n\n// Returns the IDs of the ancestor pipleline of the pipeline ID passed in.\ngetAncestorPipelineIds(pipelineId)\n\n// Removes all styles from nodes, comments and links. See the setObjectsStyle\n// and setLinkStyle methods for details on setting styles.\n// temporary - is a boolean that indicates whether temporary or permanent\n// styles should be removed.\nremoveAllStyles(temporary)\n\n// Specifies the new styles for objects that are not highlighted during\n// branch highlighting.\n// newStyle - is a style specification object. See wiki for details.\nsetSubdueStyle(newStyle)\n`}</code></pre>\n    <h2>{`Pipeline methods`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Returns the pipeline object for the pipeline Id passed in.\ngetPipeline(pipelineId)\n\n// Returns the ID of the pipeline object which is currently on display\n// in the canvas. Typically, this is the primary pipeline but will be\n// different if the user has navigated into one or more supernodes; in\n// which case it will be the ID of the pipeline at the level in the\n// supernode hierarchy that is currently on display.\ngetCurrentPipelineId()\n\n// Returns truty if the pipeline is external (that is it is part of an\n// external pipeline flow). Otherwise, return falsy to indicate the pipeline\n// is local.\nisPipelineExternal(pipelineId)\n\n// Returns the flow validation messages for the pipeline ID passed in.\ngetFlowMessages(pipelineId)\n\n// Returns a boolean to indicate whether there are any messages of\n// includeMsgsType in the pipeline identified by the pipeline ID passed in.\n// includeMsgsType - can be either \"error\" or \"warning\"\nisFlowValid(includeMsgTypes, pipelineId)\n\n// Rearranges the nodes in the canvas in the direction specified for the\n// pipeline ID passed in.\n// layoutDirection - can be \"horizontal\" or \"vertical\"\nautoLayout(layoutDirection, pipelineId)\n`}</code></pre>\n    <h2>{`Palette methods`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Loads the palette data as described in the palette schema in\n// elyra-ai pipeline-schemas repo. Any version can be loaded and it will be\n// upgraded to the latest version.\nsetPipelineFlowPalette(palette)\n\n// Clears the palette data from common-canvas.\nclearPaletteData()\n\n// Sets the loading text of the category. If set to a non-empty string the\n// category will show an InlineLoading control in the palette category div\n// with this text as the label. If set to falsey the palette category\n// will display as normal.\nsetCategoryLoadingText(categoryId, loadingText)\n\n// Sets the empty text of the category. If set to a non-empty string and the\n// category does not have any nodes, the palette will show a warning icon with\n// this text as a message under the category title when the category is opened.\n// This message will not be displayed if the field is set to falsey or if \n// nodetypes are added to the category.\nsetCategoryEmptyText(categoryId, emptyText)\n\n// Adds a new node into the palette:\n// nodeTypeObj - must conform to the style of node used by the palette as\n// described in the palette schema. See objects in nodeTypes array in the\n// palette schema:\n//  https://github.com/elyra-ai/pipeline-schemas/blob/master/common-canvas/palette/palette-v3-schema.json\n// category - is the name of the palette category where the node will be\n// added. If the category doesn't exist it will be created.\n// categoryLabel - Is an optional param. If a new category is created it will\n// be displayed with this label.\n// categoryDescription - Is an optional param. If a new category is created\n// it will be displayed with this description.\n// categoryImage - Is an optional param. The image displayed for the category provided as a\n// reference to an image or the image itself.\naddNodeTypeToPalette(nodeTypeObj, categoryId, categoryLabel, categoryDescription, categoryImage)\n\n// Adds an array of new node into the palette:\n// nodeTypeObjs - an array of nodetypes that must conform to the style of\n// nodes used by the palette as described in the palette schema. See objects\n// in nodeTypes array in the palette schema:\n//  https://github.com/elyra-ai/pipeline-schemas/blob/master/common-canvas/palette/palette-v3-schema.json\n// category - is the name of the palette category where the node will be\n// added. If the category doesn't exist it will be created.\n// categoryLabel - is an optional param. If a new category is created it will\n// be displayed with this label.\n// categoryImage - the image displayed for the category provided as a\n// reference to an image or the image itself.\n// categoryDescription - Is an optional param. If a new category is created\n// it will be displayed with this description.\n// categoryImage - Is an optional param. The image displayed for the category provided as a\n// reference to an image or the image itself.\naddNodeTypesToPalette(nodeTypeObjs, categoryId, categoryLabel, categoryDescription, categoryImage)\n\n// Removes nodetypes from a palette category\n// selObjectIds - an array of object IDs to identify the nodetypes to be\n// removed\n// categoryId - the ID of teh category from which the nodes will be removed\nremoveNodesFromPalette(selObjectIds, categoryId)\n\n// Returns the palette data document which will conform to the latest version\n// of the palette schema.\ngetPaletteData()\n\n// Returns the palette node identified by the operator ID passed in.\ngetPaletteNode(operatorId)\n\n// Returns the category of the palette node identified by the operator passed in\ngetCategoryForNode(nodeOpIdRef)\n\n// Converts a node template from the format use in the palette (that conforms\n// to the schema) to the internal node format.\nconvertNodeTemplate(nodeTemplate)\n`}</code></pre>\n    <h2>{`Selections methods`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Sets the currently selected objects replacing any current selections.\n// newSelection - An array of object IDs for nodes and/or comments\n// pipelineId - Optional. The ID of the pipeline where the objects exist.\n// Selected objects can only be in one pipeline. If this parameter is omitted\n// it is assumed the selections will be for objects in the 'top-level' pipeline\n// being displayed.\nsetSelections(newSelection, pipelineId)\n\n// Clears all the current selections from the canvas.\nclearSelections()\n\n// Selects all the objects on the canvas.\nselectAll()\n\n// Returns an array of the IDs of the currently selected objects.\ngetSelectedObjectIds()\n\n// Returns the currently selected Nodes.\ngetSelectedNodes()\n\n// Returns the currently selected Comments.\ngetSelectedComments()\n\n// Returns the ID of the pipeline in which the currently selected objects\n// exist. Only one pipeline may contain selected objects.\ngetSelectedPipelineId()\n\n// Deletes all currently selected objects.\ndeleteSelectedObjects()\n\n// Returns true if the currently selected objects are all linked together.\n// This is used when deciding to creating a supernode.\nareSelectedNodesContiguous()\n`}</code></pre>\n    <h2>{`Notification messages methods`}</h2>\n    <p>{`The notification panel is displayed by the user by clicking the notifications icon in the toolbar. Your application can display whatever messages it wants in the notification panel. See the `}<Link to=\"/common-canvas/canvas-controller/notification-spec\" mdxType=\"Link\">{`Notification Messages Specification`}</Link>{` documentation for the structure of message objects. The contents of the notification panel can be managed using the methods below:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Overwrites the array of notification messages shown in the notification\n// panel.\n// newMessage - An array of messages (see getNotificationMessages)\nsetNotificationMessages(newMessages)\n\n// Deletes all notification messages shown in the notification panel.\nclearNotificationMessages()\n\n// Removes the notification messages from the given array of ids\ndeleteNotificationMessages(ids)\n\n// Returns the array of current notification messages. If the messageType is\n// provided only messages of that type will be returned. If messageType is\n// not provided, all messages will be returned. The format of a notification\n// message is an object with these fields:\n// {\n//   \"id\": string (Required),\n//   \"type\" : enum, oneOf [\"info\", \"success\", \"warning\", \"error\"] (Required),\n//   \"callback\": function, the callback function when a message is clicked (Required),\n//   \"title\": string (Optional),\n//   \"content\": string, html, JSX Object (Optional),\n//   \"timestamp\": string (Optional),\n//   \"closeMessage\": string (Optional)\n// }\ngetNotificationMessages(messageType)\n\n// Returns the maximum notification message type present in the current set\n// of notification messages. For this: (\"error\" > \"warning\" > \"success\" > \"info\")\ngetNotificationMessagesMaxType()\n`}</code></pre>\n    <h2>{`Node AND comment methods`}</h2>\n    <p>{`In common-canvas nodes and comments are collectively known as objects. The following methods may be used to manage either collections of comments or nodes or a mixture of both. Note:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`See `}<Link to=\"/common-canvas/canvas-controller/style-spec\" mdxType=\"Link\">{`this section`}</Link>{` if you are working with styles.`}</li>\n      <li parentName=\"ul\">{`See `}<Link to=\"/common-canvas/canvas-controller/decorator-spec\" mdxType=\"Link\">{`this section`}</Link>{` if you are working with decorations.`}</li>\n      <li parentName=\"ul\">{`See `}<Link to=\"/common-canvas/canvas-controller/api-object-structure#api-differences-with-schema\" mdxType=\"Link\">{`this section`}</Link>{` for differences between the structure of objects in the API and the schema.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Moves the objects identified in the data object which must be in the\n// pipeline identified by the pipeline ID.\n// data - A javascript object like this:\n// {\n//   nodes: []       // An array of node and comment IDs\n//   offsetX: number // Offset in pixels the objects will move in the X dir\n//   offsetY: number // Offset in pixels the objects will move in the Y dir\n// }\nmoveObjects(data, pipelineId)\n\n// Deletes the objects specified in objectIds array.\n// objectIds - An array of node and comment IDs\ndeleteObjects(objectIds, pipelineId)\n\n// Removes the links to and from the objects specified in the objectIds array.\n// objectIds - An array of node and comment IDs\ndisconnectObjects(objectIds, pipelineId)\n\n// Deletes the object specified by the id in the pipleine specified by\n// pipeline ID.\ndeleteObject(id, pipelineId)\n\n// Sets the style of the objects specified by pipelineObjectIds to be\n// the newStyle which will be either temporary or permanent.\n// pipelineObjectIds: This identified the objects to be styles. It is a\n// javascript object like this:\n//   {\n//     <pipelineID_1>: [\n//       <objectID_1_1>,\n//       <objectID_1_2>\n//     ],\n//     <pipelineID_2>: [\n//         <objectID_2_1>,\n//         <objectID_2_2>\n//     ]\n//   }\n// newStyles - This is a style specification. See the wiki for details.\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\nsetObjectsStyle(pipelineObjectIds, newStyle, temporary)\n\n// Sets the styles of multiple objects at once.\n// pipelineObjStyles - Specified the objects and the styles each should be\n// set to. It is a javascript array like this:\n//   [\n//     { pipelineId: <pipelineId>, objId: <objectId>, style: <style_spec>},\n//     { pipelineId: <pipelineId>, objId: <objectId>, style: <style_spec>},\n//     { pipelineId: <pipelineId>, objId: <objectId>, style: <style_spec>}\n//   ]\n// temporary - A boolean to indicate if the styles are serialized when\n//             getPipelineFlow() method is called or not.\nsetObjectsMultiStyle(pipelineObjStyles, temporary)\n`}</code></pre>\n    <h2>{`Node methods`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Retuns an array of nodes for the pipeline specified by the pipelineId.\ngetNodes(pipelineId)\n\n// Returns a new node created from the object passed in which has the\n// following properties:\n// nodeTemplate - a node template from the palette\n// offsetX - the x coordinate of the new node\n// offsetY - the y coordinate of the new node\n// pipelineId - the ID of the pipeline where the new node will exist\ncreateNode(data, pipelineId)\n\n// Adds a new node into the pipeline specified by the pipelineId.\naddNode(node, pipelineId)\n\n// Deletes the node specified.\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ndeleteNode(nodeId, pipelineId)\n\n// Sets the node properties\n// nodeId - The ID of the node\n// properties - An object containing properties to be overriden in the node\n// pipelineId - The ID of the pipeline\nsetNodeProperties(nodeId, properties, pipelineId)\n\n// Sets the node parameters\n// nodeId - The ID of the node\n// parameters - An array of parameters\n// pipelineId - The ID of the pipeline\nsetNodeParameters(nodeId, parameters, pipelineId)\n\n// Sets the node UI parameters\n// nodeId - The ID of the node\n// parameters - An array of UI parameters\n// pipelineId - The ID of the pipeline\nsetNodeUiParameters(nodeId, uiParameters, pipelineId)\n\n// Sets the node messages\n// nodeId - The ID of the node\n// messages - An array of messages\n// pipelineId - The ID of the pipeline\nsetNodeMessages(nodeId, messages, pipelineId)\n\n// Sets a single message on a node\n// nodeId - The ID of the node\n// message - A message\n// pipelineId - The ID of the pipeline\nsetNodeMessage(nodeId, message, pipelineId)\n\n// Sets the lable for a node\n// nodeId - The ID of the node\n// ndeLabel - The label\n// pipelineId - The ID of the pipeline\nsetNodeLabel(nodeId, newLabel, pipelineId)\n\n// Sets the class name to newClassName of the nodes identified by nodeIds\n// array in the pipleine specified by pipeline ID. The class name will be\n// applied to the node body path.\nsetNodesClassName(nodeIds, newClassName, pipelineId)\n\n// Sets the decorations on a node. The decorations array passed in \n// will replace any decorations currently applied to the node.\n// nodeId - The ID of the node\n// newDecorations - An array of decorations. See Wiki for details.\n// pipelineId - The ID of the pipeline\nsetNodeDecorations(nodeId, newDecorations, pipelineId)\n\n// Sets the input ports on a node. The inputs array of ports provided will\n// replace any input ports for a node.\n// nodeId - The ID of the node\n// inputs - An array of input port objects.\n// pipelineId - The ID of the pipeline\nsetNodeInputPorts(nodeId, inputs, pipelineId)\n\n// Sets the output ports on a node. The outputs array of ports provided will\n// replace any output ports for a node.\n// nodeId - The ID of the node\n// outputs - An array of output port objects.\n// pipelineId - The ID of the pipeline\nsetNodeOutputPorts(nodeId, outputs, pipelineId)\n\n// Sets the decorations of multiple nodes at once. The decorations array\n// passed in will replace any decorations currently applied to the nodes.\n// pipelineNodeDecorations - Specifies the nodes and their decorations.\n// It is a JavaScript array like this:\n//   [\n//     { pipelineId: <pipelineId>, nodeId: <nodeId>, decorations: <decoration_spec_array>},\n//     { pipelineId: <pipelineId>, nodeId: <nodeId>, decorations: <decoration_spec_array>},\n//     { pipelineId: <pipelineId>, nodeId: <nodeId>, decorations: <decoration_spec_array>}\n//   ]\nsetNodesMultiDecorations(pipelineNodeDecorations)\n\n// Sets the input port label on a node\n// nodeId - The ID of the node\n// portId - The ID of the input port\n// newLabel - The label\n// pipelineId - The ID of the pipeline\nsetInputPortLabel(nodeId, portId, newLabel, pipelineId)\n\n// Sets the output port label on a node\n// nodeId - The ID of the node\n// portId - The ID of the output port\n// newLabel - The label\n// pipelineId - The ID of the pipeline\nsetOutputPortLabel(nodeId, portId, newLabel, pipelineId)\n\n// Gets a node\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNode(nodeId, pipelineId)\n\n// Gets the UI parameters for a node\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeUiParameters(nodeId, pipelineId)\n\n// Gets the supernodes for a pipeline.\n// pipelineId - The ID of the pipeline\ngetSupernodes(pipelineId)\n\n// Returns supernode ID that has a subflow_ref to the given pipelineId.\ngetSupernodeObjReferencing(pipelineId)\n\n// Gets the messages for a node\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeMessages(nodeId, pipelineId)\n\n// Gets the array of input ports for the node or null if the node ID is\n// not recognized.\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeInputPorts(nodeId, pipelineId)\n\n// Gets the array of output ports for the node or null if the node ID is\n// not recognized.\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeOutputPorts(nodeId, pipelineId)\n\n// Gets a message for a specific control for a node\n// nodeId - The ID of the node\n// controlName - The control name\n// pipelineId - The ID of the pipeline\ngetNodeMessage(nodeId, controlName, pipelineId)\n\n// Gets an array of decorations for a node\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeDecorations(nodeId, pipelineId)\n\n// Gets the class name associated with the node specified by nodeId in the\n// pipeline specified by pipelineId.\ngetNodeClassName(nodeId, pipelineId)\n\n// Gets the style spcification (see Wiki) for a node\n// nodeId - The ID of the node\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\n// pipelineId - The ID of the pipeline\ngetNodeStyle(nodeId, temporary, pipelineId)\n\n// Returns a boolean to indicate whether the supernode is expanded in place.\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\nisSuperNodeExpandedInPlace(nodeId, pipelineId)\n`}</code></pre>\n    <p>{`The format of the message object is described in Pipeline Flow UI schema: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/elyra-ai/pipeline-schemas/blob/master/common-pipeline/pipeline-flow/pipeline-flow-ui-v1-schema.json\"\n      }}>{`https://github.com/elyra-ai/pipeline-schemas/blob/master/common-pipeline/pipeline-flow/pipeline-flow-ui-v1-schema.json`}</a></p>\n    <h2>{`Comment methods`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Returns the comments from the pipeline.\n// pipelineId - The ID of the pipeline\ngetComments(pipelineId)\n\n// Returns a comment from the pipeline.\n// comId - The ID of the comment\n// pipelineId - The ID of the pipeline\ngetComment(comId, pipelineId)\n\n// Creates a comment for the pipeline.\n// source - Input data\n// pipelineId - The ID of the pipeline\ncreateComment(source, pipelineId)\n\n// Adds a comment to the pipeline.\n// data - the data describing the comment\n// pipelineId - The ID of the pipeline\naddComment(data, pipelineId)\n\n// Edits a comment with the data.\n// data - the comment\n// pipelineId - The ID of the pipeline\neditComment(data, pipelineId)\n\n// Sets the properties in the comment identified by the commentId. The\n// commentProperties is an object containing one or more properties that will\n// replace the corresponding properties in the comment. For example: if\n// commentProperties is { x_pos: 50, y_pos: 70 } the comment\n// will be set to that position.\nsetCommentProperties(commentId, commentProperties, pipelineId)\n\n// Sets the class name to newClassName of the comments identified by commentIds\n// array in the pipleine specified by pipeline ID. The class name will be\n// applied to the comment body path.\nsetCommentsClassName(commentIds, newClassName, pipelineId)\n\n// Deletes a comment\n// comId - The ID of the comment\n// pipelineId - The ID of the pipeline\ndeleteComment(comId, pipelineId)\n\n// Gets the class name associated with the comment specified by commentId in the\n// pipeline specified by pipelineId.\ngetCommentClassName(commentId, pipelineId)\n\n// Gets the style spcification (see Wiki) for a comment\n// commentId - The ID of the node\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\n// pipelineId - The ID of the pipeline\ngetCommentStyle(commentId, temporary, pipelineId)\n`}</code></pre>\n    <h2>{`Link methods`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Gets a link\n// linkId - The ID of the link\n// pipelineId - The ID of the pipeline\ngetLink(linkId, pipelineId)\n\n// Returns an array of link objects for the pipelineId passed in.\n// pipelineId - The ID of the pipeline\ngetLinks(pipelineId)\n\n// Sets the properties in the link identified by the linkId. The\n// linkProperties is an object containing one or more properties that will\n// replace the corresponding properties in the link. For exam\\`ple: if\n// linkProperties is { trgNodeId: \"123\", trgNodePortId: \"789\" } the target\n// node ID will be set to \"123\" and the target port ID set to \"789\".\nsetLinkProperties(linkId, linkProperties, pipelineId)\n\n// Sets the source properties in the data link identified by the linkId. The\n// srcNodeId and srcNodePortId will be set to the values provided. If\n// srcNodePortId is set to null the current srcNodePortId will be removed\n// from the link. Also, if the link has a srcPos property (because its\n// source end is detached) that will be removed.\nsetNodeDataLinkSrcInfo(linkId, srcNodeId, srcNodePortId, pipelineId)\n\n// Sets the target properties in the data link identified by the linkId. The\n// trgNodeId and trgNodePortId will be set to the values provided. If\n// trgNodePortId is set to null the current trgNodePortId will be removed\n// from the link. Also, if the link has a trgPos property (because its\n// target end is detached) that will be removed.\nsetNodeDataLinkTrgInfo(linkId, trgNodeId, trgNodePortId, pipelineId)\n\n// Gets a node to node data link\n// srcNodeId - The ID of the source node\n// srcNodePortId - The ID of the source node port\n// trgNodeId - The ID of the target node\n// trgNodePortId - The ID of the target node port\n// pipelineId - The ID of the pipeline\ngetNodeDataLinkFromInfo(srcNodeId, srcNodePortId, trgNodeId, trgNodePortId, pipelineId)\n\n// Gets a comment to node link\n// id1 - The ID of the comment\n// id2 - The ID of the node\n// pipelineId - The ID of the pipeline\ngetCommentLinkFromInfo(id1, id2, pipelineId)\n\n// Gets a node to node association link\n// id1 - The ID of one of the node\n// id2 - The ID of one of the node\n// pipelineId - The ID of the pipeline\ngetNodeAssocLinkFromInfo(id1, id2, pipelineId)\n\n// Adds links to a pipeline\n// linkList - An array of links\n// pipelineId - The ID of the pipeline\naddLinks(linkList, pipelineId)\n\n// Deletes a link\n// source - An array of links\n// pipelineId - The ID of the pipeline\ndeleteLink(link, pipelineId)\n\n// Creates node to node links\n// data - Data describing the links\n// pipelineId - The ID of the pipeline\ncreateNodeLinks(data, pipelineId)\n\n// Creates comment links\n// data - Data describing the links\n// pipelineId - The ID of the pipeline\ncreateCommentLinks(data, pipelineId)\n\n// Sets the class name to newClassName of the links identified by linkIds\n// array in the pipleine specified by pipeline ID. The class name will be\n// applied to the link line path.\nsetLinksClassName(linkIds, newClassName, pipelineId)\n\n// Sets the style of the links specified by pipelineLinkIds to be\n// the newStyle which will be either temporary or permanent.\n// pipelineLinkIds - This identifies the objects to be styles. It is a\n// javascript object like this:\n//   {\n//     <pipelineID_1>: [\n//       <linkID_1_1>,\n//       <linkID_1_2>\n//     ],\n//     <pipelineID_2>: [\n//         <linkID_2_1>,\n//         <linkID_2_2>\n//     ]\n//   }\n// newStyle - This is a style specification. See the wiki for details.\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\nsetLinksStyle(pipelineLinkIds, newStyle, temporary)\n\n// Sets the styles of multiple links at once.\n// pipelineObjStyles - Specified the links and the styles each should be\n// set to. It is a javascript array like this:\n//   [\n//     { pipelineId: <pipelineId>, objId: <linkId>, style: <style_spec>},\n//     { pipelineId: <pipelineId>, objId: <linkId>, style: <style_spec>},\n//     { pipelineId: <pipelineId>, objId: <linkId>, style: <style_spec>}\n//   ]\n// temporary - A boolean to indicate if the styles are serialized when\n//             getPipelineFlow() method is called or not.\nsetLinksMultiStyle(pipelineObjStyles, temporary)\n\n// Gets the class name associated with the link specified by linkId in the\n// pipeline specified by pipelineId.\ngetLinkClassName(linkId, pipelineId)\n\n// Returns the style specification for a link.\n// linkIds - An array of links\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\n// pipelineId - The ID of the pipeline\ngetLinkStyle(linkId, temporary, pipelineId)\n\n// Sets the decorations on a link. The decorations array passed in\n// will replace any decorations currently applied to the link.\n// linkId - The ID of the link\n// newDecorations - An array of decorations. See Wiki for details.\n// pipelineId - The ID of the pipeline\nsetLinkDecorations(linkId, newDecorations, pipelineId)\n\n// Sets the decorations of multiple links at once. The decorations array\n// passed in will replace any decorations currently applied to the links.\n// pipelineLinkDecorations - Specifies the links and their decorations.\n// It is a javascript array like this:\n//   [\n//     { pipelineId: <pipelineId>, linkId: <linkId>, decorations: <decoration_spec_array>},\n//     { pipelineId: <pipelineId>, linkId: <linkId>, decorations: <decoration_spec_array>},\n//     { pipelineId: <pipelineId>, linkId: <linkId>, decorations: <decoration_spec_array>}\n//   ]\nsetLinksMultiDecorations(pipelineLinkDecorations)\n\n// Gets an array of decorations for a link\n// linkId - The ID of the link\n// pipelineId - The ID of the pipeline\ngetLinkDecorations(linkId, pipelineId)\n`}</code></pre>\n    <h2>{`Breadcrumbs methods`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Returns the current array of breadcrumbs. There will one breadcrumb object\n// for each level of supernode that the user has navigated into. This array\n// can be used to display breadcrumbs to the user to show where they are\n// within the navigation hierarchy within common canvas.\ngetBreadcrumbs()\n\n// Returns the last breadcrumb which represents the level with supernode\n// hierarchy that the user has currently navigated to.\ngetCurrentBreadcrumb()\n`}</code></pre>\n    <h2>{`Branch highlight methods`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Highlights the branch(s) (both upstream and downstream) from the node\n// IDs passed in and returns the highlighted object Ids.\n// nodeIds - An array of node Ids\n// pipelineId - The ID of the pipeline\nhighlightBranch(nodeIds, pipelineId)\n\n// Highlights the upstream nodes from the node IDs passed in\n// and returns the returns the highlighted object Ids.\n// nodeIds - An array of node Ids\n// pipelineId - The ID of the pipeline\nhighlightUpstream(nodeIds, pipelineId)\n\n// Highlights the downstream nodes from the node IDs passed in\n// and returns highlighted object Ids.\n// nodeIds - An array of node Ids\n// pipelineId - The ID of the pipeline\nhighlightDownstream(nodeIds, pipelineId)\n`}</code></pre>\n    <h2>{`Operational methods`}</h2>\n    <p>{`These are general purpose methods for operation of the canvas:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Returns a Boolean to indicate whether canvas logging is switched on or off. \ngetLoggingState()\n\n// Sets canvas logging based on the Boolean passed in.\nsetLoggingState(state)\n\n// Opens the palette\nopenPalette()\n\n// Closes the palette\nclosePalette()\n\n// Returns true if the palette is currently open\nisPaletteOpen()\n\n// Opens the context menu\nopenContextMenu(menuDef)\n\n// Closes the context menu\ncloseContextMenu()\n\n// Opens the notification panel\nopenNotificationPanel()\n\n// Closes the notification panel\ncloseNotificationPanel()\n\n// Either opens or closes the notifictaion panel based on its current status\ntoggleNotificationPanel()\n\n// Returns a boolean to indicate of the right flyout is open or not\nisRightFlyoutOpen()\n\n// Displays full-page the pipeline refreneced by the supernode object passed in\ndisplaySubPipeline(node)\n\n// Displays full-page the previous pipeline from the one currently being displayed\ndisplayPreviousPipeline()\n\n// Centers the canvas contents and zooms in\nzoomIn()\n\n// Centers the canvas contents and zooms out\nzoomOut()\n\n// Zooms the canvas contents to fit within the viewport\nzoomToFit()\n\n// Changes the zoom amounts for the canvas. This method does not alter the\n// pipelineFlow document. zoomObject is an object with three fields:\n// x: Is the horizontal translate amount which is a number indicating the\n//    pixel amount to move. Negative left and positive right\n// y: Is the vertical translate amount which is a number indicating the\n//    pixel amount to move. Negative up and positive down.\n// k: is the scale amount which is a number greater than 0 where 1 is the\n//    default scale size.\nzoomTo(zoomObject)\n\n// Increments the translation of the canvas by the x and y increment\n// amounts. The optional animateTime parameter can be provided to animate the\n// movement of the canvas. It is a time for the animation in milliseconds.\n// If omitted the movement happens immediately.\ntranslateBy(x, y, animateTime)\n\n// Returns the current zoom object for the currently displayed canvas.\ngetZoom()\n\n// Returns a zoom object required to pan the objects (nodes and/or comments)\n// identified by the objectIds array to 'reveal' the objects in the viewport.\n// The zoom object returned can be provided to the CanvasController.zoomTo()\n// method to perform the zoom/pan action.\n// If the xPos and yPos variables are provided it will return a zoom object\n// to pan the objects to a location specified by a percentage offset of the\n// viewport width and height respectively.\n// If the xPos and yPos parameters are undefined (omitted) and all the\n// objects are fully within the canvas viewport, it will return null.\n// This can be used to detect whether the objects are fully visible or not.\n// Otherwise it will return a zoom object which can be used to pan the\n// objects into the viewport so they appear at the nearest side of the\n// viewport to where they are currently positioned.\n// The zoom object has three fields:\n// x: Is the horizontal translate amount which is a number indicating the\n//    pixel amount to move. Negative left and positive right\n// y: Is the vertical translate amount which is a number indicating the\n//    pixel amount to move. Negative up and positive down.\n// k: is the scale amount which is a number greater than 0 where 1 is the\n//    default scale size.\n// Parameters:\n// objectIds - An array of nodes and/or comment IDs.\n// xPos - Optional. Can be set to percentage offset of the viewport width.\n// yPos - Optional. Can be set to percentage offset of the viewport height.\ngetZoomToReveal(objectIds, xPos, yPos)\n\n// Clears any saved zoom values stored in local storage. This means\n// newly opened flows will appear with the default zoom. This method\n// is only applicable when the \\`enableSaveZoom\\` config parameter is\n// set to \"LocalStorage\".\nclearSavedZoomValues()\n\n// Returns a Boolean to indicate whether canvas logging is switched on or off. \ngetLoggingState()\n\n// Sets canvas logging based on the Boolean passed in.\nsetLoggingState(state)\n\n// Opens the palette\nopenPalette()\n\n// Closes the palette\nclosePalette()\n\n// Returns true if the palette is currently open\nisPaletteOpen()\n\n// Opens the context menu\nopenContextMenu(menuDef)\n\n// Closes the context menu\ncloseContextMenu()\n\n// Opens the notification panel\nopenNotificationPanel()\n\n// Closes the notification panel\ncloseNotificationPanel()\n\n// Centers the canvas contents and zooms in\nzoomIn()\n\n// Centers the canvas contents and zooms out\nzoomOut()\n\n// Zooms the canvas contents to fit within the viewport\nzoomToFit()\n\n// Changes the zoom amounts for the canvas. This method does not alter the\n// pipelineFlow document. zoomObject is an object with three fields:\n// x: Is the horizontal translate amount which is a number indicating the\n//    pixel amount to move. Negative left and positive right\n// y: Is the vertical translate amount which is a number indicating the\n//    pixel amount to move. Negative up and positive down.\n// k: is the scale amount which is a number greater than 0 where 1 is the\n//    default scale size.\nzoomTo(zoomObject)\n\n// Increments the translation of the canvas by the x and y increment\n// amounts. The optional animateTime parameter can be provided to animate the\n// movement of the canvas. It is a time for the animation in milliseconds.\n// If omitted the movement happens immediately.\ntranslateBy(x, y, animateTime)\n\n// Returns the current zoom object for the currently displayed canvas.\ngetZoom()\n\n// Returns a zoom object required to pan the objects (nodes and/or comments)\n// identified by the objectIds array to 'reveal' the objects in the viewport.\n// The zoom object returned can be provided to the CanvasController.zoomTo()\n// method to perform the zoom/pan action.\n// If the xPos and yPos variables are provided it will return a zoom object\n// to pan the objects to a location specified by a percentage offset of the\n// viewport width and height respectively.\n// If the xPos and yPos parameters are undefined (omitted) and all the\n// objects are fully within the canvas viewport, it will return null.\n// This can be used to detect whether the objects are fully visible or not.\n// Otherwise it will return a zoom object which can be used to pan the\n// objects into the viewport so they appear at the nearest side of the\n// viewport to where they are currently positioned.\n// The zoom object has three fields:\n// x: Is the horizontal translate amount which is a number indicating the\n//    pixel amount to move. Negative left and positive right\n// y: Is the vertical translate amount which is a number indicating the\n//    pixel amount to move. Negative up and positive down.\n// k: is the scale amount which is a number greater than 0 where 1 is the\n//    default scale size.\n// Parameters:\n// objectIds - An array of nodes and/or comment IDs.\n// xPos - Optional. Can be set to percentage offset of the viewport width.\n// yPos - Optional. Can be set to percentage offset of the viewport height.\ngetZoomToReveal(objectIds, xPos, yPos)\n\n// Clears any saved zoom values stored in local storage. This means\n// newly opened flows will appear with the default zoom. This method\n// is only applicable when the \\`enableSaveZoom\\` config parameter is\n// set to \"LocalStorage\".\nclearSavedZoomValues()\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}